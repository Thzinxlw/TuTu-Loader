local logo = [[
    <svg width="796" height="597" viewBox="0 0 796 597" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M501 128C513.482 127.977 525.965 127.959 538.447 127.948C544.242 127.943 550.038 127.936 555.833 127.925C561.423 127.914 567.012 127.908 572.601 127.905C574.737 127.903 576.873 127.9 579.01 127.894C581.993 127.887 584.977 127.886 587.96 127.886C589.296 127.881 589.296 127.881 590.659 127.876C596.772 127.886 596.772 127.886 599 129C599.043 130.666 599.041 132.334 599 134C598.67 134.33 598.34 134.66 598 135C597.34 139.95 596.68 144.9 596 150C615.47 150 634.94 150 655 150C655 155.951 654.868 161.469 654.125 167.312C654.035 168.045 653.946 168.778 653.854 169.533C653.188 174.847 652.367 180.124 651.437 185.398C651.029 187.825 650.714 190.243 650.437 192.688C650 196 650 196 649 197C648.714 198.837 648.485 200.683 648.281 202.531C648.154 203.651 648.026 204.772 647.895 205.926C647.699 207.695 647.699 207.695 647.5 209.5C647.244 211.823 646.983 214.146 646.719 216.469C646.605 217.505 646.491 218.54 646.373 219.607C646 222 646 222 645 223C644.34 226.3 643.68 229.6 643 233C613.96 233 584.92 233 555 233C555 232.34 555 231.68 555 231C554.34 231 553.68 231 553 231C553.33 228.69 553.66 226.38 554 224C547.73 224 541.46 224 535 224C535 224.66 535 225.32 535 226C535.516 226.083 536.031 226.165 536.562 226.25C540.045 227.321 542.872 229.135 546 231C546 231.66 546 232.32 546 233C546.516 233.083 547.031 233.165 547.562 233.25C551.045 234.321 553.872 236.135 557 238C557 238.66 557 239.32 557 240C559.97 240.99 559.97 240.99 563 242C563 242.66 563 243.32 563 244C564.32 244.33 565.64 244.66 567 245C567 245.66 567 246.32 567 247C567.598 247.144 568.196 247.289 568.812 247.438C570.561 247.887 572.287 248.429 574 249C574.33 249.66 574.66 250.32 575 251C576.364 251.845 577.767 252.628 579.187 253.375C582.952 255.414 586.562 257.443 590 260C590 260.66 590 261.32 590 262C590.516 262.083 591.031 262.165 591.562 262.25C595.045 263.321 597.872 265.135 601 267C601 267.66 601 268.32 601 269C601.701 269.083 602.402 269.165 603.125 269.25C606.69 270.18 609.09 271.767 612 274C612 274.66 612 275.32 612 276C614.97 276.99 614.97 276.99 618 278C618 278.66 618 279.32 618 280C618.598 280.144 619.196 280.289 619.812 280.438C621.561 280.887 623.287 281.429 625 282C625 282.66 625 283.32 625 284C625.959 284.186 625.959 284.186 626.937 284.375C627.618 284.581 628.299 284.787 629 285C629.33 285.66 629.66 286.32 630 287C630.99 287.33 631.98 287.66 633 288C633.101 294.754 633.133 301.328 632 308C631.67 308.33 631.34 308.66 631 309C630.713 310.91 630.485 312.829 630.281 314.75C630.154 315.915 630.026 317.081 629.895 318.281C629.699 320.122 629.699 320.122 629.5 322C629.244 324.417 628.983 326.834 628.719 329.25C628.605 330.328 628.491 331.405 628.373 332.516C628 335 628 335 627 336C626.726 337.562 626.509 339.133 626.316 340.707C626.194 341.681 626.072 342.654 625.947 343.658C625.82 344.699 625.693 345.74 625.562 346.812C624.65 354.085 623.677 361.319 622.406 368.539C621.778 372.345 621.384 376.162 621 380C620.34 380 619.68 380 619 380C619.023 380.594 619.046 381.189 619.07 381.801C619.214 388.423 618.377 394.531 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C595.53 403 576.06 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.944 409.572 553.944 409.572 553.887 411.176C553.821 412.555 553.755 413.934 553.687 415.312C553.654 416.348 553.654 416.348 553.619 417.404C553.346 422.541 553.346 422.541 551.718 424.701C549.627 426.282 548.595 426.371 545.995 426.361C545.183 426.365 544.371 426.369 543.534 426.373C542.648 426.362 541.761 426.352 540.847 426.341C539.91 426.341 538.973 426.341 538.008 426.342C534.908 426.34 531.808 426.316 528.707 426.293C526.559 426.287 524.411 426.283 522.263 426.28C516.606 426.269 510.949 426.239 505.292 426.206C499.521 426.175 493.75 426.162 487.978 426.146C476.652 426.114 465.326 426.063 454 426C453.721 417.902 454.808 411.342 456 403C438.84 403 421.68 403 404 403C404 402.34 404 401.68 404 401C403.01 401 402.02 401 401 401C401 400.01 401 399.02 401 398C400.34 398 399.68 398 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.161 389.018 398.161 389.018 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.062C400.255 374.751 400.255 374.751 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.981 365.854 402.961 364.708 402.941 363.527C402.942 359.149 403.368 354.899 403.937 350.562C404.024 349.844 404.111 349.125 404.201 348.385C404.871 343.129 404.871 343.129 406 342C406.274 340.368 406.491 338.726 406.684 337.082C406.807 336.075 406.93 335.067 407.057 334.029C407.308 331.904 407.558 329.779 407.807 327.654C409.11 317.03 409.11 317.03 411 313C414.478 311.841 417.264 311.832 420.934 311.779C421.635 311.767 422.336 311.756 423.059 311.744C425.375 311.707 427.691 311.678 430.008 311.648C431.615 311.625 433.223 311.602 434.831 311.578C438.198 311.53 441.566 311.485 444.933 311.442C449.259 311.387 453.585 311.324 457.91 311.257C461.228 311.207 464.547 311.162 467.865 311.118C469.461 311.097 471.056 311.074 472.652 311.049C474.876 311.015 477.1 310.988 479.325 310.962C481.226 310.937 481.226 310.937 483.167 310.911C486 311 486 311 487 312C489.35 312.235 491.706 312.414 494.062 312.562C495.353 312.646 496.643 312.73 497.973 312.816C498.972 312.877 499.971 312.938 501 313C501 315.97 501 318.94 501 322C506.28 321.67 511.56 321.34 517 321C516.67 320.01 516.34 319.02 516 318C514.108 317.319 514.108 317.319 512 317C511.01 316.67 510.02 316.34 509 316C509 315.34 509 314.68 509 314C507.68 313.67 506.36 313.34 505 313C505 312.34 505 311.68 505 311C502.69 310.34 500.38 309.68 498 309C498 308.34 498 307.68 498 307C497.278 306.732 496.556 306.464 495.812 306.188C493.002 305.001 490.516 303.725 488 302C488 301.34 488 300.68 488 300C487.484 299.917 486.969 299.835 486.437 299.75C482.955 298.679 480.128 296.865 477 295C477 294.34 477 293.68 477 293C476.134 292.752 475.267 292.505 474.375 292.25C470.789 290.922 468.037 289.314 465 287C465 286.34 465 285.68 465 285C463.68 284.67 462.36 284.34 461 284C461 283.34 461 282.68 461 282C459.824 281.783 459.824 281.783 458.625 281.562C456 281 456 281 454 280C454 279.34 454 278.68 454 278C453.443 277.897 452.886 277.794 452.312 277.688C449.552 276.867 447.428 275.533 445 274C444.34 273.67 443.68 273.34 443 273C443 272.34 443 271.68 443 271C440.03 270.01 440.03 270.01 437 269C437 268.34 437 267.68 437 267C435.68 266.67 434.36 266.34 433 266C433 265.34 433 264.68 433 264C432.402 263.856 431.804 263.711 431.187 263.562C429.438 263.113 427.713 262.571 426 262C425.505 261.01 425.505 261.01 425 260C422.983 258.866 422.983 258.866 421 258C420.729 251.734 421.167 245.649 421.937 239.438C422.024 238.723 422.111 238.008 422.201 237.271C422.871 232.129 422.871 232.129 424 231C424.286 229.163 424.515 227.317 424.719 225.469C424.846 224.349 424.974 223.228 425.105 222.074C425.236 220.895 425.366 219.715 425.5 218.5C425.756 216.177 426.017 213.854 426.281 211.531C426.395 210.495 426.509 209.46 426.627 208.393C427 206 427 206 428 205C428.375 202.166 428.706 199.342 429 196.5C429.865 188.135 429.865 188.135 431 187C431.299 185.078 431.539 183.148 431.754 181.215C431.886 180.045 432.018 178.875 432.154 177.67C432.289 176.438 432.424 175.207 432.562 173.938C432.77 172.084 432.77 172.084 432.982 170.193C433.325 167.129 433.664 164.065 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.937 157.188C435.891 154.359 436.083 152.751 437 150C438.105 149.985 438.105 149.985 439.233 149.969C446.164 149.871 453.095 149.768 460.026 149.661C463.59 149.605 467.153 149.552 470.717 149.503C474.81 149.446 478.903 149.381 482.996 149.316C484.924 149.291 484.924 149.291 486.891 149.266C488.072 149.246 489.253 149.226 490.47 149.205C491.516 149.19 492.562 149.174 493.64 149.158C495.956 149.263 495.956 149.263 497 148C497.4 145.145 497.752 142.303 498.062 139.438C498.153 138.631 498.244 137.825 498.338 136.994C498.562 134.997 498.782 132.998 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#740391"/>
<path d="M172 150C200.757 149.977 229.514 149.96 258.271 149.949C261.663 149.948 265.056 149.946 268.448 149.945C269.123 149.945 269.798 149.945 270.494 149.944C281.441 149.94 292.387 149.932 303.334 149.923C314.559 149.914 325.785 149.908 337.01 149.906C343.318 149.905 349.626 149.902 355.934 149.894C361.865 149.888 367.796 149.885 373.727 149.887C375.91 149.887 378.092 149.885 380.275 149.881C383.243 149.876 386.211 149.877 389.18 149.88C390.053 149.877 390.927 149.874 391.827 149.871C397.772 149.886 397.772 149.886 400 151C400 152.98 400 154.96 400 157C399.34 157 398.68 157 398 157C398.041 158.134 398.082 159.269 398.125 160.438C398.133 165.337 397.626 170.14 397.062 175C396.976 175.766 396.889 176.533 396.799 177.322C396.126 182.874 396.126 182.874 395 184C394.738 185.383 394.532 186.776 394.352 188.172C394.176 189.496 394.176 189.496 393.998 190.846C393.875 191.805 393.752 192.763 393.625 193.75C393.36 195.751 393.094 197.753 392.828 199.754C392.692 200.784 392.556 201.814 392.416 202.875C391.758 207.816 391.071 212.752 390.375 217.688C390.252 218.577 390.129 219.467 390.002 220.384C389.886 221.21 389.769 222.036 389.648 222.887C389.496 223.973 389.496 223.973 389.341 225.081C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.154 236.576 387.026 237.645 386.895 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.978 246.593 385.85 247.659 385.719 248.758C385.548 250.23 385.548 250.23 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.937 263.063C382.847 263.821 382.756 264.58 382.662 265.361C382.438 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.073 380.07 272.625C380.315 283.257 378.766 293.843 376.504 304.211C375.657 308.9 375.189 313.639 374.697 318.377C374.103 323.897 374.103 323.897 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.701 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.644 354.751 368.644 354.751 368.437 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.335 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.594 365.046 370.189 365.07 370.801C365.234 378.301 365.266 386.601 361 393C360.796 395.22 360.796 395.22 360.937 397.562C361.098 401.805 361.098 401.805 360 404C330.63 404 301.26 404 271 404C271 401.69 271 399.38 271 397C271.66 397 272.32 397 273 397C272.988 396.432 272.977 395.863 272.965 395.277C272.908 390.393 273.18 385.815 274 381C274.66 381 275.32 381 276 381C275.981 379.711 275.961 378.422 275.941 377.094C275.942 372.178 276.368 367.378 276.937 362.5C277.024 361.69 277.112 360.881 277.201 360.047C277.871 354.129 277.871 354.129 279 353C279.286 351.236 279.515 349.463 279.719 347.688C279.846 346.612 279.974 345.537 280.105 344.43C280.236 343.298 280.366 342.166 280.5 341C280.756 338.77 281.017 336.541 281.281 334.312C281.452 332.822 281.452 332.822 281.627 331.301C282 329 282 329 283 328C283.213 326.673 283.37 325.337 283.5 324C283.582 323.196 283.665 322.391 283.75 321.562C283.832 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.572 313.257 284.644 312.515 284.719 311.75C285 310 285 310 286 309C286.298 307.152 286.539 305.294 286.754 303.434C286.886 302.309 287.018 301.184 287.154 300.025C287.289 298.841 287.424 297.657 287.562 296.438C287.701 295.25 287.84 294.062 287.982 292.838C288.325 289.892 288.664 286.946 289 284C289.66 284 290.32 284 291 284C290.959 282.845 290.917 281.69 290.875 280.5C290.867 275.782 291.36 271.175 291.937 266.5C292.068 265.422 292.068 265.422 292.201 264.322C292.873 259.127 292.873 259.127 294 258C294.213 256.673 294.37 255.337 294.5 254C294.582 253.196 294.665 252.391 294.75 251.563C294.832 250.717 294.915 249.871 295 249C295.163 247.333 295.329 245.666 295.5 244C295.572 243.258 295.644 242.515 295.719 241.75C296 240 296 240 297 239C297.232 237.485 297.412 235.962 297.562 234.438C297.646 233.611 297.73 232.785 297.816 231.934C297.877 231.296 297.938 230.657 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.313C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.114 263.336 256.027 264.187 255.937 265.063C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.194 305.376 249.072 306.3 248.947 307.251C248.82 308.241 248.693 309.23 248.562 310.25C248.296 312.27 248.03 314.289 247.762 316.309C247.632 317.289 247.502 318.27 247.369 319.281C246.914 322.633 246.405 325.972 245.875 329.312C245.103 334.199 244.501 339.078 244 344C243.34 344 242.68 344 242 344C242.023 344.548 242.046 345.096 242.07 345.66C242.251 353.585 241.168 361.178 240 369C239.34 369 238.68 369 238 369C238.012 369.629 238.023 370.258 238.035 370.906C238.093 376.377 237.884 381.596 237 387C236.67 387.33 236.34 387.66 236 388C235.626 390.501 235.295 392.99 235 395.5C234.135 402.865 234.135 402.865 233 404C230.261 404.095 227.548 404.126 224.808 404.114C223.95 404.114 223.091 404.114 222.207 404.114C219.355 404.113 216.504 404.105 213.652 404.098C211.681 404.096 209.709 404.094 207.738 404.093C202.538 404.09 197.338 404.08 192.138 404.069C186.836 404.058 181.534 404.054 176.232 404.049C165.822 404.038 155.411 404.021 145 404C144.121 400.818 144.038 398.913 144.812 395.688C146.044 390.078 146.766 384.448 147.496 378.754C148.084 374.373 148.809 370.026 149.562 365.672C149.964 363.222 150.283 360.779 150.562 358.312C151 355 151 355 152 354C152.275 352.257 152.492 350.504 152.684 348.75C152.807 347.666 152.93 346.582 153.057 345.465C153.307 343.186 153.557 340.908 153.807 338.629C154.452 332.947 155.242 327.426 156.574 321.863C157.095 319.585 157.367 317.328 157.562 315C157.894 311.106 157.894 311.106 159 310C159.286 308.163 159.515 306.317 159.719 304.469C159.846 303.349 159.974 302.228 160.105 301.074C160.236 299.895 160.366 298.715 160.5 297.5C160.756 295.177 161.017 292.854 161.281 290.531C161.452 288.978 161.452 288.978 161.627 287.393C162 285 162 285 163 284C163.286 282.248 163.515 280.486 163.719 278.723C163.846 277.652 163.974 276.582 164.105 275.479C164.236 274.351 164.366 273.224 164.5 272.063C164.757 269.845 165.017 267.627 165.281 265.41C165.452 263.927 165.452 263.927 165.627 262.414C166 260 166 260 167 258C167.441 254.308 167.815 250.617 168.162 246.916C168.654 242.073 169.533 237.665 171 233C171.33 231.68 171.66 230.36 172 229C168.04 229 164.08 229 160 229C160.142 226.166 160.289 223.333 160.437 220.5C160.477 219.709 160.516 218.917 160.557 218.102C161.325 203.675 161.325 203.675 163 202C163.275 200.257 163.492 198.504 163.684 196.75C163.807 195.666 163.93 194.582 164.057 193.465C164.307 191.186 164.557 188.908 164.807 186.629C165.453 180.944 166.25 175.428 167.583 169.864C168.266 166.813 168.394 163.764 168.559 160.652C168.972 158.17 169.629 156.173 170.528 153.834C170.802 153.116 171.076 152.397 171.359 151.657C171.676 150.837 171.676 150.837 172 150Z" fill="#FBFBFB"/>
<path d="M172 150C200.757 149.977 229.514 149.96 258.271 149.949C261.663 149.948 265.056 149.946 268.448 149.945C269.123 149.945 269.798 149.945 270.494 149.944C281.441 149.94 292.387 149.932 303.334 149.923C314.559 149.914 325.785 149.908 337.01 149.906C343.318 149.905 349.626 149.902 355.934 149.894C361.865 149.888 367.796 149.885 373.727 149.887C375.91 149.887 378.092 149.885 380.275 149.881C383.243 149.876 386.211 149.877 389.18 149.88C390.053 149.877 390.927 149.874 391.827 149.871C397.772 149.886 397.772 149.886 400 151C400 152.98 400 154.96 400 157C399.34 157 398.68 157 398 157C398.041 158.134 398.082 159.269 398.125 160.438C398.133 165.337 397.626 170.14 397.062 175C396.976 175.766 396.889 176.533 396.799 177.322C396.126 182.874 396.126 182.874 395 184C394.738 185.383 394.532 186.776 394.352 188.172C394.176 189.496 394.176 189.496 393.998 190.846C393.875 191.805 393.752 192.763 393.625 193.75C393.36 195.751 393.094 197.753 392.828 199.754C392.692 200.784 392.556 201.814 392.416 202.875C391.758 207.816 391.071 212.752 390.375 217.688C390.252 218.577 390.129 219.467 390.002 220.384C389.886 221.21 389.769 222.036 389.648 222.887C389.496 223.973 389.496 223.973 389.341 225.081C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.154 236.576 387.026 237.645 386.895 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.978 246.593 385.85 247.659 385.719 248.758C385.548 250.23 385.548 250.23 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.937 263.063C382.847 263.821 382.756 264.58 382.662 265.361C382.438 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.073 380.07 272.625C380.315 283.257 378.766 293.843 376.504 304.211C375.657 308.9 375.189 313.639 374.697 318.377C374.103 323.897 374.103 323.897 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.701 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.644 354.751 368.644 354.751 368.437 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.335 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.594 365.046 370.189 365.07 370.801C365.234 378.301 365.266 386.601 361 393C360.796 395.22 360.796 395.22 360.937 397.562C361.098 401.805 361.098 401.805 360 404C330.63 404 301.26 404 271 404C271 401.69 271 399.38 271 397C271.66 397 272.32 397 273 397C272.988 396.432 272.977 395.863 272.965 395.277C272.908 390.393 273.18 385.815 274 381C274.66 381 275.32 381 276 381C275.981 379.711 275.961 378.422 275.941 377.094C275.942 372.178 276.368 367.378 276.937 362.5C277.024 361.69 277.112 360.881 277.201 360.047C277.871 354.129 277.871 354.129 279 353C279.286 351.236 279.515 349.463 279.719 347.688C279.846 346.612 279.974 345.537 280.105 344.43C280.236 343.298 280.366 342.166 280.5 341C280.756 338.77 281.017 336.541 281.281 334.312C281.452 332.822 281.452 332.822 281.627 331.301C282 329 282 329 283 328C283.213 326.673 283.37 325.337 283.5 324C283.582 323.196 283.665 322.391 283.75 321.562C283.832 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.572 313.257 284.644 312.515 284.719 311.75C285 310 285 310 286 309C286.298 307.152 286.539 305.294 286.754 303.434C286.886 302.309 287.018 301.184 287.154 300.025C287.289 298.841 287.424 297.657 287.562 296.438C287.701 295.25 287.84 294.062 287.982 292.838C288.325 289.892 288.664 286.946 289 284C289.66 284 290.32 284 291 284C290.959 282.845 290.917 281.69 290.875 280.5C290.867 275.782 291.36 271.175 291.937 266.5C292.068 265.422 292.068 265.422 292.201 264.322C292.873 259.127 292.873 259.127 294 258C294.213 256.673 294.37 255.337 294.5 254C294.582 253.196 294.665 252.391 294.75 251.563C294.832 250.717 294.915 249.871 295 249C295.163 247.333 295.329 245.666 295.5 244C295.572 243.258 295.644 242.515 295.719 241.75C296 240 296 240 297 239C297.232 237.485 297.412 235.962 297.562 234.438C297.646 233.611 297.73 232.785 297.816 231.934C297.877 231.296 297.938 230.657 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.313C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.114 263.336 256.027 264.187 255.937 265.063C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.194 305.376 249.072 306.3 248.947 307.251C248.82 308.241 248.693 309.23 248.562 310.25C248.296 312.27 248.03 314.289 247.762 316.309C247.632 317.289 247.502 318.27 247.369 319.281C246.914 322.633 246.405 325.972 245.875 329.312C245.103 334.199 244.501 339.078 244 344C243.34 344 242.68 344 242 344C242.023 344.548 242.046 345.096 242.07 345.66C242.251 353.585 241.168 361.178 240 369C239.34 369 238.68 369 238 369C238.012 369.629 238.023 370.258 238.035 370.906C238.093 376.377 237.884 381.596 237 387C236.67 387.33 236.34 387.66 236 388C235.626 390.501 235.295 392.99 235 395.5C234.135 402.865 234.135 402.865 233 404C230.261 404.095 227.548 404.126 224.808 404.114C223.95 404.114 223.091 404.114 222.207 404.114C219.355 404.113 216.504 404.105 213.652 404.098C211.681 404.096 209.709 404.094 207.738 404.093C202.538 404.09 197.338 404.08 192.138 404.069C186.836 404.058 181.534 404.054 176.232 404.049C165.822 404.038 155.411 404.021 145 404C144.121 400.818 144.038 398.913 144.812 395.688C146.044 390.078 146.766 384.448 147.496 378.754C148.084 374.373 148.809 370.026 149.562 365.672C149.964 363.222 150.283 360.779 150.562 358.312C151 355 151 355 152 354C152.275 352.257 152.492 350.504 152.684 348.75C152.807 347.666 152.93 346.582 153.057 345.465C153.307 343.186 153.557 340.908 153.807 338.629C154.452 332.947 155.242 327.426 156.574 321.863C157.095 319.585 157.367 317.328 157.562 315C157.894 311.106 157.894 311.106 159 310C159.286 308.163 159.515 306.317 159.719 304.469C159.846 303.349 159.974 302.228 160.105 301.074C160.236 299.895 160.366 298.715 160.5 297.5C160.756 295.177 161.017 292.854 161.281 290.531C161.452 288.978 161.452 288.978 161.627 287.393C162 285 162 285 163 284C163.286 282.248 163.515 280.486 163.719 278.723C163.846 277.652 163.974 276.582 164.105 275.479C164.236 274.351 164.366 273.224 164.5 272.063C164.757 269.845 165.017 267.627 165.281 265.41C165.452 263.927 165.452 263.927 165.627 262.414C166 260 166 260 167 258C167.441 254.308 167.815 250.617 168.162 246.916C168.654 242.073 169.533 237.665 171 233C171.33 231.68 171.66 230.36 172 229C168.04 229 164.08 229 160 229C160.142 226.166 160.289 223.333 160.437 220.5C160.477 219.709 160.516 218.917 160.557 218.102C161.325 203.675 161.325 203.675 163 202C163.275 200.257 163.492 198.504 163.684 196.75C163.807 195.666 163.93 194.582 164.057 193.465C164.307 191.186 164.557 188.908 164.807 186.629C165.453 180.944 166.25 175.428 167.583 169.864C168.266 166.813 168.394 163.764 168.559 160.652C168.972 158.17 169.629 156.173 170.528 153.834C170.802 153.116 171.076 152.397 171.359 151.657C171.676 150.837 171.676 150.837 172 150ZM384 160C383.67 160.33 383.34 160.66 383 161C380.463 161.095 377.954 161.124 375.417 161.111C374.613 161.111 373.809 161.111 372.981 161.111C370.267 161.11 367.552 161.102 364.838 161.094C362.9 161.092 360.962 161.091 359.024 161.09C354.839 161.088 350.655 161.083 346.47 161.077C339.852 161.069 333.234 161.074 326.615 161.083C324.942 161.085 324.942 161.085 323.234 161.087C320.952 161.091 318.669 161.094 316.387 161.097C300.972 161.118 285.558 161.132 270.143 161.1C259.756 161.078 249.368 161.081 238.981 161.113C233.481 161.129 227.983 161.132 222.484 161.105C217.307 161.08 212.131 161.088 206.954 161.12C205.056 161.126 203.158 161.12 201.261 161.102C189.903 160.613 189.903 160.613 179.996 165.304C178.35 167.071 178.35 167.071 177 169C176.457 169.682 175.914 170.364 175.354 171.066C173.599 173.573 173.345 175.598 172.937 178.621C172.782 179.716 172.626 180.81 172.466 181.938C172.312 183.093 172.158 184.248 172 185.438C169.976 199.734 169.976 199.734 168.25 206.5C166.924 211.739 166.672 216.616 167 222C167.66 222 168.32 222 169 222C169.33 223.65 169.66 225.3 170 227C171.32 227 172.64 227 174 227C174.33 229.97 174.66 232.94 175 236C175.66 236 176.32 236 177 236C177.381 238.326 177.713 240.661 178 243C177.67 243.33 177.34 243.66 177 244C176.855 245.44 176.773 246.886 176.719 248.332C176.681 249.213 176.644 250.094 176.605 251.002C176.571 251.929 176.536 252.857 176.5 253.813C176.431 255.632 176.358 257.451 176.281 259.27C176.236 260.485 176.236 260.485 176.189 261.726C176.006 263.922 175.563 265.875 175 268C174.959 269.395 174.958 270.792 175 272.188C175 273.446 175 274.704 175 276C174.67 276.33 174.34 276.66 174 277C173.716 279.221 173.552 281.443 173.379 283.676C173 286 173 286 171.965 288.043C170.705 290.234 170.705 290.234 171 294C171 297.761 170.723 298.899 169 302C169.33 302.99 169.66 303.98 170 305C169.633 306.809 169.633 306.809 169 309C168.605 311.017 168.231 313.038 167.875 315.062C167.687 316.105 167.499 317.148 167.305 318.223C166.795 321.082 166.795 321.082 168 324C167.187 325.812 167.187 325.812 166 328C164.635 331.413 163.996 333.8 164.062 337.5C163.991 341.484 162.947 343.574 161 347C159.926 349.961 159.926 349.961 159.5 353C159 356 159 356 158 359C158 360.093 158 361.186 158 362.312C158 366 158 366 157.5 368.812C156.915 372.539 157.018 376.067 157.16 379.828C157 382 157 382 155 384C154.881 386.701 154.86 389.305 154.937 392C155.121 399.759 155.121 399.759 154 402C163.205 402.093 172.411 402.164 181.616 402.207C185.891 402.228 190.165 402.256 194.439 402.302C198.563 402.345 202.686 402.369 206.81 402.38C208.385 402.387 209.959 402.401 211.534 402.423C213.737 402.452 215.939 402.456 218.142 402.454C219.396 402.463 220.651 402.472 221.944 402.481C225.105 402.301 225.105 402.301 226.929 399.972C227.282 399.321 227.636 398.67 228 398C227.34 397.01 226.68 396.02 226 395C226.403 392.179 227.515 389.699 228.562 387.062C230.332 381.932 230.196 377.1 230.008 371.723C230 369 230 369 231 367C230.67 366.34 230.34 365.68 230 365C230.66 364.67 231.32 364.34 232 364C232.394 361.054 232.394 361.054 232.5 357.625C232.779 351.331 232.779 351.331 235 348C235.371 345.164 235.505 342.352 235.656 339.496C236 337 236 337 238 335C238.425 332.966 238.425 332.966 238.562 330.688C238.837 327.385 239.343 324.247 240 321C240.345 318.668 240.678 316.335 241 314C241.452 310.721 241.904 307.471 242.562 304.227C243.084 301.949 243.084 301.949 243 299.375C243 297 243 297 244 294C243.34 294 242.68 294 242 294C243.75 289.125 243.75 289.125 246 288C245.095 285.284 244.075 282.652 243 280C243.99 279.67 244.98 279.34 246 279C246.195 277.397 246.381 275.792 246.562 274.188C246.719 272.848 246.719 272.848 246.879 271.48C247.157 268.866 247.157 268.866 246 266C246.051 264.063 246.051 264.063 246.312 262C246.391 261.319 246.47 260.639 246.551 259.938C247 258 247 258 249 255C249.242 252.026 249.242 252.026 249.125 248.813C249.107 247.726 249.089 246.639 249.07 245.52C249.047 244.688 249.024 243.857 249 243C249.66 243 250.32 243 251 243C251.227 241.763 251.454 240.525 251.687 239.25C252.716 234.979 254.521 233.655 258 231C258.419 228.331 258.419 228.331 258 226C259.98 226.33 261.96 226.66 264 227C264 227.33 264 227.66 264 228C266.083 228.027 268.167 228.046 270.25 228.063C271.99 228.08 271.99 228.08 273.766 228.098C276.431 228.017 278.464 227.695 281 227C281.701 227.144 282.402 227.289 283.125 227.438C288.906 228.569 294.796 229.04 300 226C301.148 235.41 301.148 235.41 301 240C302.98 238.02 302.98 238.02 305 236C305.857 239.428 306.012 241.628 305 245C305 245.99 305 246.98 305 248C304.67 248.825 304.34 249.65 304 250.5C303.054 253.811 302.925 256.041 303 259.438C303.099 264.036 302.31 267.578 301 272C300.957 273.52 300.96 275.042 301 276.563C301.126 281.847 299.945 285.582 297 290C296.833 292.5 296.833 292.5 297 295C297 300.098 296.344 304.806 294.937 309.688C293.887 312.827 293.887 312.827 294 315.5C294 318.887 292.951 321.757 292 325C291.835 326.196 291.67 327.393 291.5 328.625C291 332 291 332 289.965 334.34C288.846 337.424 288.899 339.674 289.062 342.938C289.165 347.862 288.519 350.697 286 355C285.749 357.626 285.749 357.626 286 360C286 361.658 285.994 363.315 285.965 364.973C285.795 369.117 285.795 369.117 287 373C286.34 373.33 285.68 373.66 285 374C284.222 377.82 283.756 380.268 285 384C284.526 384.804 284.051 385.609 283.562 386.438C281.197 391.183 281.197 391.183 282 402C306.42 402 330.84 402 356 402C356.33 401.34 356.66 400.68 357 400C355.625 398.458 355.625 398.458 354 397C353.34 397 352.68 397 352 397C352.351 396.051 352.701 395.103 353.062 394.125C354.464 389.353 353.721 384.845 353 380C353.99 379.67 354.98 379.34 356 379C356.037 378.397 356.075 377.793 356.113 377.172C356.212 375.973 356.212 375.973 356.312 374.75C356.37 373.961 356.429 373.172 356.488 372.359C357.09 369.583 358.281 368.229 360 366C362.111 359.56 362.357 352.6 362.754 345.883C362.962 343.448 363.322 341.336 364 339C364.855 335.769 365.038 332.82 365 329.5C364.842 314.474 364.842 314.474 367 308C367.04 305.667 367.044 303.333 367 301C367.99 300.67 368.98 300.34 370 300C372.95 292.21 373.398 283.752 373.691 275.508C374.018 271.8 374.953 268.562 376 265C375.714 263.325 375.382 261.656 375 260C375.299 257.995 375.634 255.994 376 254C375.979 252.989 375.959 251.979 375.937 250.938C376.004 247.818 376.814 245.847 378 243C377.67 242.34 377.34 241.68 377 241C377.557 239.113 377.557 239.113 378.125 237.188C379.045 233.863 379.139 233.304 377.625 230C376.821 229.01 376.821 229.01 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222C379.66 222 380.32 222 381 222C381.073 220.935 381.073 220.935 381.148 219.848C381.223 218.929 381.298 218.009 381.375 217.063C381.479 215.688 381.479 215.688 381.586 214.285C381.723 213.531 381.859 212.777 382 212C382.66 211.67 383.32 211.34 384 211C383.67 210.01 383.34 209.02 383 208C383.433 204.625 384.351 201.968 386 199C385.34 198.34 384.68 197.68 384 197C384.059 194.941 384.059 194.941 384.437 192.563C384.933 189.394 385.043 188.129 384 185C384.66 185 385.32 185 386 185C388.447 180.638 389.503 176.973 390 172C390.66 172 391.32 172 392 172C392 168.37 392 164.74 392 161C388.01 160.397 388.01 160.397 384 160ZM163 334C162.67 334.99 162.34 335.98 162 337C162.66 337 163.32 337 164 337C163.67 336.01 163.34 335.02 163 334Z" fill="#C6C6C6"/>
<path d="M390 172C391.804 174.759 392.013 175.89 391.625 179.25C391.419 180.158 391.213 181.065 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C394.469 191.011 392.901 202.006 391.003 212.96C390.409 216.41 389.884 219.847 389.477 223.324C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.154 236.576 387.026 237.645 386.895 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.978 246.593 385.85 247.659 385.719 248.758C385.548 250.23 385.548 250.23 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.938 263.062C382.847 263.821 382.756 264.58 382.662 265.361C382.438 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.072 380.07 272.625C380.315 283.257 378.766 293.843 376.504 304.211C375.657 308.9 375.189 313.639 374.697 318.377C374.103 323.897 374.103 323.897 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.702 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.644 354.751 368.644 354.751 368.438 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.336 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.594 365.046 370.189 365.07 370.801C365.234 378.301 365.266 386.601 361 393C360.796 395.22 360.796 395.22 360.938 397.562C361.098 401.805 361.098 401.805 360 404C330.63 404 301.26 404 271 404C271 401.69 271 399.38 271 397C271.66 397 272.32 397 273 397C272.988 396.432 272.977 395.863 272.965 395.277C272.908 390.393 273.18 385.815 274 381C274.66 381 275.32 381 276 381C275.981 379.711 275.961 378.422 275.941 377.094C275.942 372.178 276.368 367.378 276.938 362.5C277.068 361.286 277.068 361.286 277.201 360.047C277.871 354.129 277.871 354.129 279 353C279.286 351.236 279.515 349.463 279.719 347.688C279.846 346.612 279.974 345.537 280.105 344.43C280.301 342.732 280.301 342.732 280.5 341C280.756 338.77 281.017 336.541 281.281 334.312C281.395 333.319 281.509 332.325 281.627 331.301C282 329 282 329 283 328C283.213 326.673 283.37 325.337 283.5 324C283.583 323.196 283.665 322.391 283.75 321.562C283.833 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.572 313.257 284.644 312.515 284.719 311.75C285 310 285 310 286 309C286.298 307.152 286.539 305.294 286.754 303.434C286.886 302.309 287.018 301.184 287.154 300.025C287.289 298.841 287.424 297.657 287.562 296.438C287.77 294.656 287.77 294.656 287.982 292.838C288.325 289.892 288.664 286.946 289 284C289.66 284 290.32 284 291 284C290.959 282.845 290.918 281.69 290.875 280.5C290.867 275.782 291.36 271.175 291.938 266.5C292.068 265.422 292.068 265.422 292.201 264.322C292.873 259.127 292.873 259.127 294 258C294.213 256.673 294.37 255.337 294.5 254C294.583 253.196 294.665 252.391 294.75 251.562C294.833 250.717 294.915 249.871 295 249C295.163 247.333 295.329 245.666 295.5 244C295.572 243.257 295.644 242.515 295.719 241.75C296 240 296 240 297 239C297.232 237.485 297.412 235.962 297.562 234.438C297.688 233.198 297.688 233.198 297.816 231.934C297.877 231.296 297.938 230.657 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.312C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.071 263.762 256.071 263.762 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.194 305.377 249.072 306.301 248.947 307.253C248.82 308.242 248.693 309.231 248.562 310.25C248.298 312.258 248.032 314.266 247.766 316.273C247.571 317.742 247.571 317.742 247.373 319.241C246.661 324.506 245.841 329.754 245 335C244.01 335.33 243.02 335.66 242 336C240.521 342.945 240.521 342.945 240 350C239.34 350.619 238.68 351.238 238 351.875C235.762 353.795 235.762 353.795 235.875 356.312C235.937 357.643 235.937 357.643 236 359C235.124 362.388 234.106 365.681 233 369C233.032 370.73 233.099 372.459 233.188 374.188C233.247 379.617 232.433 384.454 231.125 389.688C230.951 390.395 230.777 391.102 230.598 391.831C230.137 393.574 229.576 395.291 229 397C228.34 397.33 227.68 397.66 227 398C226.67 397.34 226.34 396.68 226 396C225.34 395.67 224.68 395.34 224 395C224.639 393.866 225.279 392.731 225.938 391.562C229.251 384.913 229.143 378.145 228.938 370.848C229 369 229 369 230 367C229.67 366.01 229.34 365.02 229 364C229.99 364 230.98 364 232 364C231.977 363.096 231.954 362.193 231.93 361.262C231.912 360.082 231.894 358.903 231.875 357.688C231.852 356.516 231.829 355.344 231.805 354.137C232 351 232 351 234 348C234.371 345.164 234.505 342.352 234.656 339.496C235 337 235 337 237 335C237.425 332.966 237.425 332.966 237.562 330.688C237.837 327.385 238.343 324.247 239 321C239.345 318.668 239.678 316.335 240 314C240.452 310.72 240.904 307.471 241.566 304.227C242.093 301.948 242.093 301.948 241.938 299.375C242 297 242 297 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288C244.66 288 245.32 288 246 288C245.257 286.855 245.257 286.855 244.5 285.688C243 283 243 283 243 280C243.99 279.505 243.99 279.505 245 279C245.508 276.748 245.508 276.748 245.688 274.125C245.774 273.241 245.86 272.356 245.949 271.445C246.14 268.86 246.14 268.86 245 266C245.051 264.062 245.051 264.062 245.312 262C245.391 261.319 245.47 260.639 245.551 259.938C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243C249.66 243 250.32 243 251 243C250.897 242.134 250.794 241.267 250.688 240.375C251.119 235.718 252.727 234.273 256 231C256.66 231 257.32 231 258 231C258 229.35 258 227.7 258 226C260.31 226 262.62 226 265 226C265 226.33 265 226.66 265 227C266.917 227.027 268.833 227.046 270.75 227.062C271.817 227.074 272.885 227.086 273.984 227.098C276.549 227.015 278.55 226.659 281 226C281.701 226.144 282.402 226.289 283.125 226.438C289.114 227.609 295.494 227.936 301 225C301.169 226.583 301.335 228.166 301.5 229.75C301.593 230.632 301.686 231.513 301.781 232.422C302 235 302 235 302 239C302.99 236.69 303.98 234.38 305 232C305.33 232 305.66 232 306 232C306.197 233.415 306.382 234.832 306.562 236.25C306.719 237.433 306.719 237.433 306.879 238.641C307.001 241.027 306.637 242.717 306 245C306 245.99 306 246.98 306 248C305.67 248.825 305.34 249.65 305 250.5C304.054 253.811 303.925 256.041 304 259.438C304.099 264.036 303.31 267.578 302 272C301.957 273.52 301.96 275.042 302 276.562C302.126 281.847 300.945 285.582 298 290C297.833 292.5 297.833 292.5 298 295C298 300.098 297.344 304.806 295.938 309.688C294.887 312.827 294.887 312.827 295 315.5C295 318.887 293.951 321.757 293 325C292.835 326.196 292.67 327.393 292.5 328.625C292 332 292 332 290.965 334.34C289.846 337.424 289.899 339.674 290.062 342.938C290.165 347.862 289.519 350.697 287 355C286.749 357.626 286.749 357.626 287 360C287 360.99 287 361.98 287 363C287.023 363.761 287.046 364.521 287.07 365.305C287.174 370.163 286.879 373.489 285 378C285.186 378.969 285.371 379.939 285.562 380.938C286 384 286 384 284.625 386.625C282.233 391.592 282.292 396.561 282 402C283.116 401.929 284.232 401.857 285.382 401.783C300.341 400.896 315.269 400.885 330.25 400.938C332.76 400.943 335.271 400.947 337.781 400.951C343.854 400.962 349.927 400.979 356 401C355.34 400.01 354.68 399.02 354 398C353.01 398.33 352.02 398.66 351 399C351.144 398.215 351.289 397.43 351.438 396.621C352.704 389.791 352.704 389.791 353 382.875C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366C361.015 359.506 361.356 352.628 361.754 345.883C361.962 343.448 362.322 341.336 363 339C363.855 335.769 364.038 332.82 364 329.5C363.917 320.171 364.075 309.946 367 301C367.66 300.67 368.32 300.34 369 300C371.693 292.038 372.394 283.855 372.691 275.508C373.018 271.8 373.953 268.562 375 265C374.714 263.325 374.382 261.656 374 260C374.299 257.995 374.634 255.994 375 254C374.979 252.989 374.959 251.979 374.938 250.938C375.004 247.818 375.814 245.847 377 243C376.67 242.34 376.34 241.68 376 241C376.351 239.742 376.701 238.484 377.062 237.188C378.082 233.48 377.938 231.445 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222C379.66 222 380.32 222 381 222C381 218.7 381 215.4 381 212C381.99 211.67 382.98 211.34 384 211C383.34 210.67 382.68 210.34 382 210C382.33 207.36 382.66 204.72 383 202C383.99 201.67 384.98 201.34 386 201C385.499 200.643 384.997 200.286 384.48 199.918C382.255 197.035 382.927 194.856 383.312 191.312C383.432 190.133 383.552 188.954 383.676 187.738C383.783 186.835 383.89 185.931 384 185C384.66 185 385.32 185 386 185C386.289 183.783 386.577 182.566 386.875 181.312C387.678 178.082 388.663 175.057 390 172Z" fill="#BEBABD"/>
<path d="M501 128C502.32 128.33 503.64 128.66 505 129C504.34 129.99 503.68 130.98 503 132C504.32 131.67 505.64 131.34 507 131C506.515 131.657 506.031 132.315 505.531 132.992C503.324 137.328 503.533 141.544 503.473 146.293C503.305 151.572 503.305 151.572 501.613 153.945C498.552 155.946 495.93 156.177 492.375 155.5C489.274 155.041 487.022 155.111 483.938 155.438C475.978 156.276 467.851 156.781 460 155C453.63 153.918 446.23 152.801 440 155C438.532 156.851 438.532 156.851 438 159C438.33 159.66 438.66 160.32 439 161C438.949 163.312 438.949 163.312 438.688 166C438.609 166.887 438.53 167.774 438.449 168.688C438 171 438 171 436 173C435.833 176.083 435.833 176.083 436 179C436.66 179 437.32 179 438 179C438.33 178.34 438.66 177.68 439 177C439.081 178.624 439.139 180.25 439.188 181.875C439.24 183.232 439.24 183.232 439.293 184.617C439.196 185.404 439.1 186.19 439 187C438.01 187.66 437.02 188.32 436 189C436 189.99 436 190.98 436 192C434.515 192.99 434.515 192.99 433 194C433.162 194.519 433.325 195.039 433.492 195.574C435.004 202.794 434.833 211.82 433 219C432.299 219.866 431.598 220.733 430.875 221.625C429.947 222.801 429.947 222.801 429 224C429.329 226.559 429.329 226.559 430 229C429.062 231.312 429.062 231.312 428 233C428.66 233.33 429.32 233.66 430 234C429.484 235.031 428.969 236.062 428.438 237.125C426.834 240.822 427.257 243.037 428 247C427.062 250.875 427.062 250.875 426 254C426.99 254.99 427.98 255.98 429 257C429.66 256.67 430.32 256.34 431 256C431 256.99 431 257.98 431 259C432.32 259.33 433.64 259.66 435 260C435 260.66 435 261.32 435 262C435.66 262 436.32 262 437 262C437 262.99 437 263.98 437 265C438.196 264.814 439.393 264.629 440.625 264.438C442.844 264.41 442.844 264.41 445 265C446.845 267.154 448.141 269.404 449.547 271.863C450.958 274.332 450.958 274.332 454.375 275.562C455.241 275.707 456.108 275.851 457 276C457 276.66 457 277.32 457 278C459.163 278.561 461.297 279.052 463.5 279.438C466.99 280.223 469.262 280.857 471.25 283.938C472 286 472 286 472 289C473.32 288.67 474.64 288.34 476 288C476 288.66 476 289.32 476 290C476.99 289.67 477.98 289.34 479 289C479.33 289.99 479.66 290.98 480 292C481.654 292.697 483.323 293.361 485 294C485.474 294.495 485.949 294.99 486.438 295.5C488.653 297.627 491.091 298.16 494 299C494 299.66 494 300.32 494 301C495.207 301.433 495.207 301.433 496.438 301.875C499 303 499 303 500 305C501.207 305.433 501.207 305.433 502.438 305.875C505 307 505 307 506.312 309.125C506.539 309.744 506.766 310.363 507 311C510.61 310.344 510.61 310.344 514 309C514 310.32 514 311.64 514 313C514.66 313 515.32 313 516 313C516.33 313.66 516.66 314.32 517 315C519.025 315.652 519.025 315.652 521 316C521 316.99 521 317.98 521 319C522.32 319.33 523.64 319.66 525 320C525 320.66 525 321.32 525 322C521.538 325 521.538 325 519 325C515.202 326.662 513.335 327.498 511 331C507.185 332.242 505.135 332.038 501.25 330.938C498 329 498 329 496.562 326.25C495.96 322.766 495.859 319.529 496 316C494.68 315.67 493.36 315.34 492 315C492 314.34 492 313.68 492 313C494.97 313 497.94 313 501 313C501 315.97 501 318.94 501 322C506.28 321.67 511.56 321.34 517 321C516.67 320.01 516.34 319.02 516 318C514.108 317.319 514.108 317.319 512 317C511.01 316.67 510.02 316.34 509 316C509 315.34 509 314.68 509 314C507.68 313.67 506.36 313.34 505 313C505 312.34 505 311.68 505 311C502.69 310.34 500.38 309.68 498 309C498 308.34 498 307.68 498 307C497.278 306.732 496.556 306.464 495.812 306.188C493.002 305.001 490.516 303.725 488 302C488 301.34 488 300.68 488 300C487.484 299.917 486.969 299.835 486.438 299.75C482.955 298.679 480.128 296.865 477 295C477 294.34 477 293.68 477 293C475.701 292.629 475.701 292.629 474.375 292.25C470.789 290.922 468.037 289.314 465 287C465 286.34 465 285.68 465 285C463.68 284.67 462.36 284.34 461 284C461 283.34 461 282.68 461 282C459.824 281.783 459.824 281.783 458.625 281.562C456 281 456 281 454 280C454 279.34 454 278.68 454 278C453.165 277.845 453.165 277.845 452.312 277.688C449.552 276.867 447.428 275.533 445 274C444.34 273.67 443.68 273.34 443 273C443 272.34 443 271.68 443 271C441.02 270.34 439.04 269.68 437 269C437 268.34 437 267.68 437 267C435.68 266.67 434.36 266.34 433 266C433 265.34 433 264.68 433 264C432.402 263.856 431.804 263.711 431.188 263.562C429.438 263.113 427.713 262.571 426 262C425.67 261.34 425.34 260.68 425 260C422.983 258.866 422.983 258.866 421 258C420.729 251.734 421.167 245.649 421.938 239.438C422.024 238.723 422.111 238.008 422.201 237.271C422.871 232.129 422.871 232.129 424 231C424.286 229.163 424.515 227.317 424.719 225.469C424.846 224.349 424.974 223.228 425.105 222.074C425.236 220.895 425.366 219.715 425.5 218.5C425.756 216.177 426.017 213.854 426.281 211.531C426.452 209.978 426.452 209.978 426.627 208.393C427 206 427 206 428 205C428.375 202.166 428.706 199.342 429 196.5C429.865 188.135 429.865 188.135 431 187C431.299 185.078 431.539 183.148 431.754 181.215C431.886 180.045 432.018 178.875 432.154 177.67C432.289 176.438 432.424 175.207 432.562 173.938C432.701 172.702 432.84 171.466 432.982 170.193C433.325 167.129 433.665 164.065 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.938 157.188C435.891 154.359 436.083 152.751 437 150C438.105 149.985 438.105 149.985 439.233 149.969C446.164 149.871 453.095 149.768 460.026 149.661C463.59 149.605 467.153 149.552 470.717 149.503C474.81 149.446 478.903 149.381 482.996 149.316C484.924 149.291 484.924 149.291 486.891 149.266C488.072 149.246 489.254 149.226 490.47 149.205C491.516 149.19 492.562 149.174 493.64 149.158C495.956 149.263 495.956 149.263 497 148C497.4 145.145 497.752 142.303 498.062 139.438C498.153 138.631 498.244 137.825 498.338 136.994C498.562 134.997 498.782 132.998 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#530B67"/>
<path d="M172 150C200.757 149.977 229.514 149.96 258.271 149.949C261.663 149.948 265.056 149.946 268.448 149.945C269.123 149.945 269.799 149.945 270.494 149.944C281.441 149.94 292.387 149.932 303.334 149.923C314.559 149.914 325.785 149.908 337.01 149.906C343.318 149.905 349.626 149.902 355.934 149.894C361.865 149.888 367.796 149.885 373.727 149.887C375.91 149.887 378.092 149.885 380.275 149.881C383.243 149.876 386.211 149.877 389.18 149.88C390.053 149.877 390.927 149.874 391.827 149.871C397.772 149.886 397.772 149.886 400 151C400 152.98 400 154.96 400 157C399.34 157 398.68 157 398 157C398.041 158.196 398.083 159.393 398.125 160.625C398.146 167.163 397.026 173.559 396 180C395.34 180 394.68 180 394 180C394 180.66 394 181.32 394 182C393.01 182 392.02 182 391 182C390.862 174.934 391.252 168.026 392 161C390.68 161 389.36 161 388 161C388.33 160.01 388.66 159.02 389 158C385.224 156.741 381.697 156.855 377.763 156.86C376.913 156.857 376.063 156.854 375.188 156.851C372.33 156.842 369.471 156.84 366.613 156.839C364.569 156.834 362.524 156.829 360.479 156.824C354.917 156.811 349.355 156.804 343.793 156.8C340.322 156.797 336.85 156.793 333.378 156.788C322.525 156.775 311.672 156.765 300.818 156.761C288.273 156.757 275.727 156.739 263.182 156.71C253.494 156.689 243.807 156.678 234.119 156.677C228.328 156.676 222.537 156.67 216.746 156.652C211.303 156.636 205.859 156.634 200.416 156.642C198.414 156.643 196.413 156.639 194.411 156.629C191.686 156.616 188.962 156.622 186.237 156.633C185.039 156.62 185.039 156.62 183.817 156.608C179.65 156.576 179.65 156.576 176.11 158.523C175.744 159.01 175.378 159.498 175 160C174.34 160 173.68 160 173 160C172.67 161.32 172.34 162.64 172 164C171.01 163.67 170.02 163.34 169 163C168.674 159.523 169.262 157.013 170.512 153.813C170.789 153.097 171.065 152.382 171.35 151.645C171.565 151.102 171.779 150.559 172 150Z" fill="#A2A1A3"/>
<path d="M301 225C301.495 227.97 301.495 227.97 302 231C300.68 231.33 299.36 231.66 298 232C298 231.34 298 230.68 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.312C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.114 263.336 256.027 264.187 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.133 305.839 249.133 305.839 248.947 307.253C248.756 308.737 248.756 308.737 248.562 310.25C248.298 312.258 248.032 314.266 247.766 316.273C247.636 317.253 247.507 318.232 247.373 319.241C246.661 324.506 245.841 329.754 245 335C243.515 335.495 243.515 335.495 242 336C240.521 342.945 240.521 342.945 240 350C239.34 350.619 238.68 351.238 238 351.875C235.762 353.795 235.762 353.795 235.875 356.312C235.937 357.643 235.937 357.643 236 359C235.124 362.388 234.106 365.681 233 369C233.032 370.73 233.099 372.459 233.188 374.188C233.247 379.617 232.433 384.454 231.125 389.688C230.951 390.395 230.777 391.102 230.598 391.831C230.137 393.574 229.576 395.291 229 397C228.34 397.33 227.68 397.66 227 398C226.67 397.34 226.34 396.68 226 396C225.34 395.67 224.68 395.34 224 395C224.639 393.866 225.279 392.731 225.938 391.562C229.251 384.913 229.143 378.145 228.938 370.848C229 369 229 369 230 367C229.67 366.01 229.34 365.02 229 364C229.99 364 230.98 364 232 364C231.977 363.096 231.954 362.193 231.93 361.262C231.912 360.082 231.894 358.903 231.875 357.688C231.852 356.516 231.829 355.344 231.805 354.137C232 351 232 351 234 348C234.371 345.164 234.505 342.352 234.656 339.496C235 337 235 337 237 335C237.425 332.966 237.425 332.966 237.562 330.688C237.837 327.385 238.343 324.247 239 321C239.345 318.668 239.678 316.335 240 314C240.452 310.72 240.904 307.471 241.566 304.227C242.093 301.948 242.093 301.948 241.938 299.375C242 297 242 297 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288C244.66 288 245.32 288 246 288C245.505 287.237 245.01 286.474 244.5 285.688C243 283 243 283 243 280C243.99 279.505 243.99 279.505 245 279C245.508 276.748 245.508 276.748 245.688 274.125C245.774 273.241 245.86 272.356 245.949 271.445C246.14 268.86 246.14 268.86 245 266C245.051 264.062 245.051 264.062 245.312 262C245.43 260.979 245.43 260.979 245.551 259.938C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243C249.66 243 250.32 243 251 243C250.897 242.134 250.794 241.267 250.688 240.375C251.119 235.718 252.727 234.273 256 231C256.66 231 257.32 231 258 231C258 229.35 258 227.7 258 226C260.31 226 262.62 226 265 226C265 226.33 265 226.66 265 227C266.917 227.027 268.833 227.046 270.75 227.062C271.817 227.074 272.885 227.086 273.984 227.098C276.549 227.015 278.55 226.659 281 226C281.701 226.144 282.402 226.289 283.125 226.438C290.012 227.785 294.945 225 301 225Z" fill="#C9C9C9"/>
<path d="M418.747 311.886C419.708 311.887 420.668 311.887 421.658 311.887C422.693 311.892 423.727 311.897 424.793 311.902C426.385 311.904 426.385 311.904 428.009 311.907C431.402 311.912 434.795 311.925 438.187 311.938C440.486 311.943 442.785 311.947 445.084 311.951C450.723 311.962 456.361 311.979 462 312C462 312.33 462 312.66 462 313C448.8 313.33 435.6 313.66 422 314C421.34 315.65 420.68 317.3 420 319C418.68 319 417.36 319 416 319C414.244 322.888 413.323 326.759 412.465 330.914C412 333 412 333 411 336C410.781 339.281 410.821 341.558 412.062 344.625C413.243 348.874 412.758 352.279 412.285 356.629C411.883 361.386 412.025 366.103 412.16 370.871C412 374 412 374 411.035 376.328C409.512 380.259 409.533 384.131 409.375 388.313C409.336 389.148 409.298 389.984 409.258 390.846C409.164 392.897 409.081 394.948 409 397C412.343 397.074 414.804 397.065 418 396C418.495 396.99 418.495 396.99 419 398C423.144 398.025 427.288 398.043 431.433 398.055C432.84 398.06 434.247 398.067 435.655 398.075C437.688 398.088 439.721 398.093 441.754 398.098C442.974 398.103 444.194 398.108 445.451 398.114C449.055 398.066 449.055 398.066 452.801 397.435C456.118 396.984 457.286 397.154 460 399C460 400.32 460 401.64 460 403C460.66 403 461.32 403 462 403C461.795 403.906 461.59 404.812 461.379 405.746C459.885 412.501 458.594 419.107 458 426C456.68 426 455.36 426 454 426C453.721 417.902 454.808 411.342 456 403C438.84 403 421.68 403 404 403C404 402.34 404 401.68 404 401C403.01 401 402.02 401 401 401C401 400.01 401 399.02 401 398C400.34 398 399.68 398 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.066 389.324 398.256 388.711 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.063C400.211 375.188 400.298 374.313 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.981 365.854 402.961 364.708 402.941 363.527C402.942 359.149 403.368 354.899 403.937 350.563C404.068 349.485 404.068 349.485 404.201 348.385C404.871 343.129 404.871 343.129 406 342C406.274 340.368 406.491 338.726 406.684 337.082C406.807 336.075 406.93 335.067 407.057 334.029C407.308 331.904 407.558 329.779 407.807 327.654C409.11 317.03 409.11 317.03 411 313C413.904 312.032 415.728 311.879 418.747 311.886Z" fill="#56066E"/>
<path d="M204 452C213.9 452 223.8 452 234 452C234 454.97 234 457.94 234 461C229.229 462.234 224.575 462.113 219.687 462.062C218.434 462.056 218.434 462.056 217.154 462.049C215.103 462.037 213.051 462.019 211 462C210.67 462.99 210.34 463.98 210 465C210.62 464.99 211.241 464.979 211.88 464.968C214.691 464.927 217.502 464.901 220.312 464.875C221.289 464.858 222.265 464.841 223.271 464.824C224.209 464.818 225.147 464.811 226.113 464.805C226.977 464.794 227.841 464.784 228.732 464.773C231 465 231 465 234 467C234.221 469.951 234.281 472.684 234.187 475.625C234.167 476.828 234.167 476.828 234.146 478.055C234.111 480.037 234.057 482.018 234 484C232.02 484.495 232.02 484.495 230 485C230 485.66 230 486.32 230 487C225.563 487.087 221.125 487.14 216.687 487.188C214.794 487.225 214.794 487.225 212.861 487.264C211.049 487.278 211.049 487.278 209.199 487.293C207.526 487.317 207.526 487.317 205.819 487.341C203 487 203 487 201.05 485.919C200 484 200 484 201 477C209.25 477 217.5 477 226 477C226 476.01 226 475.02 226 474C225.38 474.005 224.759 474.01 224.12 474.016C221.309 474.037 218.498 474.05 215.687 474.062C214.711 474.071 213.735 474.079 212.728 474.088C211.791 474.091 210.853 474.094 209.887 474.098C209.023 474.103 208.159 474.108 207.268 474.114C205 474 205 474 202 473C200.794 469.381 200.892 466.075 200.937 462.312C200.942 461.611 200.946 460.909 200.951 460.186C200.963 458.457 200.981 456.728 201 455C201.99 454.67 202.98 454.34 204 454C204 453.34 204 452.68 204 452Z" fill="#880790"/>
<path d="M468.125 450.813C469.446 450.794 469.446 450.794 470.793 450.775C479.169 450.756 479.169 450.756 483 453C485.429 456.644 485.329 458.599 485.375 462.938C485.403 464.163 485.432 465.389 485.461 466.652C484.93 470.509 484.002 471.632 481 474C481.66 475.114 482.32 476.228 483 477.375C485 480.75 485 480.75 485 483C485.66 483 486.32 483 487 483C486.67 484.32 486.34 485.64 486 487C482.7 487 479.4 487 476 487C476 486.01 476 485.02 476 484C475.34 484 474.68 484 474 484C472.539 481.353 472 480.106 472 477C471.34 477 470.68 477 470 477C470 476.01 470 475.02 470 474C467.03 474 464.06 474 461 474C461 477.63 461 481.26 461 485C460.34 485 459.68 485 459 485C459 485.66 459 486.32 459 487C456.36 487 453.72 487 451 487C451 479.74 451 472.48 451 465C459.25 465 467.5 465 476 465C476 464.01 476 463.02 476 462C475.314 462.005 474.627 462.01 473.92 462.016C470.822 462.037 467.724 462.05 464.625 462.063C463.545 462.071 462.465 462.079 461.352 462.088C459.805 462.093 459.805 462.093 458.227 462.098C457.273 462.103 456.32 462.108 455.338 462.114C453 462 453 462 451 461C451 458.03 451 455.06 451 452C456.736 451.023 462.312 450.817 468.125 450.813Z" fill="#B7B6B7"/>
<path d="M376.418 451.707C377.672 451.717 378.925 451.726 380.217 451.736C381.527 451.761 382.837 451.787 384.188 451.812C385.523 451.828 386.858 451.841 388.193 451.854C391.463 451.889 394.731 451.938 398 452C398 452.66 398 453.32 398 454C399.485 454.495 399.485 454.495 401 455C401.116 459.583 401.187 464.166 401.25 468.75C401.3 470.703 401.3 470.703 401.352 472.695C401.364 473.946 401.377 475.196 401.391 476.484C401.412 477.636 401.433 478.789 401.454 479.976C401 483 401 483 399.355 485.383C396.339 487.454 394.561 487.462 390.922 487.391C389.762 487.378 388.602 487.365 387.406 487.352C386.2 487.318 384.993 487.285 383.75 487.25C382.528 487.232 381.306 487.214 380.047 487.195C377.03 487.148 374.016 487.082 371 487C371 486.34 371 485.68 371 485C369.68 484.34 368.36 483.68 367 483C366.926 479.067 366.871 475.135 366.835 471.202C366.813 469.207 366.775 467.212 366.736 465.217C366.727 463.963 366.717 462.71 366.707 461.418C366.691 460.261 366.676 459.103 366.659 457.911C367 455 367 455 368.117 453.117C370.912 451.459 373.188 451.663 376.418 451.707ZM376 461C376 466.28 376 471.56 376 477C381.28 477 386.56 477 392 477C392 472.05 392 467.1 392 462C386.72 461.67 381.44 461.34 376 461Z" fill="#BBBBBC"/>
<path d="M508 128C519.57 127.977 531.139 127.959 542.709 127.948C548.081 127.943 553.452 127.936 558.824 127.925C564.005 127.914 569.185 127.908 574.366 127.905C576.346 127.903 578.326 127.9 580.306 127.894C583.072 127.887 585.837 127.886 588.603 127.886C589.428 127.883 590.253 127.879 591.103 127.876C596.772 127.886 596.772 127.886 599 129C599.043 130.666 599.041 132.334 599 134C598.67 134.33 598.34 134.66 598 135C597.34 139.95 596.68 144.9 596 150C609.2 150 622.4 150 636 150C636 150.33 636 150.66 636 151C637.98 151.33 639.96 151.66 642 152C642.33 153.32 642.66 154.64 643 156C642.443 155.814 641.886 155.629 641.312 155.438C638.999 154.85 638.999 154.85 636.689 155.462C632.002 156.4 627.266 156.185 622.5 156.188C621.467 156.2 620.435 156.212 619.371 156.225C617.873 156.228 617.873 156.228 616.344 156.23C615.438 156.235 614.533 156.239 613.6 156.243C610.738 155.976 608.631 155.124 606 154C603.672 153.632 601.338 153.298 599 153C597.661 152.691 596.323 152.371 595 152C594.505 153.485 594.505 153.485 594 155C591.569 152.883 590.155 151.465 589.125 148.375C589.084 147.591 589.043 146.808 589 146C589.66 145.34 590.32 144.68 591 144C591.465 140.878 591.465 140.878 591.625 137.375C591.7 136.186 591.775 134.998 591.852 133.773C591.925 132.401 591.925 132.401 592 131C590.68 130.67 589.36 130.34 588 130C588 130.66 588 131.32 588 132C588.66 132 589.32 132 590 132C590 135.63 590 139.26 590 143C589.67 143 589.34 143 589 143C588.783 141.36 588.783 141.36 588.562 139.688C588.117 136.069 588.117 136.069 587 133C585.648 133.007 585.648 133.007 584.269 133.013C575.765 133.054 567.261 133.084 558.757 133.104C554.385 133.114 550.013 133.128 545.642 133.151C541.421 133.173 537.2 133.185 532.979 133.19C531.37 133.193 529.762 133.201 528.154 133.211C525.896 133.226 523.64 133.228 521.382 133.227C520.099 133.231 518.815 133.236 517.493 133.241C513.999 133 511.252 132.263 508 131C508 130.01 508 129.02 508 128Z" fill="#440C53"/>
<path d="M169 262C170.125 265.75 170.125 265.75 169 268C169.173 269.018 169.346 270.037 169.524 271.086C170.074 275.606 169.515 279.205 168.625 283.625C168.486 284.362 168.347 285.1 168.203 285.859C167.648 288.782 167.072 291.689 166.399 294.586C165.913 297.107 165.913 297.107 166.016 300.133C165.996 305.115 165.398 309.94 164.75 314.875C164.617 315.897 164.485 316.92 164.348 317.973C163.445 324.585 162.171 330.961 160.484 337.411C158.642 344.771 157.878 352.265 157.127 359.804C156.545 365.214 155.722 369.194 153 374C152.833 377.417 152.833 377.417 153 381C152.746 383.682 152.375 386.331 152 389C151.34 389 150.68 389 150 389C150.33 389.99 150.66 390.98 151 392C151.068 393.728 151.085 395.458 151.063 397.188C151.054 398.089 151.045 398.99 151.035 399.918C151.024 400.605 151.012 401.292 151 402C151.66 402 152.32 402 153 402C153 402.66 153 403.32 153 404C150.36 404 147.72 404 145 404C144.005 400.872 144.05 398.863 144.813 395.688C146.044 390.078 146.766 384.448 147.496 378.754C148.084 374.373 148.809 370.026 149.563 365.672C149.964 363.222 150.283 360.779 150.563 358.312C151 355 151 355 152 354C152.275 352.257 152.492 350.504 152.684 348.75C152.807 347.666 152.93 346.582 153.057 345.465C153.307 343.186 153.557 340.908 153.807 338.629C154.453 332.947 155.242 327.426 156.574 321.863C157.095 319.585 157.367 317.328 157.563 315C157.894 311.106 157.894 311.106 159 310C159.286 308.163 159.515 306.317 159.719 304.469C159.846 303.349 159.974 302.228 160.106 301.074C160.236 299.895 160.366 298.715 160.5 297.5C160.757 295.177 161.017 292.854 161.281 290.531C161.452 288.978 161.452 288.978 161.627 287.393C162 285 162 285 163 284C163.376 281.374 163.707 278.76 164 276.125C164.87 268.39 164.87 268.39 166 265C166.66 265 167.32 265 168 265C168.33 264.01 168.66 263.02 169 262Z" fill="#C1BCC0"/>
<path d="M651 159C655.134 165.2 653.879 171.514 652.625 178.438C652.345 180.061 652.066 181.685 651.789 183.309C651.653 184.09 651.516 184.871 651.376 185.675C651.007 187.958 650.722 190.238 650.461 192.535C650 196 650 196 649 197C648.714 198.837 648.485 200.683 648.281 202.531C648.154 203.651 648.026 204.772 647.895 205.926C647.764 207.105 647.634 208.285 647.5 209.5C647.244 211.823 646.983 214.146 646.719 216.469C646.605 217.505 646.491 218.54 646.373 219.607C646 222 646 222 645 223C644.34 226.3 643.68 229.6 643 233C613.96 233 584.92 233 555 233C555 232.34 555 231.68 555 231C554.34 231 553.68 231 553 231C553.33 228.69 553.66 226.38 554 224C547.73 224 541.46 224 535 224C535 224.66 535 225.32 535 226C535.557 226.083 536.114 226.165 536.688 226.25C539.697 227.226 541.622 228.952 544 231C543.505 231.99 543.505 231.99 543 233C541.68 232.34 540.36 231.68 539 231C539 230.34 539 229.68 539 229C536.03 229.495 536.03 229.495 533 230C533 229.01 533 228.02 533 227C532.01 227 531.02 227 530 227C530.33 225.68 530.66 224.36 531 223C532.237 222.856 533.475 222.711 534.75 222.562C537.052 222.281 539.187 221.952 541.438 221.375C541.953 221.251 542.469 221.127 543 221C543.33 221.33 543.66 221.66 544 222C545.515 222.232 547.038 222.412 548.562 222.562C549.389 222.646 550.215 222.73 551.066 222.816C552.024 222.907 552.024 222.907 553 223C553 222.34 553 221.68 553 221C553.722 221.309 554.444 221.619 555.188 221.938C558.446 223.168 561.506 224 565 224C565.33 224.99 565.66 225.98 566 227C570.95 226.505 570.95 226.505 576 226C575.505 227.98 575.505 227.98 575 230C578.63 230.33 582.26 230.66 586 231C586.495 229.515 586.495 229.515 587 228C589.97 228 592.94 228 596 228C596 228.99 596 229.98 596 231C596.99 230.67 597.98 230.34 599 230C601.685 229.903 604.343 229.86 607.027 229.867C607.813 229.866 608.598 229.865 609.407 229.864C611.067 229.864 612.727 229.865 614.387 229.87C616.924 229.875 619.461 229.87 621.998 229.863C623.612 229.864 625.226 229.865 626.84 229.867C627.597 229.865 628.355 229.863 629.135 229.861C632.559 229.876 635.727 229.92 639 231C639.495 229.515 639.495 229.515 640 228C639.34 227.34 638.68 226.68 638 226C638.752 225.188 638.752 225.188 639.52 224.359C641.42 221.331 641.146 219.752 640.688 216.25C640.568 215.265 640.448 214.28 640.324 213.266C640.164 212.144 640.164 212.144 640 211C640.66 210.67 641.32 210.34 642 210C644.208 206.075 644.106 202.642 644.012 198.281C643.987 193.531 644.356 189.967 647 186C647.457 183.925 647.457 183.925 647.625 181.688C647.7 180.897 647.775 180.107 647.852 179.293C647.976 177.365 648 175.432 648 173.5C648 171 648 171 649 170C649.395 168.154 649.742 166.298 650.062 164.438C650.239 163.426 650.416 162.414 650.598 161.371C650.73 160.589 650.863 159.806 651 159Z" fill="#530E64"/>
<path d="M535 465C546.55 465 558.1 465 570 465C570 467.64 570 470.28 570 473C567.443 474.279 565.633 474.113 562.773 474.098C561.742 474.094 560.711 474.091 559.648 474.088C558.028 474.075 558.028 474.075 556.375 474.062C554.743 474.056 554.743 474.056 553.078 474.049C550.385 474.037 547.693 474.021 545 474C545 474.99 545 475.98 545 477C553.25 477 561.5 477 570 477C570 479.64 570 482.28 570 485C569.34 485 568.68 485 568 485C568 485.66 568 486.32 568 487C557.11 487 546.22 487 535 487C535 479.74 535 472.48 535 465Z" fill="#B9BAB9"/>
<path d="M390 178C390.33 179.32 390.66 180.64 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C394.469 191.011 392.901 202.006 391.003 212.96C390.409 216.41 389.884 219.847 389.476 223.324C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.09 237.111 387.09 237.111 386.894 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.914 247.126 385.914 247.126 385.719 248.758C385.605 249.739 385.491 250.72 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.937 263.062C382.847 263.821 382.756 264.58 382.662 265.361C382.437 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.072 380.07 272.625C380.316 283.307 378.757 293.981 376.508 304.406C375.433 309.897 374.751 315.457 374 321C373.34 320.67 372.68 320.34 372 320C371.608 318.346 371.279 316.677 371 315C370.67 314.01 370.34 313.02 370 312C369.508 306.402 370.222 301.211 371.426 295.754C372.308 291.524 372.905 287.255 373.535 282.98C373.953 280.299 374.463 277.66 375 275C375.609 271.502 376.215 268.003 376.807 264.502C377.439 260.847 378.161 257.262 379.098 253.672C380.137 250.074 380.137 250.074 380 246.562C380 243.677 380.204 241.787 380.875 239.062C381.908 234.824 382.449 230.579 382.937 226.25C383.493 221.379 384.237 216.749 385.5 212C387.384 204.483 387.81 196.844 388.353 189.137C388.425 188.13 388.497 187.123 388.57 186.086C388.63 185.179 388.689 184.272 388.75 183.337C389 181 389 181 390 178Z" fill="#C4C3C5"/>
<path d="M390 172C391.125 173.688 391.125 173.688 392 176C391.342 177.67 390.675 179.337 390 181C389.615 183.517 389.615 183.517 389.508 186.141C389.445 187.12 389.381 188.1 389.316 189.109C389.222 190.664 389.222 190.664 389.125 192.25C388.547 200.401 387.547 208.062 385.468 215.958C383.502 223.549 382.787 231.215 382 239C381.829 240.407 381.655 241.813 381.477 243.219C381.131 245.959 380.825 248.689 380.562 251.438C380.144 255.258 379.417 258.929 378.539 262.668C377.594 266.758 376.811 270.882 376 275C375.823 275.83 375.647 276.66 375.465 277.516C375.026 279.861 374.796 282.123 374.625 284.5C374.253 288.609 373.45 292.439 372.438 296.438C370.98 302.394 370.67 307.894 371 314C371.33 314 371.66 314 372 314C372.66 316.97 373.32 319.94 374 323C372.35 323 370.7 323 369 323C367.687 329.589 366.717 336.08 366.246 342.785C366 345 366 345 365 347C365.093 348.176 365.093 348.176 365.188 349.375C364.939 352.849 363.489 353.702 361 356C361.142 353.916 361.288 351.833 361.438 349.75C361.519 348.59 361.6 347.43 361.684 346.234C361.934 343.68 362.284 341.449 363 339C363.855 335.769 364.038 332.82 364 329.5C363.917 320.171 364.075 309.946 367 301C367.66 300.67 368.32 300.34 369 300C371.693 292.038 372.394 283.855 372.691 275.508C373.018 271.8 373.953 268.562 375 265C374.714 263.325 374.382 261.656 374 260C374.299 257.995 374.634 255.994 375 254C374.979 252.989 374.959 251.979 374.938 250.938C375.004 247.818 375.814 245.847 377 243C376.67 242.34 376.34 241.68 376 241C376.351 239.742 376.701 238.484 377.062 237.188C378.082 233.48 377.938 231.445 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222C379.66 222 380.32 222 381 222C381 218.7 381 215.4 381 212C382.485 211.505 382.485 211.505 384 211C383.34 210.67 382.68 210.34 382 210C382.33 207.36 382.66 204.72 383 202C383.99 201.67 384.98 201.34 386 201C385.499 200.643 384.997 200.286 384.48 199.918C382.255 197.035 382.927 194.856 383.312 191.312C383.432 190.133 383.552 188.954 383.676 187.738C383.783 186.835 383.89 185.931 384 185C384.66 185 385.32 185 386 185C386.433 183.175 386.433 183.175 386.875 181.312C387.678 178.082 388.663 175.057 390 172Z" fill="#DDDDDB"/>
<path d="M284 452C295.22 452 306.44 452 318 452C318 454.64 318 457.28 318 460C317.67 460.33 317.34 460.66 317 461C313.37 461 309.74 461 306 461C306 468.92 306 476.84 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C301.36 487 298.72 487 296 487C295.67 478.75 295.34 470.5 295 462C291.37 461.67 287.74 461.34 284 461C284 458.03 284 455.06 284 452Z" fill="#8A0894"/>
<path d="M404 353C404.66 353 405.32 353 406 353C406.054 355.208 406.093 357.417 406.125 359.625C406.148 360.855 406.171 362.085 406.195 363.352C406 367.001 405.19 369.571 404 373C403.502 375.779 403.184 378.57 402.875 381.375C402.789 382.111 402.702 382.847 402.613 383.605C402.403 385.403 402.201 387.201 402 389C402.639 389.309 403.279 389.619 403.937 389.938C406 391 406 391 407 392C407.041 394.333 407.042 396.667 407 399C408.429 398.955 408.429 398.955 409.886 398.908C413.459 398.795 417.032 398.684 420.605 398.573C422.144 398.525 423.683 398.476 425.222 398.427C439.68 397.967 439.68 397.967 445.328 398.008C449.04 398.098 449.04 398.098 452.812 397.375C456.099 396.988 457.313 397.173 460 399C460 400.32 460 401.64 460 403C460.66 403 461.32 403 462 403C461.795 403.906 461.59 404.812 461.379 405.746C459.885 412.501 458.594 419.107 458 426C456.68 426 455.36 426 454 426C453.721 417.902 454.808 411.342 456 403C438.84 403 421.68 403 404 403C404 402.34 404 401.68 404 401C403.01 401 402.02 401 401 401C401 400.01 401 399.02 401 398C400.34 398 399.68 398 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.066 389.324 398.256 388.711 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.062C400.211 375.188 400.298 374.313 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.969 365.206 402.969 365.206 402.937 363.375C402.931 359.82 403.301 356.494 404 353Z" fill="#5E0978"/>
<path d="M186.457 155.506C187.307 155.501 188.156 155.496 189.031 155.491C191.877 155.48 194.721 155.497 197.566 155.514C199.606 155.512 201.647 155.508 203.687 155.503C209.228 155.493 214.769 155.508 220.311 155.529C226.108 155.546 231.906 155.543 237.703 155.542C247.44 155.544 257.178 155.561 266.915 155.588C278.173 155.62 289.431 155.63 300.689 155.629C311.516 155.628 322.344 155.638 333.172 155.654C337.78 155.662 342.389 155.665 346.998 155.666C352.426 155.668 357.853 155.681 363.281 155.701C365.274 155.706 367.266 155.709 369.258 155.708C371.977 155.707 374.696 155.718 377.416 155.733C378.204 155.729 378.992 155.726 379.805 155.723C384.246 155.762 387.871 156.352 392 158C387.833 159.163 383.806 159.136 379.509 159.12C378.644 159.121 377.779 159.122 376.887 159.123C373.984 159.124 371.08 159.119 368.177 159.114C366.097 159.113 364.018 159.113 361.939 159.114C356.288 159.114 350.638 159.108 344.987 159.101C339.084 159.095 333.181 159.095 327.278 159.093C316.098 159.09 304.917 159.082 293.736 159.072C281.008 159.061 268.281 159.055 255.553 159.05C229.369 159.04 203.184 159.022 177 159C174.55 163.706 173.173 168.33 172.625 173.625C171.91 177.483 170.752 179.248 168 182C167.34 182 166.68 182 166 182C166.867 175.644 167.93 169.324 169 163C169.99 163 170.98 163 172 163C172.33 162.01 172.66 161.02 173 160C177.074 155.68 180.806 155.432 186.457 155.506Z" fill="#B9B8B9"/>
<path d="M627 285C627.66 285 628.32 285 629 285C629.33 285.66 629.66 286.32 630 287C630.99 287.33 631.98 287.66 633 288C633.101 294.754 633.133 301.328 632 308C631.67 308.33 631.34 308.66 631 309C630.713 310.91 630.485 312.829 630.281 314.75C630.09 316.498 630.09 316.498 629.894 318.281C629.764 319.508 629.634 320.736 629.5 322C629.243 324.417 628.983 326.834 628.719 329.25C628.605 330.328 628.491 331.405 628.373 332.516C628 335 628 335 627 336C626.726 337.562 626.509 339.133 626.316 340.707C626.194 341.681 626.072 342.654 625.947 343.658C625.82 344.699 625.693 345.74 625.562 346.812C624.65 354.085 623.677 361.319 622.406 368.539C621.778 372.345 621.384 376.162 621 380C620.34 380 619.68 380 619 380C618.67 380.99 618.34 381.98 618 383C617.67 383 617.34 383 617 383C616.72 373.092 616.518 364.052 619.398 354.469C620.249 350.977 619.864 348.455 619 345C620.485 344.505 620.485 344.505 622 344C622.606 340.895 623.004 338.107 622.875 334.938C623.06 329.108 624.576 323.638 626 318C625.01 318.495 625.01 318.495 624 319C622.875 311.25 622.875 311.25 624 309C624.381 301.294 623.967 293.647 623 286C624.32 286.33 625.64 286.66 627 287C627 286.34 627 285.68 627 285Z" fill="#530D65"/>
<path d="M372 322C372.66 322.66 373.32 323.32 374 324C373.67 324.33 373.34 324.66 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.702 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.711 354.159 368.576 355.343 368.438 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.336 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.606 365.046 370.212 365.07 370.836C365.206 377.149 364.462 382.864 363 389C362.34 388.67 361.68 388.34 361 388C360.67 388.99 360.34 389.98 360 391C359.34 391 358.68 391 358 391C358 392.32 358 393.64 358 395C357.34 395 356.68 395 356 395C355.67 395.99 355.34 396.98 355 398C352.938 398.688 352.938 398.688 351 399C351.144 398.215 351.289 397.43 351.438 396.621C352.704 389.791 352.704 389.791 353 382.875C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366C359.569 363.969 359.569 363.969 359.938 361.688C360.532 358.709 361.03 356.951 362.625 354.312C364.38 351.362 364.141 349.389 364 346C364.301 344.327 364.642 342.661 365 341C365.237 339.791 365.474 338.582 365.719 337.336C365.979 336.016 366.24 334.695 366.5 333.375C366.63 332.707 366.76 332.04 366.895 331.352C367.461 328.493 368.077 325.769 369 323C369.99 322.67 370.98 322.34 372 322Z" fill="#C5C4C5"/>
<path d="M305 232C305.33 232 305.66 232 306 232C306.197 233.415 306.382 234.832 306.563 236.25C306.667 237.039 306.771 237.828 306.879 238.641C307.001 241.027 306.637 242.717 306 245C306 245.99 306 246.98 306 248C305.67 248.825 305.34 249.65 305 250.5C304.054 253.811 303.926 256.041 304 259.438C304.099 264.036 303.31 267.578 302 272C301.957 273.52 301.96 275.042 302 276.562C302.126 281.847 300.945 285.582 298 290C297.833 292.5 297.833 292.5 298 295C298 300.098 297.344 304.806 295.938 309.688C294.887 312.827 294.887 312.827 295 315.5C295 318.887 293.951 321.757 293 325C292.835 326.196 292.67 327.393 292.5 328.625C292 332 292 332 290.965 334.34C289.846 337.424 289.899 339.674 290.063 342.938C290.165 347.862 289.519 350.697 287 355C286.749 357.626 286.749 357.626 287 360C287 360.99 287 361.98 287 363C287.023 363.761 287.046 364.521 287.07 365.305C287.174 370.163 286.88 373.489 285 378C285.186 378.969 285.371 379.939 285.563 380.938C286 384 286 384 284.625 386.625C282.24 391.578 282.255 396.566 282 402C281.01 402 280.02 402 279 402C278.645 394.328 279.149 387.274 280.715 379.754C282.777 369.605 283.799 359.279 285 349C285.66 349 286.32 349 287 349C287.026 347.693 287.052 346.386 287.078 345.039C287.386 334.284 288.508 324.346 291.086 313.906C292.053 309.962 292.498 306.079 292.789 302.031C293.114 298.907 294.095 295.999 295 293C295.144 291.866 295.289 290.731 295.438 289.562C295.898 286.648 296.442 284.77 297.563 282.125C298.742 279.15 298.994 277.625 298.938 274.293C298.828 267.598 300.04 261.034 301.081 254.442C301.439 252.176 301.788 249.91 302.135 247.643C302.359 246.193 302.583 244.743 302.809 243.293C302.913 242.62 303.017 241.947 303.124 241.254C303.62 238.128 304.159 235.053 305 232Z" fill="#DADAD9"/>
<path d="M172 150C209.29 150 246.58 150 285 150C283 153 283 153 281.155 153.675C278.919 154.012 276.779 154.16 274.518 154.205C273.628 154.225 272.737 154.245 271.819 154.266C270.851 154.282 269.884 154.299 268.887 154.316C267.865 154.337 266.843 154.358 265.79 154.379C262.422 154.445 259.055 154.504 255.688 154.562C253.356 154.608 251.024 154.653 248.693 154.698C236.908 154.913 225.13 155.03 213.344 154.957C212.267 154.951 211.191 154.946 210.082 154.94C204.951 154.911 199.822 154.863 194.692 154.787C192.84 154.772 190.989 154.757 189.137 154.742C188.31 154.724 187.483 154.705 186.631 154.686C182.698 154.668 179.717 154.926 176.116 156.579C173 158 173 158 170 157C170.66 154.69 171.32 152.38 172 150Z" fill="#9C959D"/>
<path d="M544 232C548.827 233.413 552.716 235.43 557 238C557 238.66 557 239.32 557 240C558.98 240.66 560.96 241.32 563 242C563 242.66 563 243.32 563 244C564.32 244.33 565.64 244.66 567 245C567 245.66 567 246.32 567 247C567.598 247.144 568.196 247.289 568.813 247.438C570.562 247.887 572.287 248.429 574 249C574.33 249.66 574.66 250.32 575 251C576.364 251.845 577.767 252.628 579.188 253.375C582.952 255.414 586.562 257.443 590 260C590 260.66 590 261.32 590 262C590.516 262.083 591.031 262.165 591.563 262.25C595.045 263.321 597.872 265.135 601 267C601 267.66 601 268.32 601 269C601.701 269.083 602.403 269.165 603.125 269.25C606.69 270.18 609.09 271.767 612 274C612 274.66 612 275.32 612 276C613.98 276.66 615.96 277.32 618 278C618 278.66 618 279.32 618 280C618.598 280.144 619.196 280.289 619.813 280.438C621.562 280.887 623.287 281.429 625 282C625 282.66 625 283.32 625 284C624.34 284 623.68 284 623 284C622.505 284.99 622.505 284.99 622 286C620.021 286.727 618.02 287.398 616 288C615.938 287.072 615.876 286.144 615.813 285.188C615.332 281.806 615.332 281.806 612.438 280.312C611.633 279.879 610.829 279.446 610 279C610 278.01 610 277.02 610 276C608.793 275.907 608.793 275.907 607.563 275.812C602.91 274.751 598.865 272.815 595 270C594.67 269.01 594.34 268.02 594 267C590.488 265.77 590.488 265.77 587 265C587 264.34 587 263.68 587 263C586.01 262.67 585.02 262.34 584 262C584 261.34 584 260.68 584 260C582.948 259.938 581.896 259.876 580.813 259.812C576.371 258.866 574.884 257.408 572 254C571.01 254.33 570.02 254.66 569 255C569 254.01 569 253.02 569 252C567.108 251.319 567.108 251.319 565 251C564.34 251.66 563.68 252.32 563 253C563 252.01 563 251.02 563 250C562.34 250 561.68 250 561 250C561 249.34 561 248.68 561 248C560.01 247.67 559.02 247.34 558 247C556.813 244.438 556.813 244.438 556 242C555.34 242.66 554.68 243.32 554 244C551.906 243.828 551.906 243.828 549.5 243.25C548.706 243.07 547.912 242.889 547.094 242.703C545 242 545 242 543 240C542.667 234.667 542.667 234.667 544 232Z" fill="#450656"/>
<path d="M176 236C178.366 238.366 178.582 239.743 179 243C178.67 243.33 178.34 243.66 178 244C177.855 245.44 177.773 246.886 177.719 248.332C177.681 249.213 177.644 250.094 177.605 251.002C177.571 251.929 177.536 252.857 177.5 253.812C177.431 255.632 177.358 257.451 177.281 259.27C177.236 260.485 177.236 260.485 177.189 261.726C177.006 263.922 176.563 265.875 176 268C175.959 269.395 175.958 270.792 176 272.188C176 273.446 176 274.704 176 276C175.67 276.33 175.34 276.66 175 277C174.716 279.221 174.552 281.443 174.379 283.676C174 286 174 286 172.965 288.043C171.705 290.234 171.705 290.234 172 294C172 297.761 171.722 298.899 170 302C170.33 302.99 170.66 303.98 171 305C170.633 306.809 170.633 306.809 170 309C169.605 311.017 169.231 313.038 168.875 315.062C168.687 316.105 168.499 317.148 168.305 318.223C167.795 321.082 167.795 321.082 169 324C168.187 325.812 168.187 325.812 167 328C165.635 331.413 164.996 333.8 165.062 337.5C164.991 341.484 163.947 343.574 162 347C160.926 349.961 160.926 349.961 160.5 353C160 356 160 356 159 359C159.021 360.052 159.041 361.104 159.062 362.188C158.992 366.489 158.159 369.872 157 374C156.67 374 156.34 374 156 374C155.394 359.029 157.673 344.625 161.18 330.126C162.538 324.4 163.517 318.796 164.062 312.938C164.691 306.196 165.681 299.592 166.937 292.938C167.095 292.081 167.253 291.224 167.416 290.342C168.372 285.424 169.685 280.799 171.329 276.07C174.177 267.285 174.206 257.804 173.973 248.668C174 246 174 246 175 245C175.232 243.485 175.412 241.962 175.562 240.438C175.646 239.611 175.73 238.785 175.816 237.934C175.907 236.976 175.907 236.976 176 236ZM163 334C162.67 334.99 162.34 335.98 162 337C162.66 337 163.32 337 164 337C163.67 336.01 163.34 335.02 163 334Z" fill="#DADAD9"/>
<path d="M501 128C502.32 128.33 503.64 128.66 505 129C504.34 129.99 503.68 130.98 503 132C504.32 131.67 505.64 131.34 507 131C506.515 131.657 506.031 132.315 505.531 132.992C503.324 137.328 503.533 141.544 503.473 146.293C503.305 151.572 503.305 151.572 501.613 153.945C498.552 155.946 495.93 156.177 492.375 155.5C489.274 155.041 487.022 155.111 483.938 155.438C475.978 156.276 467.851 156.781 460 155C453.63 153.918 446.23 152.801 440 155C438.532 156.851 438.532 156.851 438 159C438.33 159.66 438.66 160.32 439 161C437.625 162.5 437.625 162.5 436 164C435.34 164 434.68 164 434 164C434 163.01 434 162.02 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.938 157.188C435.891 154.359 436.083 152.751 437 150C438.105 149.985 438.105 149.985 439.233 149.969C446.164 149.871 453.095 149.768 460.026 149.661C463.59 149.605 467.153 149.552 470.717 149.503C474.81 149.446 478.903 149.381 482.996 149.316C484.924 149.291 484.924 149.291 486.891 149.266C488.072 149.246 489.254 149.226 490.47 149.205C491.516 149.19 492.562 149.174 493.64 149.158C495.956 149.263 495.956 149.263 497 148C497.4 145.145 497.752 142.303 498.062 139.438C498.153 138.631 498.244 137.825 498.338 136.994C498.562 134.997 498.782 132.998 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#4E0360"/>
<path d="M192.555 159.399C193.378 159.394 194.202 159.39 195.05 159.386C197.79 159.378 200.528 159.405 203.268 159.432C205.239 159.434 207.211 159.433 209.182 159.43C214.521 159.429 219.859 159.458 225.197 159.493C230.781 159.524 236.365 159.527 241.949 159.533C252.517 159.549 263.085 159.59 273.653 159.64C285.686 159.696 297.72 159.723 309.754 159.748C334.503 159.801 359.251 159.889 384 160C383.67 160.66 383.34 161.32 383 162C381.48 161.998 381.48 161.998 379.93 161.996C355.275 161.966 330.621 161.976 305.967 162.028C294.044 162.053 282.121 162.064 270.198 162.045C259.806 162.028 249.414 162.035 239.021 162.072C233.519 162.091 228.017 162.098 222.515 162.075C217.333 162.054 212.153 162.065 206.972 162.102C205.073 162.11 203.173 162.105 201.274 162.088C189.85 161.611 189.85 161.611 179.932 166.43C178.291 168.236 178.291 168.236 177 170C176.34 170.66 175.68 171.32 175 172C175 168.812 175 168.812 176 165C180.929 160.396 186.026 159.273 192.555 159.399Z" fill="#DADADA"/>
<path d="M193.188 157.88C194.436 157.878 194.436 157.878 195.71 157.877C198.503 157.876 201.296 157.881 204.089 157.886C206.089 157.887 208.09 157.887 210.091 157.886C215.526 157.886 220.962 157.892 226.397 157.899C232.076 157.905 237.755 157.905 243.434 157.907C254.189 157.91 264.945 157.918 275.701 157.928C287.945 157.939 300.189 157.945 312.433 157.95C337.622 157.96 362.811 157.978 388 158C388 158.66 388 159.32 388 160C386.954 160.001 385.908 160.003 384.831 160.004C359.392 160.041 333.954 160.1 308.516 160.184C296.214 160.224 283.913 160.256 271.611 160.271C260.89 160.284 250.168 160.311 239.447 160.355C233.77 160.377 228.092 160.393 222.414 160.392C217.071 160.391 211.728 160.409 206.385 160.441C204.423 160.45 202.461 160.451 200.5 160.446C197.821 160.439 195.144 160.457 192.466 160.481C191.69 160.473 190.914 160.465 190.114 160.457C184.905 160.54 182.107 161.887 178 165C177.34 165 176.68 165 176 165C175.67 165.99 175.34 166.98 175 168C175 166.68 175 165.36 175 164C175.66 164 176.32 164 177 164C177 163.34 177 162.68 177 162C181.937 157.592 186.83 157.856 193.188 157.88Z" fill="#CBCBCB"/>
<path d="M535 452C546.55 452 558.1 452 570 452C570 454.64 570 457.28 570 460C569 461 569 461 565.765 461.114C564.332 461.113 562.898 461.108 561.465 461.098C560.335 461.096 560.335 461.096 559.182 461.093C556.767 461.088 554.352 461.075 551.938 461.062C550.304 461.057 548.671 461.053 547.037 461.049C543.025 461.038 539.012 461.021 535 461C535 458.03 535 455.06 535 452Z" fill="#BCBBBB"/>
<path d="M198.957 153.727C200.976 153.746 202.995 153.764 205.015 153.78C209.658 153.818 214.301 153.867 218.945 153.921C227.949 154.018 236.954 154.049 245.958 154.077C249.391 154.088 252.823 154.099 256.255 154.111C257.125 154.114 257.994 154.116 258.89 154.119C270.599 154.159 282.307 154.224 294.015 154.288C295.856 154.298 297.698 154.307 299.54 154.317C300.454 154.322 301.369 154.327 302.311 154.332C309.843 154.372 317.376 154.403 324.908 154.433C332.256 154.463 339.604 154.5 346.952 154.543C351.305 154.568 355.658 154.59 360.012 154.603C364.065 154.616 368.118 154.638 372.17 154.667C373.654 154.676 375.137 154.682 376.621 154.684C378.642 154.688 380.664 154.704 382.685 154.722C384.38 154.73 384.38 154.73 386.109 154.738C388.937 154.994 390.601 155.532 393 157C392.67 157.66 392.34 158.32 392 159C390.781 158.513 390.781 158.513 389.537 158.016C385.43 156.836 381.634 156.719 377.402 156.739C376.55 156.735 375.697 156.732 374.819 156.728C371.97 156.717 369.122 156.721 366.273 156.725C364.227 156.721 362.182 156.716 360.137 156.71C354.588 156.696 349.038 156.696 343.489 156.698C338.859 156.699 334.229 156.695 329.599 156.69C318.681 156.679 307.763 156.678 296.845 156.684C285.57 156.69 274.296 156.678 263.022 156.657C253.347 156.639 243.672 156.633 233.997 156.636C228.216 156.638 222.435 156.636 216.655 156.622C211.223 156.609 205.792 156.611 200.361 156.624C198.364 156.626 196.368 156.624 194.371 156.615C191.653 156.605 188.935 156.613 186.217 156.626C185.42 156.618 184.624 156.611 183.803 156.603C179.643 156.576 179.643 156.576 176.111 158.523C175.745 159.011 175.378 159.498 175 160C174.34 160 173.68 160 173 160C172.67 161.32 172.34 162.64 172 164C171.01 163.67 170.02 163.34 169 163C169 161.35 169 159.7 169 158C178.767 153.142 188.36 153.54 198.957 153.727Z" fill="#ADACAD"/>
<path d="M618 383C618.33 383 618.66 383 619 383C618.859 385.25 618.712 387.5 618.562 389.75C618.481 391.003 618.4 392.256 618.316 393.547C618.075 396.183 617.757 398.48 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C602.159 403.083 589.336 402.82 576.5 402.5C574.501 402.452 572.503 402.403 570.504 402.355C565.669 402.239 560.835 402.12 556 402C556 401.01 556 400.02 556 399C557.144 398.975 558.287 398.95 559.466 398.924C563.769 398.829 568.072 398.729 572.376 398.628C574.227 398.585 576.078 398.543 577.929 398.503C583.174 398.388 588.417 398.253 593.66 398.078C595.155 398.028 596.65 397.982 598.145 397.942C599.989 397.887 601.833 397.802 603.676 397.715C604.671 397.674 605.667 397.632 606.693 397.59C609.142 397.233 609.142 397.233 610.294 395.127C611.076 392.77 611.592 390.449 612 388C613.98 388.33 615.96 388.66 618 389C618 387.02 618 385.04 618 383Z" fill="#52125F"/>
<path d="M260 231C260.094 236.575 259.789 241.913 259.063 247.438C258.976 248.156 258.889 248.875 258.799 249.615C258.129 254.871 258.129 254.871 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.334 261.248 256.334 261.248 256.201 262.486C256.071 263.762 256.071 263.762 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.438 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.012 274.652 253.023 275.305 253.035 275.977C253.085 280.776 252.994 285.278 252 290C251.01 290 250.02 290 249 290C246.776 282.27 248.063 273.866 249 266C249.66 266 250.32 266 251 266C250.93 265.049 250.93 265.049 250.859 264.078C250.586 257.003 251.435 250.365 252.75 243.438C252.985 242.116 252.985 242.116 253.226 240.769C254.487 234.516 254.487 234.516 257.078 231.91C259 231 259 231 260 231Z" fill="#C8C6C8"/>
<path d="M301 225C301.495 227.97 301.495 227.97 302 231C300.68 231.33 299.36 231.66 298 232C298 231.34 298 230.68 298 230C292.965 229.901 287.93 229.828 282.894 229.78C281.182 229.76 279.47 229.733 277.758 229.698C275.293 229.65 272.829 229.627 270.363 229.609C269.602 229.589 268.84 229.568 268.055 229.547C262.996 229.545 260.655 230.565 257 234C256.34 234 255.68 234 255 234C253.542 244.653 252.229 255.318 251 266C250.34 266 249.68 266 249 266C249.33 266.99 249.66 267.98 250 269C249.668 271.569 249.263 274.031 248.75 276.562C248.628 277.248 248.505 277.933 248.379 278.639C248.02 280.449 247.517 282.229 247 284C246.01 284.66 245.02 285.32 244 286C243.67 284.02 243.34 282.04 243 280C243.99 279.505 243.99 279.505 245 279C245.508 276.748 245.508 276.748 245.688 274.125C245.774 273.241 245.86 272.356 245.949 271.445C246.14 268.86 246.14 268.86 245 266C245.051 264.062 245.051 264.062 245.312 262C245.391 261.319 245.47 260.639 245.551 259.938C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243C249.66 243 250.32 243 251 243C250.897 242.134 250.794 241.267 250.688 240.375C251.119 235.718 252.727 234.273 256 231C256.66 231 257.32 231 258 231C258 229.35 258 227.7 258 226C260.31 226 262.62 226 265 226C265 226.33 265 226.66 265 227C266.917 227.027 268.833 227.046 270.75 227.062C271.817 227.074 272.885 227.086 273.984 227.098C276.549 227.015 278.55 226.659 281 226C281.701 226.144 282.402 226.289 283.125 226.438C290.012 227.785 294.945 225 301 225Z" fill="#DEDFE0"/>
<path d="M284 452C295.22 452 306.44 452 318 452C318 454.64 318 457.28 318 460C317.67 460.33 317.34 460.66 317 461C313.37 461 309.74 461 306 461C306 468.92 306 476.84 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C301.36 487 298.72 487 296 487C295.67 478.75 295.34 470.5 295 462C291.37 461.67 287.74 461.34 284 461C284 458.03 284 455.06 284 452ZM286 454C286 455.65 286 457.3 286 459C287.065 459.091 287.065 459.091 288.152 459.184C289.071 459.267 289.991 459.351 290.938 459.438C292.312 459.559 292.312 459.559 293.715 459.684C296 460 296 460 297 461C297.158 462.779 297.251 464.563 297.316 466.348C297.379 467.967 297.379 467.967 297.443 469.619C297.483 470.755 297.522 471.892 297.562 473.062C297.606 474.203 297.649 475.343 297.693 476.518C297.8 479.345 297.902 482.172 298 485C299.65 485 301.3 485 303 485C303.973 482.08 304.193 479.946 304.316 476.895C304.358 475.912 304.4 474.929 304.443 473.916C304.483 472.892 304.522 471.868 304.562 470.812C304.606 469.777 304.649 468.741 304.693 467.674C304.799 465.116 304.9 462.558 305 460C308.3 459.34 311.6 458.68 315 458C315 456.68 315 455.36 315 454C305.43 454 295.86 454 286 454Z" fill="#75207A"/>
<path d="M204 452C212.25 452 220.5 452 229 452C229 452.66 229 453.32 229 454C228.024 454.014 228.024 454.014 227.028 454.028C224.08 454.082 221.134 454.166 218.188 454.25C217.163 454.264 216.139 454.278 215.084 454.293C214.101 454.325 213.118 454.357 212.105 454.391C211.199 454.412 210.294 454.433 209.36 454.454C206.856 454.807 206.856 454.807 205.188 456.879C203.667 459.595 203.835 461.13 204.25 464.188C204.358 465.068 204.467 465.948 204.578 466.855C204.788 468.974 204.788 468.974 206 470C207.548 470.145 209.102 470.227 210.656 470.281C211.596 470.319 212.536 470.356 213.504 470.395C214.493 470.429 215.481 470.464 216.5 470.5C218.448 470.569 220.396 470.641 222.344 470.719C223.212 470.749 224.08 470.779 224.975 470.811C227 471 227 471 228 472C228.041 474 228.043 476 228 478C225.495 479.252 223.791 479.114 220.992 479.098C220.006 479.094 219.02 479.091 218.004 479.088C216.971 479.08 215.939 479.071 214.875 479.062C213.315 479.056 213.315 479.056 211.723 479.049C209.148 479.037 206.574 479.021 204 479C203.01 481.475 203.01 481.475 202 484C201.34 484 200.68 484 200 484C200.33 481.69 200.66 479.38 201 477C209.25 477 217.5 477 226 477C226 476.01 226 475.02 226 474C225.38 474.005 224.759 474.01 224.12 474.016C221.309 474.037 218.498 474.05 215.688 474.062C214.711 474.071 213.735 474.079 212.729 474.088C211.791 474.091 210.853 474.094 209.887 474.098C209.023 474.103 208.159 474.108 207.268 474.114C205 474 205 474 202 473C200.794 469.381 200.892 466.075 200.938 462.312C200.942 461.611 200.947 460.909 200.951 460.186C200.963 458.457 200.981 456.728 201 455C201.99 454.67 202.98 454.34 204 454C204 453.34 204 452.68 204 452Z" fill="#7D1184"/>
<path d="M454 316C456.031 316.086 456.031 316.086 458.5 316.375C459.722 316.51 459.722 316.51 460.969 316.648C463 317 463 317 464 318C465.492 318.063 466.987 318.059 468.48 318.027C469.398 318.015 470.315 318.003 471.26 317.99C473.192 317.955 475.124 317.916 477.057 317.873C482.13 317.813 486.247 317.963 491 320C489 322 489 322 486.564 322.247C485.541 322.246 484.519 322.244 483.465 322.243C482.307 322.246 481.149 322.249 479.956 322.252C478.701 322.245 477.446 322.238 476.152 322.23C474.87 322.23 473.588 322.23 472.267 322.229C469.553 322.228 466.838 322.219 464.124 322.206C460.638 322.189 457.152 322.185 453.665 322.186C450.348 322.185 447.032 322.177 443.715 322.168C441.829 322.166 441.829 322.166 439.905 322.165C438.75 322.158 437.596 322.152 436.406 322.145C434.873 322.14 434.873 322.14 433.309 322.134C431 322 431 322 430 321C427.97 321.032 425.939 321.068 423.91 321.16C422 321 422 321 420 319C422.584 316.416 429.318 317.015 432.879 316.938C435.92 316.938 438.959 316.961 442 317C444.062 317.025 446.125 317.046 448.188 317.062C449.089 317.074 449.99 317.086 450.918 317.098C452.99 317.235 452.99 317.235 454 316Z" fill="#5E0075"/>
<path d="M292 284C292.33 284.99 292.66 285.98 293 287C292.67 287.66 292.34 288.32 292 289C291.98 290.729 292.008 292.459 292.062 294.188C292.117 298.869 291.309 302.499 290 307C289.9 309.6 289.934 312.165 290.027 314.766C290 317 290 317 289 320C288.486 323.513 288.043 327.032 287.598 330.555C287.058 333.668 286.29 336.135 285 339C284.629 339.928 284.257 340.856 283.875 341.812C283.586 342.534 283.298 343.256 283 344C282.34 344 281.68 344 281 344C281.14 341.52 281.287 339.041 281.438 336.562C281.477 335.855 281.516 335.148 281.557 334.42C281.887 329.113 281.887 329.113 283 328C283.213 326.673 283.37 325.337 283.5 324C283.583 323.196 283.665 322.391 283.75 321.562C283.833 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.608 312.886 284.608 312.886 284.719 311.75C285 310 285 310 286 309C286.261 307.32 286.467 305.632 286.648 303.941C286.767 302.916 286.886 301.891 287.008 300.834C287.252 298.658 287.489 296.481 287.719 294.303C287.84 293.276 287.961 292.249 288.086 291.191C288.241 289.771 288.241 289.771 288.4 288.323C289 286 289 286 292 284Z" fill="#BCB9BB"/>
<path d="M437 150C454.82 150 472.64 150 491 150C487 154 487 154 484.958 154.474C484.236 154.462 483.514 154.45 482.77 154.438C481.533 154.433 481.533 154.433 480.271 154.428C479.389 154.404 478.507 154.38 477.598 154.355C476.683 154.347 475.768 154.339 474.826 154.331C471.904 154.302 468.984 154.246 466.062 154.188C463.145 154.145 460.228 154.108 457.31 154.076C455.496 154.054 453.681 154.026 451.867 153.989C445.863 153.85 445.863 153.85 440 155C438.532 156.851 438.532 156.851 438 159C438.33 159.66 438.66 160.32 439 161C437.625 162.5 437.625 162.5 436 164C435.34 164 434.68 164 434 164C434 163.01 434 162.02 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.938 157.188C435.891 154.359 436.083 152.751 437 150Z" fill="#400A50"/>
<path d="M492 313C494.97 313 497.94 313 501 313C501 315.97 501 318.94 501 322C508.26 322 515.52 322 523 322C522.01 323.485 522.01 323.485 521 325C520.34 325 519.68 325 519 325C515.202 326.662 513.335 327.498 511 331C507.185 332.242 505.135 332.038 501.25 330.938C498 329 498 329 496.562 326.25C495.96 322.766 495.859 319.529 496 316C494.68 315.67 493.36 315.34 492 315C492 314.34 492 313.68 492 313Z" fill="#550467"/>
<path d="M231 452C231.99 452 232.98 452 234 452C234 454.97 234 457.94 234 461C229.229 462.234 224.575 462.113 219.688 462.062C218.434 462.056 218.434 462.056 217.154 462.049C215.103 462.037 213.051 462.019 211 462C210.67 462.99 210.34 463.98 210 465C210.62 464.99 211.241 464.979 211.88 464.968C214.691 464.927 217.502 464.901 220.312 464.875C221.289 464.858 222.265 464.841 223.271 464.824C224.209 464.818 225.147 464.811 226.113 464.805C226.977 464.794 227.841 464.784 228.732 464.773C231 465 231 465 234 467C234.221 469.951 234.281 472.684 234.188 475.625C234.167 476.828 234.167 476.828 234.146 478.055C234.111 480.037 234.057 482.018 234 484C232.02 484.495 232.02 484.495 230 485C230 485.66 230 486.32 230 487C225.05 487 220.1 487 215 487C215 486.34 215 485.68 215 485C219.62 485 224.24 485 229 485C229 484.34 229 483.68 229 483C229.66 482.67 230.32 482.34 231 482C231.47 478.724 231.47 478.724 231.625 474.938C231.7 473.647 231.775 472.357 231.852 471.027C231.901 470.028 231.95 469.029 232 468C231.314 467.975 230.627 467.95 229.92 467.924C226.822 467.808 223.723 467.685 220.625 467.562C219.545 467.523 218.465 467.484 217.352 467.443C216.32 467.401 215.289 467.36 214.227 467.316C213.273 467.28 212.32 467.243 211.338 467.205C209 467 209 467 207 466C207 464.35 207 462.7 207 461C207.66 461 208.32 461 209 461C209 460.34 209 459.68 209 459C216.59 458.67 224.18 458.34 232 458C231.67 456.02 231.34 454.04 231 452Z" fill="#731C73"/>
<path d="M418.747 311.886C419.708 311.887 420.668 311.887 421.658 311.887C422.693 311.892 423.727 311.897 424.793 311.902C426.385 311.904 426.385 311.904 428.009 311.907C431.402 311.912 434.795 311.925 438.188 311.938C440.486 311.943 442.785 311.947 445.084 311.951C450.723 311.962 456.361 311.979 462 312C462 312.33 462 312.66 462 313C448.8 313.33 435.6 313.66 422 314C421.34 315.65 420.68 317.3 420 319C418.68 319 417.36 319 416 319C414.631 322.031 413.769 324.943 413.125 328.188C410.295 341.47 410.295 341.47 405 345C405.182 344.07 405.182 344.07 405.367 343.121C406.664 336.266 407.62 329.409 408.438 322.48C408.984 319.098 409.645 316.148 411 313C413.904 312.032 415.728 311.879 418.747 311.886Z" fill="#41044C"/>
<path d="M299 231C299.99 231.33 300.98 231.66 302 232C302 234.31 302 236.62 302 239C302.66 238.34 303.32 237.68 304 237C303.556 245.524 302.441 253.767 301.016 262.172C300.194 267.205 299.893 271.92 300.086 277.023C299.943 280.306 298.331 283.03 297 286C296.406 289.134 295.944 292.264 295.527 295.426C295 298 295 298 293 300C292.945 298.625 292.907 297.25 292.875 295.875C292.852 295.109 292.829 294.344 292.805 293.555C293 291 293 291 293.906 288.312C295.34 283.971 295.968 279.64 296.625 275.125C296.759 274.265 296.893 273.405 297.031 272.52C298.014 265.908 298.783 259.538 297 253C296.933 251.147 296.915 249.292 296.938 247.438C296.947 246.487 296.956 245.537 296.965 244.559C296.976 243.714 296.988 242.87 297 242C297 241.01 297 240.02 297 239C297.824 232.176 297.824 232.176 299 231Z" fill="#D0D0CF"/>
<path d="M553 403C553.99 403 554.98 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.963 409.048 553.925 410.096 553.887 411.176C553.821 412.555 553.755 413.934 553.688 415.312C553.665 416.003 553.642 416.693 553.619 417.404C553.346 422.545 553.346 422.545 551.706 424.701C548.699 426.991 544.937 426.387 541.306 426.341C540.418 426.341 539.53 426.341 538.615 426.342C535.677 426.34 532.739 426.316 529.801 426.293C527.765 426.287 525.729 426.283 523.693 426.28C518.332 426.269 512.971 426.239 507.61 426.206C502.14 426.175 496.671 426.162 491.201 426.146C480.467 426.114 469.734 426.063 459 426C459.33 424.35 459.66 422.7 460 421C460.33 421.99 460.66 422.98 461 424C464.937 424.029 468.875 424.047 472.812 424.062C473.932 424.071 475.052 424.079 476.205 424.088C477.278 424.091 478.351 424.094 479.457 424.098C480.447 424.103 481.437 424.108 482.456 424.114C485.124 424.111 485.124 424.111 488 423C490.12 423.116 490.12 423.116 492.547 423.429C497.799 424.021 502.961 424.145 508.242 424.133C509.638 424.134 509.638 424.134 511.063 424.136C513.011 424.136 514.958 424.135 516.906 424.13C519.888 424.125 522.87 424.13 525.852 424.137C527.753 424.136 529.654 424.135 531.555 424.133C532.888 424.136 532.888 424.136 534.247 424.139C535.076 424.136 535.904 424.133 536.757 424.129C537.845 424.128 537.845 424.128 538.954 424.127C541.033 424.061 541.033 424.061 543.125 423.465C545.393 422.903 546.802 423.293 549 424C551.602 420.097 551.074 416.529 551 412C551.33 411.67 551.66 411.34 552 411C552.231 409.653 552.412 408.296 552.562 406.938C552.707 405.638 552.851 404.339 553 403Z" fill="#5C1272"/>
<path d="M238 330C238.66 330 239.32 330 240 330C239.879 330.701 239.758 331.402 239.633 332.124C239.084 335.311 238.542 338.499 238 341.688C237.809 342.79 237.618 343.893 237.422 345.029C237.241 346.096 237.061 347.163 236.875 348.262C236.624 349.731 236.624 349.731 236.367 351.229C235.942 353.969 235.942 353.969 236.004 356.632C235.997 360.946 234.352 364.943 233 369C233.032 370.73 233.099 372.459 233.188 374.188C233.247 379.617 232.433 384.454 231.125 389.688C230.864 390.748 230.864 390.748 230.598 391.831C230.137 393.574 229.576 395.291 229 397C228.01 397.495 228.01 397.495 227 398C226.67 397.34 226.34 396.68 226 396C225.34 395.67 224.68 395.34 224 395C224.959 393.298 224.959 393.298 225.938 391.562C229.251 384.913 229.143 378.145 228.938 370.848C229 369 229 369 230 367C229.505 365.515 229.505 365.515 229 364C229.99 364 230.98 364 232 364C231.977 363.096 231.954 362.193 231.93 361.262C231.912 360.082 231.894 358.903 231.875 357.688C231.852 356.516 231.829 355.344 231.805 354.137C232 351 232 351 234 348C234.371 345.164 234.505 342.352 234.656 339.496C235 337 235 337 237 335C237.648 332.429 237.648 332.429 238 330Z" fill="#DEDFDE"/>
<path d="M176 172C178.122 178.367 177.048 184.699 175.438 191.02C174.892 193.15 174.892 193.15 175 196C174.37 197.681 173.702 199.348 173 201C170.357 208.93 171.361 220.478 175 228C173.02 227.34 171.04 226.68 169 226C169 224.68 169 223.36 169 222C168.34 222 167.68 222 167 222C166.528 214.677 167.667 208.399 169.362 201.336C170.996 194.401 172.059 187.439 172.96 180.374C173.069 179.57 173.177 178.766 173.289 177.938C173.379 177.225 173.469 176.512 173.561 175.777C174 174 174 174 176 172Z" fill="#DDDDDC"/>
<path d="M165 187C166.32 187.33 167.64 187.66 169 188C168.67 188.66 168.34 189.32 168 190C167.969 193.218 168.068 196.424 168.16 199.641C168 203 168 203 166.973 205.867C165.682 210.023 166.011 213.583 166.375 217.875C166.432 218.659 166.488 219.442 166.547 220.25C166.687 222.167 166.842 224.084 167 226C168.65 226.66 170.3 227.32 172 228C172 228.33 172 228.66 172 229C168.04 229 164.08 229 160 229C160.142 226.166 160.289 223.333 160.438 220.5C160.477 219.709 160.516 218.917 160.557 218.102C161.325 203.675 161.325 203.675 163 202C163.399 199.478 163.751 196.97 164.062 194.438C164.153 193.727 164.244 193.016 164.338 192.283C164.562 190.523 164.782 188.761 165 187Z" fill="#B3ADB5"/>
<path d="M362 356C363.23 358.46 362.927 359.424 362.477 362.105C362.343 362.925 362.208 363.744 362.07 364.588C361.85 365.875 361.85 365.875 361.625 367.188C361.346 368.868 361.067 370.549 360.789 372.23C360.654 373.037 360.519 373.843 360.38 374.673C359.873 377.776 359.43 380.885 359 384C359.99 384 360.98 384 362 384C362.33 385.65 362.66 387.3 363 389C362.34 388.67 361.68 388.34 361 388C360.67 388.99 360.34 389.98 360 391C359.34 391 358.68 391 358 391C358 392.32 358 393.64 358 395C357.34 395 356.68 395 356 395C355.67 395.99 355.34 396.98 355 398C352.938 398.688 352.938 398.688 351 399C351.217 397.822 351.217 397.822 351.438 396.621C352.704 389.791 352.704 389.791 353 382.875C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366C359.64 363.836 359.64 363.836 360.062 361.438C360.903 357.097 360.903 357.097 362 356Z" fill="#DAD8DA"/>
<path d="M567.062 464.938C568.517 464.968 568.517 464.968 570 465C570 467.64 570 470.28 570 473C561.42 473 552.84 473 544 473C543.67 471.35 543.34 469.7 543 468C544.546 466.454 546.069 466.802 548.219 466.719C549.068 466.681 549.918 466.644 550.793 466.605C553.5 466.5 553.5 466.5 556.207 466.395C557.057 466.357 557.906 466.32 558.781 466.281C559.958 466.236 559.958 466.236 561.158 466.189C563.996 465.898 563.742 465.005 567.062 464.938Z" fill="#BCBCBC"/>
<path d="M411 360C411.33 360 411.66 360 412 360C412.054 362.229 412.093 364.458 412.125 366.688C412.148 367.929 412.171 369.17 412.195 370.449C412 374 412 374 411.031 376.375C409.497 380.28 409.533 384.151 409.375 388.312C409.336 389.148 409.298 389.984 409.258 390.846C409.164 392.897 409.081 394.948 409 397C412.343 397.074 414.804 397.065 418 396C418.33 396.99 418.66 397.98 419 399C415.04 399 411.08 399 407 399C406.897 397.907 406.794 396.814 406.688 395.688C406.385 392.078 406.385 392.078 404.438 390.5C403 389 403 389 402.625 385.562C403 382 403 382 404.5 380.062C406.475 377.347 406.105 375.212 405.984 371.953C406.021 367.434 408.584 363.676 411 360Z" fill="#64057D"/>
<path d="M540 221C542.195 221.254 544.382 221.578 546.562 221.938C548.359 222.229 548.359 222.229 550.191 222.527C551.118 222.683 552.045 222.839 553 223C553 222.34 553 221.68 553 221C553.722 221.309 554.444 221.619 555.188 221.938C558.446 223.168 561.506 224 565 224C565.495 225.485 565.495 225.485 566 227C569.3 226.67 572.6 226.34 576 226C575 230 575 230 574 231C567.538 231.359 567.538 231.359 564 229C561.971 229.257 561.971 229.257 560 230C559.01 230.33 558.02 230.66 557 231C557 229.35 557 227.7 557 226C556.34 226 555.68 226 555 226C554.67 226.99 554.34 227.98 554 229C554 227.35 554 225.7 554 224C547.73 224 541.46 224 535 224C535 224.66 535 225.32 535 226C535.557 226.083 536.114 226.165 536.688 226.25C539.697 227.226 541.622 228.952 544 231C543.67 231.66 543.34 232.32 543 233C541.68 232.34 540.36 231.68 539 231C539 230.34 539 229.68 539 229C537.02 229.33 535.04 229.66 533 230C533 229.01 533 228.02 533 227C532.01 227 531.02 227 530 227C530.33 225.68 530.66 224.36 531 223C533.051 222.772 535.102 222.544 537.152 222.316C539.011 222.181 539.011 222.181 540 221Z" fill="#5B0B73"/>
<path d="M360 387C360.99 387.99 361.98 388.98 363 390C362.34 390.99 361.68 391.98 361 393C360.796 395.22 360.796 395.22 360.938 397.562C361.098 401.805 361.098 401.805 360 404C340.53 404 321.06 404 301 404C301 403.34 301 402.68 301 402C300.34 401.67 299.68 401.34 299 401C317.81 401 336.62 401 356 401C356 399.02 356 397.04 356 395C356.66 395 357.32 395 358 395C358 393.68 358 392.36 358 391C358.66 391 359.32 391 360 391C360 389.68 360 388.36 360 387Z" fill="#CACACB"/>
<path d="M627 285C627.66 285 628.32 285 629 285C630.586 289.163 631.311 292.539 631 297C630.67 297.33 630.34 297.66 630 298C629.761 299.702 629.584 301.413 629.438 303.125C629.349 304.118 629.26 305.11 629.168 306.133C629.03 308.486 629.074 310.659 629.25 313C629.167 313.99 629.085 314.98 629 316C626.5 317.938 626.5 317.938 624 319C622.875 311.25 622.875 311.25 624 309C624.381 301.294 623.967 293.647 623 286C624.32 286.33 625.64 286.66 627 287C627 286.34 627 285.68 627 285Z" fill="#57036C"/>
<path d="M242 336C242.66 336 243.32 336 244 336C244 338.64 244 341.28 244 344C243.34 344 242.68 344 242 344C242.023 344.548 242.046 345.096 242.07 345.66C242.251 353.585 241.168 361.178 240 369C239.34 369 238.68 369 238 369C238 371.64 238 374.28 238 377C236.02 377.495 236.02 377.495 234 378C233.902 371.848 233.902 371.848 234 370C234.495 369.505 234.495 369.505 235 369C234.958 367.294 234.911 365.587 234.834 363.882C234.474 355.022 234.474 355.022 236.145 351.777C237.369 350.459 238.678 349.22 240 348C239.67 347.01 239.34 346.02 239 345C239.559 342.738 239.559 342.738 240.438 340.312C240.725 339.504 241.012 338.696 241.309 337.863C241.651 336.941 241.651 336.941 242 336Z" fill="#C6C5C4"/>
<path d="M404 353C404.66 353 405.32 353 406 353C406.054 355.208 406.093 357.417 406.125 359.625C406.148 360.855 406.171 362.085 406.195 363.352C406 366.995 405.162 369.57 404 373C403.611 375.744 403.452 378.484 403.312 381.25C403.265 381.969 403.218 382.689 403.17 383.43C402.857 387.338 402.857 387.338 404 391C404.04 393 404.043 395 404 397C401.525 397.495 401.525 397.495 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.066 389.324 398.256 388.711 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.062C400.211 375.188 400.298 374.313 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.969 365.206 402.969 365.206 402.937 363.375C402.931 359.82 403.301 356.494 404 353Z" fill="#3E1055"/>
<path d="M174 247C174.33 247 174.66 247 175 247C175.481 260.571 173.853 272.616 169.695 285.637C168.501 289.695 167.752 293.841 167 298C166.34 297.67 165.68 297.34 165 297C165.131 296.37 165.263 295.739 165.398 295.09C166.209 290.925 166.929 286.748 167.625 282.562C167.772 281.729 167.919 280.896 168.07 280.037C168.836 275.379 169.046 271.671 168 267C168.521 262.177 170.418 257.566 172 253C172.66 253 173.32 253 174 253C174 251.02 174 249.04 174 247ZM166 260C166.99 260.99 167.98 261.98 169 263C168.67 263.66 168.34 264.32 168 265C167.34 265 166.68 265 166 265C166 263.35 166 261.7 166 260Z" fill="#D4D5D3"/>
<path d="M155 368C155.33 368 155.66 368 156 368C156.144 368.908 156.289 369.815 156.438 370.75C156.902 373.828 156.902 373.828 157.625 376.062C158.119 378.615 157.613 380.485 157 383C155.841 387.851 156.007 392.397 156.16 397.355C156 400 156 400 154 402C153.01 402 152.02 402 151 402C150.804 399.938 150.618 397.876 150.438 395.812C150.333 394.664 150.229 393.515 150.121 392.332C149.969 388.146 150.684 384.947 152 381C152.067 379.606 152.085 378.208 152.063 376.812C152.042 375.554 152.021 374.296 152 373C152.66 373 153.32 373 154 373C154.33 371.35 154.66 369.7 155 368Z" fill="#C9CAC8"/>
<path d="M255 250C255.99 250 256.98 250 258 250C258.043 251.666 258.041 253.334 258 255C257.67 255.33 257.34 255.66 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.334 261.248 256.334 261.248 256.201 262.486C256.071 263.762 256.071 263.762 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.438 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.012 274.652 253.023 275.305 253.035 275.977C253.085 280.776 252.994 285.278 252 290C251.01 290 250.02 290 249 290C247.688 285.9 246.952 281.068 248.947 277.132C250.222 274.551 250.597 272.238 251.035 269.395C251.205 268.329 251.374 267.264 251.549 266.166C251.718 265.059 251.888 263.953 252.063 262.812C252.404 260.61 252.749 258.408 253.098 256.207C253.247 255.232 253.397 254.257 253.551 253.253C254 251 254 251 255 250Z" fill="#C3C1C1"/>
<path d="M390 178C390.33 179.32 390.66 180.64 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C395.553 183.418 395.091 186.834 394.625 190.25C394.499 191.218 394.372 192.186 394.242 193.184C394.113 194.118 393.984 195.053 393.851 196.016C393.736 196.874 393.621 197.733 393.502 198.618C392.991 201.044 392.207 202.846 391 205C390.647 205.634 390.294 206.268 389.93 206.922C388.953 208.615 387.976 210.307 387 212C386.066 208.99 385.955 208.133 387 205C387.204 203.191 387.365 201.378 387.5 199.562C387.582 198.503 387.665 197.443 387.75 196.352C387.832 195.246 387.915 194.14 388 193C388.163 190.812 388.33 188.625 388.5 186.438C388.572 185.467 388.644 184.496 388.719 183.496C389 181 389 181 390 178Z" fill="#C3C2C2"/>
<path d="M243 319C244.32 319.99 245.64 320.98 247 322C246.34 326.29 245.68 330.58 245 335C244.01 335.33 243.02 335.66 242 336C240.521 342.945 240.521 342.945 240 350C238 351.688 238 351.688 236 353C236.633 341.287 238.083 329.728 243 319Z" fill="#C7C6C7"/>
<path d="M171 233C173.5 233.938 173.5 233.938 176 236C176.515 239.04 176.425 241.95 176 245C175.67 245.33 175.34 245.66 175 246C174.632 248.328 174.298 250.662 174 253C173.34 253 172.68 253 172 253C171.897 254.114 171.794 255.227 171.687 256.375C171.461 257.571 171.234 258.768 171 260C169.515 260.99 169.515 260.99 168 262C167.15 259.131 166.941 256.886 167.269 253.918C167.354 253.15 167.438 252.383 167.525 251.592C167.667 250.402 167.667 250.402 167.812 249.188C167.896 248.406 167.979 247.624 168.064 246.818C168.614 242.02 169.543 237.605 171 233Z" fill="#C0BEBF"/>
<path d="M305 232C305.33 232 305.66 232 306 232C306.197 233.415 306.382 234.832 306.562 236.25C306.667 237.039 306.771 237.828 306.879 238.641C307.001 241.027 306.637 242.717 306 245C306 245.99 306 246.98 306 248C305.505 249.237 305.505 249.237 305 250.5C304.054 253.811 303.925 256.041 304 259.438C304.099 264.036 303.31 267.578 302 272C301.957 273.52 301.959 275.042 302 276.562C302.092 280.424 301.608 283.426 300 287C299.01 287.495 299.01 287.495 298 288C296.856 284.568 297.491 283.302 298.533 279.973C299.15 277.739 299.15 277.739 298.914 274.309C298.834 267.611 300.039 261.038 301.081 254.442C301.439 252.176 301.788 249.91 302.135 247.643C302.359 246.193 302.583 244.743 302.809 243.293C302.913 242.62 303.017 241.947 303.124 241.254C303.62 238.128 304.159 235.053 305 232Z" fill="#DFDFDE"/>
<path d="M612 388C612.33 388 612.66 388 613 388C613.295 395.668 613.295 395.668 611 399C604.532 401.663 596.838 401.27 589.961 401.195C588.954 401.192 587.947 401.19 586.91 401.187C583.731 401.176 580.553 401.151 577.375 401.125C575.204 401.115 573.034 401.106 570.863 401.098C565.575 401.076 560.288 401.042 555 401C555.33 400.34 555.66 399.68 556 399C557.144 398.975 558.287 398.95 559.466 398.924C563.769 398.829 568.072 398.729 572.376 398.628C574.227 398.585 576.078 398.543 577.929 398.503C583.174 398.388 588.417 398.253 593.66 398.078C595.155 398.028 596.65 397.982 598.145 397.942C599.989 397.887 601.833 397.802 603.676 397.715C604.671 397.674 605.667 397.632 606.693 397.59C609.142 397.233 609.142 397.233 610.294 395.127C611.076 392.77 611.592 390.449 612 388Z" fill="#5C0D72"/>
<path d="M510 131C520.135 130.977 530.271 130.959 540.406 130.948C545.112 130.943 549.818 130.936 554.524 130.925C559.063 130.914 563.601 130.908 568.14 130.905C569.874 130.903 571.609 130.9 573.343 130.894C575.766 130.887 578.19 130.886 580.613 130.886C581.696 130.881 581.696 130.881 582.801 130.876C587.772 130.886 587.772 130.886 590 132C590 135.63 590 139.26 590 143C589.67 143 589.34 143 589 143C588.783 141.36 588.783 141.36 588.562 139.688C588.117 136.069 588.117 136.069 587 133C586.094 133.004 585.189 133.009 584.256 133.013C575.721 133.054 567.187 133.084 558.653 133.104C554.266 133.114 549.878 133.128 545.491 133.151C541.257 133.173 537.023 133.185 532.789 133.19C531.173 133.193 529.558 133.201 527.942 133.211C525.68 133.226 523.418 133.228 521.155 133.227C519.867 133.231 518.579 133.236 517.252 133.241C514.213 133.016 512.539 132.612 510 131Z" fill="#4A025D"/>
<path d="M623 344C623.095 348.85 622.953 353.235 622 358C622.163 358.616 622.326 359.232 622.494 359.866C623.052 362.221 622.951 363.933 622.66 366.328C622.567 367.127 622.473 367.927 622.377 368.75C622.221 369.987 622.221 369.987 622.062 371.25C621.963 372.09 621.863 372.931 621.76 373.797C621.513 375.865 621.257 377.933 621 380C620.34 380 619.68 380 619 380C618.67 380.99 618.34 381.98 618 383C617.67 383 617.34 383 617 383C616.72 373.092 616.518 364.052 619.398 354.469C620.249 350.977 619.864 348.455 619 345C622 344 622 344 623 344Z" fill="#5B056F"/>
<path d="M296 241C296.66 241.33 297.32 241.66 298 242C297.988 242.976 297.977 243.952 297.965 244.957C297.956 246.229 297.947 247.502 297.938 248.812C297.926 250.077 297.914 251.342 297.902 252.645C297.838 255.996 297.838 255.996 299 259C298.333 260.667 297.667 262.333 297 264C296.746 266.001 296.493 268.003 296.273 270.008C295.632 274.682 294.424 277.81 291 281C291.142 278.646 291.289 276.292 291.438 273.938C291.519 272.627 291.6 271.316 291.684 269.965C292.52 259.48 292.52 259.48 294 258C294.4 255.145 294.752 252.303 295.062 249.438C295.153 248.631 295.244 247.825 295.338 246.994C295.562 244.997 295.782 242.998 296 241Z" fill="#B0AEB0"/>
<path d="M370 309C370.959 311.878 371.77 314.76 372.562 317.688C372.832 318.681 373.101 319.675 373.379 320.699C373.584 321.458 373.789 322.218 374 323C372.35 323 370.7 323 369 323C368.67 325.31 368.34 327.62 368 330C367.34 329.34 366.68 328.68 366 328C366.422 321.529 368.368 315.253 370 309ZM366 330C367.068 333.363 366.974 336.13 366.625 339.625C366.535 340.587 366.445 341.548 366.352 342.539C366 345 366 345 365 347C365.062 347.784 365.124 348.567 365.188 349.375C364.939 352.849 363.489 353.702 361 356C361.142 353.916 361.288 351.833 361.438 349.75C361.519 348.59 361.6 347.43 361.684 346.234C362.1 341.978 363.197 338.289 364.562 334.25C364.832 333.451 365.101 332.652 365.379 331.828C365.584 331.225 365.789 330.622 366 330Z" fill="#D4D3D4"/>
<path d="M403 389C405 390.062 405 390.062 407 392C407.125 395.621 407.125 395.621 407 399C408.468 398.955 408.468 398.955 409.966 398.908C413.604 398.796 417.242 398.684 420.879 398.573C422.453 398.524 424.026 398.476 425.599 398.427C427.863 398.357 430.127 398.288 432.391 398.219C433.092 398.197 433.793 398.175 434.515 398.152C437.68 398.057 440.834 398 444 398C444.495 399.485 444.495 399.485 445 401C432.13 401 419.26 401 406 401C406 400.34 406 399.68 406 399C404.35 399.33 402.7 399.66 401 400C401 399.34 401 398.68 401 398C401.66 397.67 402.32 397.34 403 397C403 394.36 403 391.72 403 389Z" fill="#590D6E"/>
<path d="M244 288C244.66 288 245.32 288 246 288C245.856 289.299 245.711 290.599 245.562 291.938C244.788 299.607 244.42 307.305 244 315C244.66 315 245.32 315 246 315C246.33 316.98 246.66 318.96 247 321C245.68 320.67 244.36 320.34 243 320C241.515 324.455 241.515 324.455 240 329C239.34 329 238.68 329 238 329C238.939 320.945 239.9 312.981 241.633 305.051C242.101 302.783 242.101 302.783 242 299.562C242 297 242 297 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288Z" fill="#D6D6D5"/>
<path d="M169 262C170.125 265.75 170.125 265.75 169 268C169.186 268.969 169.371 269.939 169.563 270.938C170.361 276.087 169.703 281.089 168 286C166.146 288.287 164.527 289.407 162 291C161.957 289 161.959 287 162 285C162.33 284.67 162.66 284.34 163 284C163.376 281.374 163.707 278.76 164 276.125C164.87 268.39 164.87 268.39 166 265C166.66 265 167.32 265 168 265C168.33 264.01 168.66 263.02 169 262Z" fill="#BFBCBD"/>
<path d="M406 399C406 399.66 406 400.32 406 401C422.17 401 438.34 401 455 401C455 401.66 455 402.32 455 403C438.17 403 421.34 403 404 403C404 402.34 404 401.68 404 401C403.01 400.67 402.02 400.34 401 400C403 399 403 399 406 399Z" fill="#500E5A"/>
<path d="M294 459C295.98 459.99 295.98 459.99 298 461C298 468.92 298 476.84 298 485C299.65 485 301.3 485 303 485C303.33 479.39 303.66 473.78 304 468C306.491 471.737 306.207 473.745 306.125 478.188C306.107 479.46 306.089 480.732 306.07 482.043C306.036 483.507 306.036 483.507 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C301.36 487 298.72 487 296 487C295.975 486.258 295.95 485.517 295.924 484.753C295.808 481.397 295.685 478.042 295.562 474.688C295.523 473.52 295.484 472.353 295.443 471.15C295.401 470.032 295.36 468.914 295.316 467.762C295.28 466.73 295.243 465.698 295.205 464.635C295.098 461.893 295.098 461.893 294 459Z" fill="#5C115E"/>
<path d="M235 359C236.283 362.85 236.066 365.947 236 370C235.34 370 234.68 370 234 370C234.33 372.31 234.66 374.62 235 377C235.99 377 236.98 377 238 377C237.67 379.97 237.34 382.94 237 386C236.34 386 235.68 386 235 386C234.818 386.554 234.636 387.109 234.449 387.68C234.198 388.404 233.946 389.129 233.688 389.875C233.444 390.594 233.2 391.314 232.949 392.055C232 394 232 394 229 396C229.309 394.721 229.619 393.442 229.938 392.125C231.342 385.778 232.105 379.441 231.938 372.938C232.113 361.887 232.113 361.887 235 359Z" fill="#C3C2C4"/>
<path d="M380 245C382.485 249.97 379.759 257.47 378.539 262.668C377.594 266.758 376.811 270.882 376 275C375.825 275.824 375.649 276.647 375.469 277.496C375.01 279.945 374.759 282.331 374.563 284.812C374.138 289.381 373.227 293.582 372 298C371.67 298 371.34 298 371 298C370.811 292.138 371.289 287.067 372.563 281.352C373.114 278.784 373.114 278.784 373 275.25C373 271.674 373.834 269.37 375 266C375.551 263.285 376.022 260.561 376.496 257.832C378.515 246.485 378.515 246.485 380 245Z" fill="#D9D9D9"/>
<path d="M304 457C305.32 457.66 306.64 458.32 308 459C307.01 459.33 306.02 459.66 305 460C304.975 460.651 304.95 461.301 304.924 461.972C304.808 464.919 304.685 467.866 304.562 470.812C304.523 471.837 304.484 472.861 304.443 473.916C304.401 474.899 304.36 475.882 304.316 476.895C304.28 477.801 304.243 478.706 304.205 479.64C304 482 304 482 303 485C301.35 485 299.7 485 298 485C298 477.08 298 469.16 298 461C298.33 461 298.66 461 299 461C299.66 467.6 300.32 474.2 301 481C301.049 479.519 301.098 478.038 301.148 476.512C301.223 474.57 301.299 472.629 301.375 470.688C301.406 469.711 301.437 468.735 301.469 467.729C301.507 466.791 301.546 465.853 301.586 464.887C301.617 464.023 301.649 463.159 301.681 462.268C302 460 302 460 304 457Z" fill="#800A88"/>
<path d="M415 316C416.65 316 418.3 316 420 316C419.67 316.99 419.34 317.98 419 319C418.01 319 417.02 319 416 319C414.631 322.031 413.769 324.943 413.125 328.188C410.295 341.47 410.295 341.47 405 345C405.133 344.299 405.266 343.598 405.402 342.875C406.239 338.379 407.045 333.927 407.5 329.375C407.665 328.261 407.83 327.148 408 326C408.66 325.67 409.32 325.34 410 325C410.727 323.021 411.398 321.02 412 319C412.66 319 413.32 319 414 319C414.33 318.01 414.66 317.02 415 316Z" fill="#44095E"/>
<path d="M603 273C609.75 272.875 609.75 272.875 612 274C612 274.66 612 275.32 612 276C613.98 276.66 615.96 277.32 618 278C618 278.66 618 279.32 618 280C618.598 280.144 619.196 280.289 619.812 280.438C621.562 280.887 623.287 281.429 625 282C625 282.66 625 283.32 625 284C624.34 284 623.68 284 623 284C622.67 284.66 622.34 285.32 622 286C620.021 286.727 618.02 287.398 616 288C615.938 287.072 615.876 286.144 615.812 285.188C615.332 281.806 615.332 281.806 612.438 280.312C611.633 279.879 610.829 279.446 610 279C610 278.01 610 277.02 610 276C609.031 275.876 608.061 275.752 607.062 275.625C606.052 275.419 605.041 275.213 604 275C603.67 274.34 603.34 273.68 603 273Z" fill="#430653"/>
<path d="M532 135C546.85 135 561.7 135 577 135C577 135.66 577 136.32 577 137C577.66 137.33 578.32 137.66 579 138C563.16 137.67 547.32 137.34 531 137C531.33 136.34 531.66 135.68 532 135Z" fill="#5E0174"/>
<path d="M234 385C234.99 385.66 235.98 386.32 237 387C236.67 387.33 236.34 387.66 236 388C235.626 390.501 235.295 392.99 235 395.5C234.135 402.865 234.135 402.865 233 404C230.98 404.072 228.958 404.084 226.938 404.062C225.833 404.053 224.728 404.044 223.59 404.035C222.308 404.018 222.308 404.018 221 404C222 402 222 402 224.312 400.688C230.408 396.86 232.1 391.607 234 385Z" fill="#BFBEBF"/>
<path d="M218 466C220.479 465.973 222.958 465.953 225.438 465.937C226.145 465.929 226.852 465.921 227.58 465.912C229.387 465.903 231.194 465.948 233 466C234 467 234 467 234.098 470.816C234.091 472.398 234.079 473.98 234.062 475.562C234.058 476.369 234.053 477.175 234.049 478.006C234.037 480.004 234.019 482.002 234 484C232.68 484.33 231.36 484.66 230 485C230 485.66 230 486.32 230 487C225.05 487 220.1 487 215 487C215 486.34 215 485.68 215 485C219.62 485 224.24 485 229 485C229 484.34 229 483.68 229 483C229.66 482.67 230.32 482.34 231 482C231.47 478.724 231.47 478.724 231.625 474.937C231.811 471.503 231.811 471.503 232 468C225.07 467.505 225.07 467.505 218 467C218 466.67 218 466.34 218 466Z" fill="#78157B"/>
<path d="M422 240C422.66 240.33 423.32 240.66 424 241C424.312 243.714 424.513 246.339 424.625 249.062C424.664 249.821 424.702 250.58 424.742 251.361C424.837 253.24 424.919 255.12 425 257C426.671 257.681 426.671 257.681 428.375 258.375C431.844 259.93 433.326 260.651 435 264C434.67 264.99 434.34 265.98 434 267C433.67 266.01 433.34 265.02 433 264C431.108 263.319 431.108 263.319 429 263C428.01 262.67 427.02 262.34 426 262C425.67 261.34 425.34 260.68 425 260C422.983 258.866 422.983 258.866 421 258C420.887 251.889 421.104 246.048 422 240Z" fill="#461054"/>
<path d="M191.355 153.609C192.897 153.618 192.897 153.618 194.47 153.627C197.709 153.649 200.948 153.699 204.188 153.75C206.402 153.77 208.616 153.788 210.83 153.805C216.22 153.848 221.61 153.915 227 154C227 154.33 227 154.66 227 155C225.101 155.03 225.101 155.03 223.164 155.06C218.447 155.136 213.73 155.225 209.013 155.317C206.975 155.356 204.937 155.39 202.9 155.422C199.963 155.468 197.026 155.526 194.09 155.586C192.733 155.603 192.733 155.603 191.349 155.621C185.056 155.766 178.341 156.302 173 160C172.195 162.05 172.195 162.05 172 164C171.01 163.67 170.02 163.34 169 163C169 161.35 169 159.7 169 158C176.646 154.719 183.064 153.433 191.355 153.609Z" fill="#A5A3A4"/>
<path d="M283 355C283.66 355.33 284.32 355.66 285 356C284.102 364.533 283.092 372.964 281.375 381.375C280.106 387.638 279.635 393.615 280 400C279.34 399.67 278.68 399.34 278 399C275.474 387.37 278.107 375.536 281.406 364.352C282.12 361.524 282.153 358.903 282 356C282.33 355.67 282.66 355.34 283 355Z" fill="#C8C7C5"/>
<path d="M454 316C456.031 316.086 456.031 316.086 458.5 316.375C459.722 316.51 459.722 316.51 460.969 316.648C463 317 463 317 464 318C465.539 318.063 467.081 318.059 468.621 318.027C470.024 318.009 470.024 318.009 471.455 317.99C473.44 317.955 475.424 317.916 477.408 317.873C478.345 317.862 479.281 317.851 480.246 317.84C481.109 317.823 481.972 317.806 482.861 317.789C485 318 485 318 487 320C471.631 320.132 456.347 319.846 441 319C440.67 318.34 440.34 317.68 440 317C440.927 317.012 441.854 317.023 442.809 317.035C444.605 317.049 444.605 317.049 446.438 317.062C448.23 317.08 448.23 317.08 450.059 317.098C452.889 317.339 452.889 317.339 454 316Z" fill="#540168"/>
<path d="M513 309C513.33 310.32 513.66 311.64 514 313C514.66 313 515.32 313 516 313C516.33 313.66 516.66 314.32 517 315C519.025 315.652 519.025 315.652 521 316C521 316.99 521 317.98 521 319C522.32 319.33 523.64 319.66 525 320C525 320.66 525 321.32 525 322C522.36 321.67 519.72 321.34 517 321C516.67 320.01 516.34 319.02 516 318C514.108 317.319 514.108 317.319 512 317C511.01 316.67 510.02 316.34 509 316C509 315.34 509 314.68 509 314C508.34 314 507.68 314 507 314C507 313.01 507 312.02 507 311C508.207 310.783 508.207 310.783 509.438 310.562C511.921 310.259 511.921 310.259 513 309Z" fill="#571569"/>
<path d="M432 196C434 198 434 198 434.23 201.012C434.188 204.677 434.123 208.337 434 212C433.982 212.772 433.964 213.544 433.945 214.34C433.683 217.867 433.047 218.956 430.438 221.438C429.231 222.211 429.231 222.211 428 223C427.825 218.721 428.111 215.249 429.422 211.176C430.739 206.22 431.283 201.071 432 196Z" fill="#5D0275"/>
<path d="M553 403C553.99 403 554.98 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.963 409.048 553.925 410.096 553.887 411.176C553.821 412.555 553.755 413.934 553.688 415.312C553.665 416.003 553.642 416.693 553.619 417.404C553.347 422.523 553.347 422.523 551.76 424.705C549.477 426.385 548.147 426.347 545.332 426.293C544.439 426.283 543.547 426.274 542.627 426.264C541.234 426.226 541.234 426.226 539.812 426.188C538.872 426.174 537.932 426.16 536.963 426.146C534.641 426.111 532.321 426.062 530 426C530.33 425.34 530.66 424.68 531 424C531.675 424.012 532.351 424.023 533.047 424.035C533.939 424.044 534.831 424.053 535.75 424.062C536.632 424.074 537.513 424.086 538.422 424.098C540.789 424.008 542.722 423.589 545 423C547.25 423.438 547.25 423.438 549 424C551.602 420.097 551.074 416.529 551 412C551.33 411.67 551.66 411.34 552 411C552.231 409.653 552.412 408.296 552.562 406.938C552.707 405.638 552.851 404.339 553 403Z" fill="#4D0D57"/>
<path d="M563.125 397.437C564.221 397.539 565.316 397.641 566.445 397.746C567.288 397.83 568.131 397.914 569 398C569 398.33 569 398.66 569 399C562.565 399.495 562.565 399.495 556 400C556 400.33 556 400.66 556 401C570.19 401.33 584.38 401.66 599 402C599 402.33 599 402.66 599 403C583.82 403 568.64 403 553 403C552.67 403.99 552.34 404.98 552 406C551.25 404.25 551.25 404.25 551 402C554.913 397.277 557.177 396.868 563.125 397.437Z" fill="#6A0384"/>
<path d="M545 479C548.63 479 552.26 479 556 479C555.34 480.98 554.68 482.96 554 485C552.868 485.061 551.736 485.121 550.57 485.184C549.089 485.268 547.607 485.353 546.125 485.438C545.005 485.496 545.005 485.496 543.863 485.557C539.8 485.716 539.8 485.716 536 487C536.33 485.68 536.66 484.36 537 483C539.64 482.67 542.28 482.34 545 482C545 481.01 545 480.02 545 479Z" fill="#BEBEBE"/>
<path d="M543 472C551.25 472.33 559.5 472.66 568 473C568 473.33 568 473.66 568 474C560.41 474 552.82 474 545 474C545 474.99 545 475.98 545 477C551.93 477 558.86 477 566 477C566 477.66 566 478.32 566 479C558.41 479 550.82 479 543 479C543 476.69 543 474.38 543 472Z" fill="#A9AAAA"/>
<path d="M292 305C292.33 305 292.66 305 293 305C292.679 310.631 292.113 315.941 290.562 321.375C288.13 330.366 287.724 339.746 287 349C286.34 349 285.68 349 285 349C285 350.98 285 352.96 285 355C284.67 355 284.34 355 284 355C283.918 350.371 284.173 346.012 284.875 341.438C285.432 337.761 285.988 334.089 286.473 330.402C287.615 321.737 289.232 313.304 292 305Z" fill="#CACAC9"/>
<path d="M292 284C292.33 284.99 292.66 285.98 293 287C292.67 287.66 292.34 288.32 292 289C292.006 290.709 292.054 292.418 292.125 294.125C292.182 299.497 291.326 303.168 289 308C288.34 308.33 287.68 308.66 287 309C287.142 306.479 287.289 303.958 287.438 301.438C287.477 300.733 287.516 300.029 287.557 299.303C288.097 290.29 288.097 290.29 289 286C289.99 285.34 290.98 284.68 292 284Z" fill="#B6B3B4"/>
<path d="M299 231C299.99 231.33 300.98 231.66 302 232C302.448 240.281 301.635 248.095 299 256C298.34 256.33 297.68 256.66 297 257C297 233 297 233 299 231Z" fill="#C4C1C5"/>
<path d="M631.062 152.937C632.119 152.942 633.175 152.947 634.264 152.951C636.843 152.963 639.421 152.979 642 153C642 153.99 642 154.98 642 156C641.01 155.67 640.02 155.34 639 155C637.328 155.308 635.662 155.644 634 156C632.162 156.078 630.321 156.108 628.48 156.098C627.459 156.094 626.437 156.091 625.385 156.088C624.33 156.08 623.275 156.071 622.188 156.062C621.113 156.058 620.039 156.053 618.932 156.049C616.288 156.037 613.644 156.021 611 156C610.67 155.34 610.34 154.68 610 154C617.06 153.065 623.946 152.879 631.062 152.937Z" fill="#4D0161"/>
<path d="M242 336C242.66 336 243.32 336 244 336C244 338.64 244 341.28 244 344C243.34 344 242.68 344 242 344C242.012 344.641 242.023 345.281 242.035 345.941C242.089 351.087 241.882 355.93 241 361C240.34 361 239.68 361 239 361C239 359.35 239 357.7 239 356C238.01 355.67 237.02 355.34 236 355C237.074 352.085 237.778 350.222 240 348C239.67 347.01 239.34 346.02 239 345C239.559 342.738 239.559 342.738 240.438 340.312C240.725 339.504 241.012 338.696 241.309 337.863C241.651 336.941 241.651 336.941 242 336Z" fill="#B7B6B7"/>
<path d="M382 211C382.66 211 383.32 211 384 211C383.886 212.459 383.758 213.917 383.625 215.375C383.555 216.187 383.486 216.999 383.414 217.836C383 220 383 220 381 222C380.973 220.354 380.954 218.708 380.938 217.062C380.926 216.146 380.914 215.229 380.902 214.285C381 212 381 212 382 211ZM379 222C379.66 222 380.32 222 381 222C381.237 229.035 380.788 235.183 379 242C378.01 242 377.02 242 376 242C376.168 241.408 376.335 240.817 376.508 240.207C378.143 233.967 378.143 233.967 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222Z" fill="#E6E6E7"/>
<path d="M554.625 457.75C555.484 457.729 556.342 457.709 557.227 457.688C558.464 457.68 558.464 457.68 559.727 457.672C560.475 457.663 561.223 457.653 561.995 457.644C564 458 564 458 567 461C557.76 461 548.52 461 539 461C539.33 460.34 539.66 459.68 540 459C544.705 457.538 549.742 457.78 554.625 457.75Z" fill="#B1B2B1"/>
<path d="M501 128C502.32 128.33 503.64 128.66 505 129C504.01 130.485 504.01 130.485 503 132C504.32 131.67 505.64 131.34 507 131C506.493 131.692 506.493 131.692 505.977 132.398C502.313 137.756 500.879 142.6 500 149C498.68 149.33 497.36 149.66 496 150C496.33 149.34 496.66 148.68 497 148C497.393 145.125 497.746 142.259 498.062 139.375C498.153 138.573 498.244 137.771 498.338 136.945C498.562 134.964 498.781 132.982 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#400B4F"/>
<path d="M553 221C553.722 221.309 554.444 221.619 555.188 221.938C558.446 223.168 561.506 224 565 224C565.33 224.99 565.66 225.98 566 227C569.3 226.67 572.6 226.34 576 226C575 230 575 230 574 231C569.781 231.406 567.739 231.567 564.312 228.938C563.549 228.298 562.786 227.659 562 227C559.736 227.126 559.736 227.126 558 228C557.67 227.01 557.34 226.02 557 225C555 223.791 555 223.791 553 223C553 222.34 553 221.68 553 221Z" fill="#63077E"/>
<path d="M376 300C375.858 302.375 375.711 304.75 375.562 307.125C375.504 308.123 375.504 308.123 375.443 309.141C375.188 313.15 374.732 317.05 374 321C373.34 320.67 372.68 320.34 372 320C371.608 318.346 371.279 316.677 371 315C370.67 314.01 370.34 313.02 370 312C370.516 308.183 371.613 304.589 373 301C375 300 375 300 376 300Z" fill="#C2C2C3"/>
<path d="M301 225C301.495 227.97 301.495 227.97 302 231C300.68 231.33 299.36 231.66 298 232C298 231.34 298 230.68 298 230C286.12 229.67 274.24 229.34 262 229C262 228.67 262 228.34 262 228C263.555 227.909 263.555 227.909 265.141 227.816C266.51 227.732 267.88 227.647 269.25 227.562C269.932 227.523 270.614 227.484 271.316 227.443C274.663 227.232 277.764 226.859 281 226C281.701 226.144 282.402 226.289 283.125 226.438C290.012 227.785 294.945 225 301 225Z" fill="#D8D7D9"/>
<path d="M255 250C255.99 250 256.98 250 258 250C258.043 251.666 258.041 253.334 258 255C257.67 255.33 257.34 255.66 257 256C256.6 258.855 256.248 261.697 255.938 264.562C255.847 265.369 255.756 266.175 255.662 267.006C255.438 269.003 255.218 271.002 255 273C254.34 272.67 253.68 272.34 253 272C251.211 264.987 252.171 257.902 254 251C254.33 250.67 254.66 250.34 255 250Z" fill="#BCB5C3"/>
<path d="M174 247C174.33 247 174.66 247 175 247C175.23 252.723 174.398 257.804 173.125 263.375C172.951 264.194 172.777 265.012 172.598 265.855C172.135 267.921 171.575 269.963 171 272C170.34 272.33 169.68 272.66 169 273C167.433 265.511 169.561 260.042 172 253C172.66 253 173.32 253 174 253C174 251.02 174 249.04 174 247ZM166 260C166.99 260.99 167.98 261.98 169 263C168.67 263.66 168.34 264.32 168 265C167.34 265 166.68 265 166 265C166 263.35 166 261.7 166 260Z" fill="#C8C6C7"/>
<path d="M165 215C165.33 215 165.66 215 166 215C166.33 218.63 166.66 222.26 167 226C169.475 226.99 169.475 226.99 172 228C172 228.33 172 228.66 172 229C168.04 229 164.08 229 160 229C160 224 160 224 161.438 222.5C161.953 222.005 162.469 221.51 163 221C163.648 218.429 163.648 218.429 164 216C164.33 215.67 164.66 215.34 165 215Z" fill="#BAB9B9"/>
<path d="M249 243C249.66 243 250.32 243 251 243C251.223 250.326 250.954 256.926 249 264C248.664 265.333 248.331 266.666 248 268C247.01 268 246.02 268 245 268C245.114 266.395 245.242 264.791 245.375 263.188C245.479 261.848 245.479 261.848 245.586 260.48C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243Z" fill="#E5E5E7"/>
<path d="M204 452C212.25 452 220.5 452 229 452C229 452.66 229 453.32 229 454C228.349 454.02 227.699 454.04 227.028 454.06C224.081 454.155 221.134 454.265 218.188 454.375C217.163 454.406 216.139 454.437 215.084 454.469C213.61 454.527 213.61 454.527 212.105 454.586C211.199 454.617 210.294 454.649 209.36 454.681C206.735 454.86 206.735 454.86 204 457C203.01 457 202.02 457 201 457C201.33 456.01 201.66 455.02 202 454C202.66 454 203.32 454 204 454C204 453.34 204 452.68 204 452Z" fill="#801784"/>
<path d="M169 295C169.99 295 170.98 295 172 295C171.424 297.386 170.778 299.667 170 302C170.33 302.99 170.66 303.98 171 305C170.621 306.832 170.621 306.832 170 309C169.516 311.876 169.052 314.755 168.598 317.637C168.4 318.417 168.203 319.196 168 320C167.34 320.33 166.68 320.66 166 321C165.4 302.2 165.4 302.2 169 295Z" fill="#E2E4E2"/>
<path d="M210 455C216.6 455 223.2 455 230 455C230 455.99 230 456.98 230 458C223.07 458 216.14 458 209 458C209.33 457.01 209.66 456.02 210 455Z" fill="#931098"/>
<path d="M612.801 151.121C613.637 151.145 614.474 151.168 615.335 151.193C617.995 151.269 620.653 151.353 623.312 151.437C625.12 151.491 626.928 151.543 628.736 151.596C633.158 151.725 637.579 151.86 642 152C642 152.33 642 152.66 642 153C630.902 153.558 619.801 154.095 608.688 154.187C607.936 154.2 607.185 154.213 606.411 154.227C604.606 154.23 602.801 154.125 601 154C600.34 153.34 599.68 152.68 599 152C603.647 150.79 608.048 150.962 612.801 151.121Z" fill="#440356"/>
<path d="M359 366C360.507 369.013 359.421 371.09 358.625 374.312C357.47 379.048 356.383 383.757 355.563 388.562C355.007 390.969 354.195 392.849 353 395C351.565 392.13 352.467 390.141 353 387C352.979 385.763 352.959 384.525 352.938 383.25C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366Z" fill="#E8E7E7"/>
<path d="M303 258C303.33 258 303.66 258 304 258C304.153 261.75 304.071 264.759 303 268.375C302.138 271.5 301.916 273.413 302 276.562C302.092 280.424 301.608 283.426 300 287C299.34 287.33 298.68 287.66 298 288C296.672 284.015 297.803 281.989 299 278C299.144 276.969 299.289 275.938 299.437 274.875C300.266 269.169 301.66 263.604 303 258Z" fill="#E5E5E4"/>
<path d="M435 177C435.33 177.66 435.66 178.32 436 179C436.66 179 437.32 179 438 179C438.33 178.34 438.66 177.68 439 177C439.081 178.624 439.139 180.25 439.188 181.875C439.222 182.78 439.257 183.685 439.293 184.617C439.196 185.404 439.1 186.19 439 187C438.01 187.66 437.02 188.32 436 189C436 189.99 436 190.98 436 192C434.02 192.99 434.02 192.99 432 194C432.165 193.237 432.33 192.474 432.5 191.688C433.091 188.964 433.091 188.964 433 186C433.303 184.431 433.639 182.869 434 181.312C434.186 180.504 434.371 179.696 434.562 178.863C434.707 178.248 434.851 177.634 435 177ZM431 187C433 188 433 188 433 188L431 187Z" fill="#5B0572"/>
<path d="M360 387C360.99 387.99 361.98 388.98 363 390C362.01 391.485 362.01 391.485 361 393C360.796 395.22 360.796 395.22 360.938 397.562C361.098 401.805 361.098 401.805 360 404C358.02 404 356.04 404 354 404C354 402 354 402 356 400C356.167 397.416 356.167 397.416 356 395C356.66 395 357.32 395 358 395C358 393.68 358 392.36 358 391C358.66 391 359.32 391 360 391C360 389.68 360 388.36 360 387Z" fill="#C3BDC4"/>
<path d="M618 383C618.33 383 618.66 383 619 383C618.859 385.25 618.712 387.5 618.562 389.75C618.481 391.003 618.4 392.256 618.316 393.547C618.075 396.183 617.757 398.48 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C613.68 402.67 612.36 402.34 611 402C611.66 402 612.32 402 613 402C613.33 398.04 613.66 394.08 614 390C615.32 389.67 616.64 389.34 618 389C618 387.02 618 385.04 618 383Z" fill="#461158"/>
<path d="M201 477C207.93 477 214.86 477 222 477C222 477.66 222 478.32 222 479C216.06 479 210.12 479 204 479C203.34 480.65 202.68 482.3 202 484C201.34 484 200.68 484 200 484C200.33 481.69 200.66 479.38 201 477Z" fill="#73137B"/>
<path d="M451 458C458.855 457.681 466.269 458.643 474 460C474 460.66 474 461.32 474 462C470.542 462.029 467.083 462.047 463.625 462.063C462.148 462.075 462.148 462.075 460.641 462.088C459.229 462.093 459.229 462.093 457.789 462.098C456.485 462.106 456.485 462.106 455.155 462.114C453 462 453 462 451 461C451 460.01 451 459.02 451 458Z" fill="#9E9E9D"/>
<path d="M166 272C166.33 272 166.66 272 167 272C167.135 274.419 167.234 276.829 167.313 279.25C167.354 279.932 167.396 280.614 167.439 281.316C167.488 283.328 167.488 283.328 167 287C164.48 289.484 164.48 289.484 162 291C161.957 289 161.959 287 162 285C162.33 284.67 162.66 284.34 163 284C163.283 281.452 163.448 278.905 163.621 276.348C164 274 164 274 166 272Z" fill="#B6AEB4"/>
<path d="M209 459C210.65 459 212.3 459 214 459C213.34 459.619 212.68 460.238 212 460.875C209.772 462.756 209.772 462.756 210 465C216.93 465 223.86 465 231 465C231 465.33 231 465.66 231 466C227.375 466.196 223.75 466.381 220.125 466.562C219.092 466.619 218.06 466.675 216.996 466.732C215.517 466.805 215.517 466.805 214.008 466.879C212.641 466.95 212.641 466.95 211.247 467.022C209 467 209 467 207 466C207 464.35 207 462.7 207 461C207.66 461 208.32 461 209 461C209 460.34 209 459.68 209 459Z" fill="#711875"/>
<path d="M591 144C593.475 144.99 593.475 144.99 596 146C596 147.32 596 148.64 596 150C596.99 150 597.98 150 599 150C599 150.66 599 151.32 599 152C597.68 152 596.36 152 595 152C594.67 152.99 594.34 153.98 594 155C591.569 152.883 590.155 151.465 589.125 148.375C589.084 147.591 589.043 146.808 589 146C589.66 145.34 590.32 144.68 591 144Z" fill="#5C0774"/>
<path d="M643 227C644.125 230.75 644.125 230.75 643 233C634.61 233.136 626.356 232.755 618 232C618.33 231.34 618.66 230.68 619 230C626.92 230 634.84 230 643 230C643 229.01 643 228.02 643 227Z" fill="#500C60"/>
<path d="M502 137C502.33 137 502.66 137 503 137C503.081 139.438 503.14 141.874 503.188 144.312C503.225 145.348 503.225 145.348 503.264 146.404C503.338 151.518 503.338 151.518 501.648 153.93C499.434 155.367 497.623 155.798 495 156C494.34 155.34 493.68 154.68 493 154C494.65 153.67 496.3 153.34 498 153C498.205 152.013 498.41 151.025 498.621 150.008C498.891 148.726 499.16 147.445 499.438 146.125C499.704 144.849 499.971 143.573 500.246 142.258C501 139 501 139 502 137Z" fill="#5D0275"/>
<path d="M158 337C158.379 342.93 157.106 347.472 155 353C154.34 352.67 153.68 352.34 153 352C153.113 349.687 153.241 347.374 153.375 345.062C153.445 343.775 153.514 342.487 153.586 341.16C153.723 340.117 153.859 339.074 154 338C156 337 156 337 158 337Z" fill="#B2ADB9"/>
<path d="M478 289C478.66 289.99 479.32 290.98 480 292C481.661 292.681 483.328 293.347 485 294C485.474 294.495 485.949 294.99 486.438 295.5C488.653 297.627 491.091 298.16 494 299C494 299.66 494 300.32 494 301C494.66 301.33 495.32 301.66 496 302C492.59 301.213 489.311 300.129 486 299C486 298.34 486 297.68 486 297C485.443 297.227 484.886 297.454 484.312 297.688C481.015 298.133 479.597 296.965 477 295C476.67 294.01 476.34 293.02 476 292C476.66 292 477.32 292 478 292C478 291.01 478 290.02 478 289Z" fill="#600E76"/>
<path d="M253 243C253.33 243 253.66 243 254 243C254.174 249.842 253.517 256.463 252.688 263.25C252.57 264.325 252.452 265.4 252.33 266.508C252.204 267.542 252.079 268.575 251.949 269.641C251.839 270.574 251.729 271.508 251.616 272.47C251 275 251 275 248 279C248.33 274.71 248.66 270.42 249 266C249.66 266 250.32 266 251 266C250.977 265.261 250.954 264.523 250.93 263.762C250.802 256.592 251.457 250 253 243Z" fill="#CDCFCD"/>
<path d="M162 327C163.503 329.388 164.054 330.58 163.688 333.422C163.461 334.273 163.234 335.123 163 336C162.835 336.871 162.67 337.743 162.5 338.641C162.335 339.502 162.17 340.363 162 341.25C161.835 342.121 161.67 342.993 161.5 343.891C161 346 161 346 160 347C159.607 348.679 159.259 350.369 158.938 352.062C158.761 352.982 158.584 353.901 158.402 354.848C158.203 355.913 158.203 355.913 158 357C157.67 357 157.34 357 157 357C157.362 346.598 159.415 337.041 162 327Z" fill="#D1D0D0"/>
<path d="M388 192C390 193 390 193 391 194C391.709 197.665 392.098 201.267 392 205C390.188 207.5 390.188 207.5 388 209C387.34 209.99 386.68 210.98 386 212C386.66 205.4 387.32 198.8 388 192Z" fill="#CECDCD"/>
<path d="M573 251C575.875 251.75 575.875 251.75 579 253C580.125 255 580.125 255 581 257C583.034 258.268 583.034 258.268 585 259C584.67 259.99 584.34 260.98 584 262C584 261.34 584 260.68 584 260C582.948 259.938 581.896 259.876 580.812 259.812C576.371 258.866 574.884 257.408 572 254C572.33 253.01 572.66 252.02 573 251Z" fill="#47065C"/>
<path d="M455 408C457.935 410.934 457.462 414.183 457.625 418.125C457.664 418.879 457.702 419.633 457.742 420.41C457.837 422.273 457.919 424.136 458 426C456.68 426 455.36 426 454 426C453.903 419.885 454.23 414.067 455 408Z" fill="#421050"/>
<path d="M620 362C620.66 362 621.32 362 622 362C622.097 368.115 621.77 373.933 621 380C620.34 380 619.68 380 619 380C618.67 380.99 618.34 381.98 618 383C617.438 381.062 617.438 381.062 617 379C617.33 378.67 617.66 378.34 618 378C618.4 375.311 618.751 372.636 619.062 369.938C619.153 369.179 619.244 368.42 619.338 367.639C619.562 365.76 619.782 363.88 620 362Z" fill="#500F5E"/>
<path d="M174 169C175.874 174.593 174.088 180.452 173.187 186.125C173.009 187.33 172.83 188.536 172.646 189.777C172.379 191.5 172.379 191.5 172.105 193.258C171.942 194.311 171.779 195.364 171.61 196.45C171 199 171 199 169 201C168.541 193.355 170.302 186.421 172 179C172.404 177.043 172.8 175.085 173.187 173.125C173.346 172.323 173.505 171.521 173.668 170.695C173.778 170.136 173.887 169.576 174 169Z" fill="#CFD0CF"/>
<path d="M157 374C158.363 378.088 157.485 381.113 156.438 385.188C155.775 389.449 155.925 393.696 156 398C155.691 397.361 155.381 396.721 155.063 396.062C154.166 394.064 154.166 394.064 153 393C152.528 386.51 153.712 381.083 156 375C156.33 374.67 156.66 374.34 157 374Z" fill="#DCDDDB"/>
<path d="M235 359C236.283 362.85 236.067 365.947 236 370C235.34 370 234.68 370 234 370C234.33 372.31 234.66 374.62 235 377C235.99 377 236.98 377 238 377C238 377.66 238 378.32 238 379C236.35 379.66 234.7 380.32 233 381C230.717 374.151 231.976 366.753 234 360C234.33 359.67 234.66 359.34 235 359Z" fill="#D1D1D0"/>
<path d="M492 313C494.97 313 497.94 313 501 313C501.195 319.055 501.195 319.055 501 321C500.34 321.66 499.68 322.32 499 323C498.34 322.67 497.68 322.34 497 322C496.375 318.938 496.375 318.938 496 316C494.68 315.67 493.36 315.34 492 315C492 314.34 492 313.68 492 313Z" fill="#461054"/>
<path d="M364 338C365.905 341.19 366.223 343.317 365.875 347C365.811 347.846 365.746 348.691 365.68 349.562C364.827 352.62 363.366 353.947 361 356C361.142 353.916 361.288 351.833 361.438 349.75C361.519 348.59 361.6 347.43 361.684 346.234C362.325 339.675 362.325 339.675 364 338Z" fill="#D8D8D8"/>
<path d="M372 322C372.66 322.66 373.32 323.32 374 324C373.67 324.33 373.34 324.66 373 325C372.767 326.682 372.587 328.371 372.438 330.062C372.312 331.441 372.312 331.441 372.184 332.848C372.123 333.558 372.062 334.268 372 335C371.01 335.33 370.02 335.66 369 336C368.162 331.345 367.984 327.629 369 323C369.99 322.67 370.98 322.34 372 322Z" fill="#BCBABC"/>
<path d="M304 468C306.491 471.737 306.207 473.745 306.125 478.188C306.107 479.46 306.089 480.732 306.07 482.043C306.036 483.507 306.036 483.507 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C302.02 487 300.04 487 298 487C298 486.34 298 485.68 298 485C299.65 485 301.3 485 303 485C303.33 479.39 303.66 473.78 304 468Z" fill="#691D69"/>
<path d="M205 459C205.33 459 205.66 459 206 459C206.33 461.31 206.66 463.62 207 466C209.31 466.66 211.62 467.32 214 468C213.67 468.99 213.34 469.98 213 471C209.625 471.125 209.625 471.125 206 471C204 469 204 469 203.77 466.871C203.791 465.666 203.791 465.666 203.812 464.438C203.819 463.632 203.825 462.826 203.832 461.996C204 460 204 460 205 459Z" fill="#92039A"/>
<path d="M248 302C248.33 302 248.66 302 249 302C248.887 304.313 248.759 306.626 248.625 308.938C248.555 310.225 248.486 311.513 248.414 312.84C248.277 313.883 248.141 314.926 248 316C247.01 316.495 247.01 316.495 246 317C246 316.34 246 315.68 246 315C245.34 315 244.68 315 244 315C243.67 315.66 243.34 316.32 243 317C242.645 313.185 242.618 311.518 244.937 308.375C245.618 307.591 246.299 306.808 247 306C247.778 303.818 247.778 303.818 248 302Z" fill="#C0C0C0"/>
<path d="M603 273C609.75 272.875 609.75 272.875 612 274C612.625 276.562 612.625 276.562 613 279C614.32 279.33 615.64 279.66 617 280C617.33 282.64 617.66 285.28 618 288C617.34 288 616.68 288 616 288C615.938 287.072 615.876 286.144 615.812 285.188C615.332 281.806 615.332 281.806 612.438 280.312C611.633 279.879 610.829 279.446 610 279C610 278.01 610 277.02 610 276C609.031 275.876 608.061 275.752 607.062 275.625C606.052 275.419 605.041 275.213 604 275C603.67 274.34 603.34 273.68 603 273Z" fill="#49055D"/>
<path d="M385 214C385.33 214 385.66 214 386 214C385.939 214.681 385.879 215.361 385.816 216.062C385.07 224.701 384.516 233.345 384 242C383.01 242.33 382.02 242.66 381 243C381.281 239.666 381.577 236.333 381.875 233C381.954 232.065 382.032 231.131 382.113 230.168C382.621 224.586 383.485 219.398 385 214Z" fill="#CCCCCA"/>
<path d="M374 483C378.95 483 383.9 483 389 483C389 483.66 389 484.32 389 485C385.523 487.143 382.788 487.213 378.75 487.125C377.672 487.107 376.595 487.089 375.484 487.07C374.665 487.047 373.845 487.024 373 487C373.33 485.68 373.66 484.36 374 483Z" fill="#C4C3C5"/>
<path d="M168 249C169.65 249.33 171.3 249.66 173 250C172.328 253.806 171.273 257.352 170 261C169.01 261 168.02 261 167 261C167.33 257.04 167.66 253.08 168 249Z" fill="#B3AFB2"/>
<path d="M171 204C172.418 208.255 172.351 212.57 172.518 217.02C172.718 221.072 173.226 224.337 175 228C173.062 227.688 173.062 227.688 171 227C170.067 224.201 169.871 222.48 169.867 219.586C169.866 218.743 169.865 217.9 169.863 217.031C169.867 216.155 169.871 215.278 169.875 214.375C169.871 213.491 169.867 212.606 169.863 211.695C169.865 210.855 169.866 210.014 169.867 209.148C169.868 208.377 169.869 207.605 169.871 206.81C170 205 170 205 171 204Z" fill="#E3E4E3"/>
<path d="M284 452C285.98 452 287.96 452 290 452C290 452.66 290 453.32 290 454C288.68 454 287.36 454 286 454C286 455.65 286 457.3 286 459C288.64 459 291.28 459 294 459C294.33 459.66 294.66 460.32 295 461C291.37 461 287.74 461 284 461C284 458.03 284 455.06 284 452Z" fill="#74277A"/>
<path d="M415 316C417.625 315.812 417.625 315.812 420 316C419.67 316.99 419.34 317.98 419 319C418.01 319 417.02 319 416 319C414.211 322.961 413.35 326.862 412.562 331.109C412.284 332.045 412.284 332.045 412 333C411.34 333.33 410.68 333.66 410 334C411.615 321.077 411.615 321.077 415 316Z" fill="#520164"/>
<path d="M380 245C382.515 250.031 379.71 257.666 378.477 262.914C377.865 265.592 377.417 268.286 377 271C376.67 271 376.34 271 376 271C375.618 262.225 376.213 254.376 379 246C379.33 245.67 379.66 245.34 380 245Z" fill="#D3D3D3"/>
<path d="M158 313C159.98 313.495 159.98 313.495 162 314C161.939 315.418 161.85 316.834 161.75 318.25C161.704 319.039 161.657 319.828 161.609 320.641C161 323 161 323 157 327C157.33 322.38 157.66 317.76 158 313Z" fill="#B7AFB8"/>
<path d="M229 452C229.66 452 230.32 452 231 452C231.33 453.98 231.66 455.96 232 458C231.34 458 230.68 458 230 458C230 457.01 230 456.02 230 455C222.08 455.33 214.16 455.66 206 456C206.33 455.34 206.66 454.68 207 454C214.26 454 221.52 454 229 454C229 453.34 229 452.68 229 452Z" fill="#8B188E"/>
<path d="M175 266C176.04 269.381 176.157 272.474 176 276C175.67 276.33 175.34 276.66 175 277C174.719 279.32 174.552 281.639 174.379 283.969C174.254 284.639 174.129 285.309 174 286C173.34 286.33 172.68 286.66 172 287C172.114 284.249 172.241 281.5 172.375 278.75C172.406 277.973 172.437 277.195 172.469 276.395C172.834 269.276 172.834 269.276 175 266Z" fill="#E7E6E6"/>
<path d="M285 362C287.394 364.394 287.296 365.038 287.312 368.312C287.235 372.302 286.565 374.82 284 378C283.67 378 283.34 378 283 378C282.76 372.367 283.615 367.455 285 362Z" fill="#E3E5E6"/>
<path d="M439 318C436.18 320.82 433.289 320.53 429.5 320.75C428.81 320.805 428.121 320.861 427.41 320.918C425.61 321.034 423.803 321.025 422 321C421.34 320.34 420.68 319.68 420 319C424.05 314.95 434.004 317.413 439 318Z" fill="#56026A"/>
<path d="M377 245C377.33 245 377.66 245 378 245C378.266 251.95 377.612 258.235 376 265C374 263 374 263 373.953 260.137C374.051 258.998 374.149 257.86 374.25 256.688C374.381 254.992 374.381 254.992 374.516 253.262C374.97 250.203 375.719 247.799 377 245Z" fill="#E3E3E1"/>
<path d="M547 233C550.588 234.333 553.836 235.831 557 238C557 238.66 557 239.32 557 240C556.34 240 555.68 240 555 240C555 240.66 555 241.32 555 242C554.01 242 553.02 242 552 242C551.67 241.01 551.34 240.02 551 239C549 237.791 549 237.791 547 237C547 235.68 547 234.36 547 233Z" fill="#410950"/>
<path d="M649 185C649.66 185.33 650.32 185.66 651 186C650.86 187.646 650.713 189.292 650.562 190.938C650.481 191.854 650.4 192.771 650.316 193.715C650 196 650 196 649 197C648.632 199.328 648.298 201.662 648 204C647.34 203.34 646.68 202.68 646 202C646.406 196.208 647.656 190.639 649 185Z" fill="#470D59"/>
<path d="M284 378C286 384 286 384 284.687 386.938C284.131 387.948 283.574 388.959 283 390C282.329 391.331 281.661 392.664 281 394C280.627 383.327 280.627 383.327 283 379C283.33 378.67 283.66 378.34 284 378Z" fill="#DEDFDE"/>
<path d="M244 288C244.66 288 245.32 288 246 288C245.462 293.691 244.86 299.349 244 305C241.836 301.754 241.624 300.757 242 297C242.66 296.01 243.32 295.02 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288Z" fill="#DCDEDC"/>
<path d="M424 257C431.251 259.273 431.251 259.273 434.062 262C435 264 435 264 434 267C433.67 266.01 433.34 265.02 433 264C431.108 263.319 431.108 263.319 429 263C428.01 262.67 427.02 262.34 426 262C424.812 259.438 424.812 259.438 424 257Z" fill="#501561"/>
<path d="M456 403C456.99 403.33 457.98 403.66 459 404C459.054 406.104 459.093 408.208 459.125 410.312C459.148 411.484 459.171 412.656 459.195 413.863C459 417 459 417 457 420C456.67 414.39 456.34 408.78 456 403Z" fill="#510666"/>
<path d="M286 454C289.024 454.588 292.018 455.227 295 456C294.67 456.99 294.34 457.98 294 459C291.36 459 288.72 459 286 459C286 457.35 286 455.7 286 454Z" fill="#92249D"/>
<path d="M238 339C240 341 240 341 240.125 343.938C240.084 344.948 240.043 345.959 240 347C240 347.99 240 348.98 240 350C238 351.688 238 351.688 236 353C236.141 351.041 236.288 349.083 236.438 347.125C236.519 346.034 236.6 344.944 236.684 343.82C237 341 237 341 238 339Z" fill="#CECECE"/>
<path d="M432 196C432.33 196 432.66 196 433 196C433.307 205.205 432.362 214.354 429 223C428.67 223 428.34 223 428 223C427.825 218.721 428.111 215.249 429.422 211.176C430.739 206.22 431.283 201.071 432 196Z" fill="#540568"/>
<path d="M476 483C478.31 483 480.62 483 483 483C483 483.66 483 484.32 483 485C484.32 485.33 485.64 485.66 487 486C486 487 486 487 483.715 487.098C482.34 487.08 482.34 487.08 480.938 487.062C480.018 487.053 479.099 487.044 478.152 487.035C477.442 487.024 476.732 487.012 476 487C476 485.68 476 484.36 476 483Z" fill="#CAC9CB"/>
<path d="M612 388C612.33 388 612.66 388 613 388C613.177 392.602 613.108 394.784 611 399C606.05 399 601.1 399 596 399C596 398.67 596 398.34 596 398C597.373 397.961 597.373 397.961 598.773 397.922C599.962 397.865 601.15 397.808 602.375 397.75C603.558 397.704 604.742 397.657 605.961 397.609C609.074 397.34 609.074 397.34 610.375 395.125C611.069 392.765 611.596 390.427 612 388Z" fill="#62057A"/>
<path d="M153 358C154.401 362.202 153.766 365.333 151.938 369.312C151.628 369.869 151.319 370.426 151 371C150.67 371 150.34 371 150 371C149.848 361.88 149.848 361.88 151 359C151.66 358.67 152.32 358.34 153 358Z" fill="#B5AEB5"/>
<path d="M169 275C169.33 275 169.66 275 170 275C170.484 282.897 168.677 290.335 167 298C166.34 297.67 165.68 297.34 165 297C165.133 296.357 165.266 295.714 165.402 295.051C166.175 291.105 166.869 287.148 167.562 283.188C167.701 282.399 167.84 281.611 167.982 280.799C168.322 278.866 168.661 276.933 169 275Z" fill="#C9C8C7"/>
<path d="M300 241C300.66 241.66 301.32 242.32 302 243C301.609 246.004 301.609 246.004 300.75 249.562C300.477 250.739 300.203 251.916 299.922 253.129C299.618 254.076 299.313 255.024 299 256C298.01 256.495 298.01 256.495 297 257C297.114 254.895 297.242 252.791 297.375 250.688C297.445 249.516 297.514 248.344 297.586 247.137C298 244 298 244 300 241Z" fill="#BDBCBD"/>
<path d="M167 222C167.66 222 168.32 222 169 222C169.33 223.32 169.66 224.64 170 226C171.32 226.33 172.64 226.66 174 227C174.33 229.64 174.66 232.28 175 235C174.01 235.33 173.02 235.66 172 236C172 233.36 172 230.72 172 228C170.35 227.67 168.7 227.34 167 227C167 225.35 167 223.7 167 222Z" fill="#CBCCCC"/>
<path d="M433 171C435 173 435 173 435.266 175.242C435.26 176.111 435.255 176.98 435.25 177.875C435.255 178.739 435.26 179.602 435.266 180.492C434.989 183.105 434.319 184.75 433 187C432.67 187 432.34 187 432 187C432.33 181.72 432.66 176.44 433 171Z" fill="#4F0E5E"/>
<path d="M466 458C473.429 457.857 473.429 457.857 477 459C477.381 460.991 477.713 462.993 478 465C477 466 477 466 474.438 466.063C473.633 466.042 472.829 466.021 472 466C473.32 465.67 474.64 465.34 476 465C476 464.01 476 463.02 476 462C475.34 462 474.68 462 474 462C474 461.34 474 460.68 474 460C471.36 459.67 468.72 459.34 466 459C466 458.67 466 458.34 466 458Z" fill="#B2B0AF"/>
<path d="M158 327C159.125 328.688 159.125 328.688 160 331C159.312 333.688 159.312 333.688 158 336C157.01 336.33 156.02 336.66 155 337C154.707 330.945 154.707 330.945 155 329C155.99 328.34 156.98 327.68 158 327Z" fill="#BEB3BD"/>
<path d="M167 199C168.481 202.851 167.383 205.235 166 209C165.639 210.661 165.295 212.326 165 214C164.67 214 164.34 214 164 214C161.571 206.571 161.571 206.571 163 203C163.66 203.33 164.32 203.66 165 204C165.66 202.35 166.32 200.7 167 199Z" fill="#BBB6BB"/>
<path d="M231 452C231.99 452 232.98 452 234 452C234 454.97 234 457.94 234 461C232.35 461.33 230.7 461.66 229 462C229.33 460.68 229.66 459.36 230 458C230.66 458 231.32 458 232 458C231.67 456.02 231.34 454.04 231 452Z" fill="#602562"/>
<path d="M371 314C371.33 314 371.66 314 372 314C372.66 316.97 373.32 319.94 374 323C372.35 323 370.7 323 369 323C368.67 323.99 368.34 324.98 368 326C368.115 324.562 368.242 323.124 368.375 321.688C368.445 320.887 368.514 320.086 368.586 319.262C369 317 369 317 371 314Z" fill="#CCCACC"/>
<path d="M378 275C378.66 275 379.32 275 380 275C380.125 277.875 380.125 277.875 380 281C377.861 283.139 376.867 283.427 374 284C374.645 280.517 375.982 277.906 378 275Z" fill="#BEBDBE"/>
<path d="M250 255C250.33 255 250.66 255 251 255C251 258.63 251 262.26 251 266C250.34 266 249.68 266 249 266C249.33 266.99 249.66 267.98 250 269C249.722 271.341 249.395 273.676 249 276C248.67 276 248.34 276 248 276C247.34 273.36 246.68 270.72 246 268C246.66 268 247.32 268 248 268C248.738 263.676 249.392 259.345 250 255Z" fill="#D8D9D8"/>
<path d="M565 245C565.66 245 566.32 245 567 245C567 245.66 567 246.32 567 247C567.897 247.217 567.897 247.217 568.812 247.438C570.562 247.887 572.287 248.429 574 249C573.34 250.32 572.68 251.64 572 253C569.625 252.375 569.625 252.375 567 251C565.688 247.875 565.688 247.875 565 245Z" fill="#3B0B49"/>
<path d="M176 236C178.36 238.36 178.491 239.779 179 243C177.515 243.99 177.515 243.99 176 245C176 242.03 176 239.06 176 236ZM175 245C175.33 245 175.66 245 176 245C176.054 246.604 176.093 248.208 176.125 249.812C176.148 250.706 176.171 251.599 176.195 252.52C176 255 176 255 174 258C173.973 256.021 173.954 254.042 173.938 252.062C173.926 250.96 173.914 249.858 173.902 248.723C174 246 174 246 175 245Z" fill="#D6D7D5"/>
<path d="M202 470C202.562 470.321 203.123 470.643 203.702 470.974C206.219 472.098 208.023 472.309 210.766 472.414C212.1 472.472 212.1 472.472 213.461 472.531C214.381 472.562 215.302 472.593 216.25 472.625C217.654 472.683 217.654 472.683 219.086 472.742C221.39 472.836 223.695 472.922 226 473C226 473.33 226 473.66 226 474C222.563 474.029 219.125 474.047 215.688 474.062C214.223 474.075 214.223 474.075 212.729 474.088C211.791 474.091 210.853 474.094 209.887 474.098C209.023 474.103 208.159 474.108 207.268 474.114C205 474 205 474 202 473C202 472.01 202 471.02 202 470Z" fill="#671F69"/>
<path d="M390 204C390.66 204.66 391.32 205.32 392 206C391.758 209.039 391.758 209.039 391.125 212.625C390.921 213.814 390.718 215.002 390.508 216.227C390.34 217.142 390.173 218.057 390 219C389.67 219 389.34 219 389 219C389 217.02 389 215.04 389 213C388.01 212.67 387.02 212.34 386 212C387.32 209.36 388.64 206.72 390 204Z" fill="#B3B0B1"/>
<path d="M390 178C390.33 179.32 390.66 180.64 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C395.75 181.875 395.75 181.875 395 184C393.062 185.125 393.062 185.125 391 186C390.34 186.66 389.68 187.32 389 188C388.875 181.375 388.875 181.375 390 178Z" fill="#C9C9C9"/>
<path d="M486 423C486.99 423.33 487.98 423.66 489 424C489 424.66 489 425.32 489 426C484.38 426 479.76 426 475 426C475 425.34 475 424.68 475 424C475.71 424.012 476.421 424.023 477.152 424.035C478.071 424.044 478.991 424.053 479.938 424.062C481.312 424.08 481.312 424.08 482.715 424.098C484.966 424.259 484.966 424.259 486 423Z" fill="#6C1C81"/>
<path d="M259 234C259.33 234 259.66 234 260 234C259.913 235.959 259.805 237.917 259.688 239.875C259.629 240.966 259.571 242.056 259.512 243.18C259.343 244.11 259.174 245.041 259 246C257.515 246.99 257.515 246.99 256 248C256 245.607 256.115 243.371 256.375 241C256.445 240.319 256.514 239.639 256.586 238.938C257 237 257 237 259 234Z" fill="#BEB8BF"/>
<path d="M644 205C644.33 205 644.66 205 645 205C644.65 213.35 644.65 213.35 641.938 216.062C641.298 216.372 640.659 216.681 640 217C640 214.69 640 212.38 640 210C640.66 210 641.32 210 642 210C642.66 208.35 643.32 206.7 644 205Z" fill="#5D0471"/>
<path d="M651 159C653.331 162.496 653.703 164.841 654 169C653.01 170.485 653.01 170.485 652 172C652 171.01 652 170.02 652 169C651.34 169 650.68 169 650 169C650.33 165.7 650.66 162.4 651 159Z" fill="#4F0A5E"/>
<path d="M453 483C454.98 483 456.96 483 459 483C459 484.32 459 485.64 459 487C456.36 487 453.72 487 451 487C451 486.34 451 485.68 451 485C451.66 485 452.32 485 453 485C453 484.34 453 483.68 453 483Z" fill="#C6C6C7"/>
<path d="M279 463C279.66 463 280.32 463 281 463C283.473 465.473 283.983 466.708 284.188 470.25C284.126 471.158 284.064 472.065 284 473C283.01 473.33 282.02 473.66 281 474C281.33 472.35 281.66 470.7 282 469C281.34 469 280.68 469 280 469C279.67 467.02 279.34 465.04 279 463Z" fill="#2F0439"/>
<path d="M544 423C544.99 423.66 545.98 424.32 547 425C546 426 546 426 542.402 426.098C540.914 426.091 539.426 426.079 537.938 426.062C537.179 426.058 536.42 426.053 535.639 426.049C533.759 426.037 531.88 426.019 530 426C530.33 425.34 530.66 424.68 531 424C531.687 424.012 532.374 424.023 533.082 424.035C533.983 424.044 534.884 424.053 535.812 424.062C537.152 424.08 537.152 424.08 538.52 424.098C541.134 424.11 541.134 424.11 544 423Z" fill="#590562"/>
<path d="M360 387C360.99 387.99 361.98 388.98 363 390C361.68 392.64 360.36 395.28 359 398C358.01 397.67 357.02 397.34 356 397C356 396.34 356 395.68 356 395C356.66 395 357.32 395 358 395C358 393.68 358 392.36 358 391C358.66 391 359.32 391 360 391C360 389.68 360 388.36 360 387Z" fill="#CCB5CF"/>
<path d="M516 315C518.475 315.495 518.475 315.495 521 316C521 316.99 521 317.98 521 319C522.32 319.33 523.64 319.66 525 320C525 320.66 525 321.32 525 322C523.35 322 521.7 322 520 322C520 321.34 520 320.68 520 320C519.34 320 518.68 320 518 320C517.34 318.35 516.68 316.7 516 315Z" fill="#600A79"/>
<path d="M160 304C160.99 304 161.98 304 163 304C164.108 307.325 163.845 309.622 163 313C161.68 312.67 160.36 312.34 159 312C159.33 309.36 159.66 306.72 160 304Z" fill="#BBB6BA"/>
<path d="M426 221C426.66 221 427.32 221 428 221C427.913 222.626 427.805 224.251 427.688 225.875C427.629 226.78 427.571 227.685 427.512 228.617C427 231 427 231 424 233C424.14 231.187 424.287 229.375 424.438 227.562C424.519 226.553 424.6 225.544 424.684 224.504C425 222 425 222 426 221Z" fill="#420A59"/>
<path d="M588 128C589.458 127.973 590.917 127.954 592.375 127.938C593.187 127.926 593.999 127.914 594.836 127.902C597 128 597 128 599 129C598.67 129.99 598.34 130.98 598 132C594.37 131.34 590.74 130.68 587 130C587.33 129.34 587.66 128.68 588 128Z" fill="#3B0F46"/>
<path d="M204 479C204.99 479.33 205.98 479.66 207 480C206.01 481.65 205.02 483.3 204 485C204.928 484.794 205.856 484.588 206.812 484.375C210 484 210 484 213 486C209.37 486 205.74 486 202 486C201.67 485.34 201.34 484.68 201 484C202.438 481.375 202.438 481.375 204 479Z" fill="#87158B"/>
<path d="M566 467C566.66 467 567.32 467 568 467C568 468.98 568 470.96 568 473C564.37 472.67 560.74 472.34 557 472C557 471.67 557 471.34 557 471C559.64 471 562.28 471 565 471C565.33 469.68 565.66 468.36 566 467Z" fill="#C5C5C7"/>
<path d="M409 333C409.66 333.99 410.32 334.98 411 336C410.382 337.316 409.756 338.628 409.125 339.938C408.777 340.668 408.429 341.399 408.07 342.152C407 344 407 344 405 345C405.281 343.186 405.575 341.374 405.875 339.562C406.037 338.553 406.2 337.544 406.367 336.504C406.576 335.678 406.785 334.851 407 334C407.66 333.67 408.32 333.34 409 333Z" fill="#430A4F"/>
<path d="M167 321C167.66 321.99 168.32 322.98 169 324C167.667 326.667 166.333 329.333 165 332C164.34 331.67 163.68 331.34 163 331C163.565 327.042 164.809 324.334 167 321Z" fill="#E3E4E3"/>
<path d="M169 262C170.089 264.831 169.961 266.165 169.25 269.188C168.838 270.116 168.425 271.044 168 272C167.01 272.33 166.02 272.66 165 273C165.33 270.36 165.66 267.72 166 265C166.66 265 167.32 265 168 265C168.33 264.01 168.66 263.02 169 262Z" fill="#B8B3B8"/>
<path d="M386 213C386.99 213 387.98 213 389 213C389 215.64 389 218.28 389 221C387.68 221.33 386.36 221.66 385 222C385.33 219.03 385.66 216.06 386 213Z" fill="#C4C3C3"/>
<path d="M235 354C236.98 354.99 236.98 354.99 239 356C238.475 360.617 237.925 362.1 235 366C235 362.04 235 358.08 235 354Z" fill="#CACAC9"/>
<path d="M513 309C513.33 310.32 513.66 311.64 514 313C514.66 313 515.32 313 516 313C516 313.66 516 314.32 516 315C513.03 314.67 510.06 314.34 507 314C507 313.01 507 312.02 507 311C508.207 310.783 508.207 310.783 509.438 310.562C511.921 310.259 511.921 310.259 513 309Z" fill="#620A7A"/>
<path d="M630 288C630.99 288 631.98 288 633 288C633 291.63 633 295.26 633 299C632.01 299 631.02 299 630 299C630 295.37 630 291.74 630 288Z" fill="#450B58"/>
<path d="M443 271C449.523 271.615 449.523 271.615 451.938 273.562C452.288 274.037 452.639 274.511 453 275C452.67 275.99 452.34 276.98 452 278C450.242 276.991 448.484 275.982 446.727 274.973C445.502 274.283 444.257 273.629 443 273C443 272.34 443 271.68 443 271Z" fill="#4F145D"/>
<path d="M439 265C441.75 264.688 441.75 264.688 445 265C447.375 267.5 447.375 267.5 449 270C448.67 270.66 448.34 271.32 448 272C447.608 271.526 447.216 271.051 446.812 270.562C444.592 268.648 442.866 268.387 440 268C439.67 267.01 439.34 266.02 439 265Z" fill="#62077B"/>
<path d="M580 255C583.588 256.333 586.836 257.831 590 260C590 260.66 590 261.32 590 262C588.35 262 586.7 262 585 262C584.67 261.01 584.34 260.02 584 259C582 257.791 582 257.791 580 257C580 256.34 580 255.68 580 255Z" fill="#380D45"/>
<path d="M204 452C205.98 452 207.96 452 210 452C210 452.66 210 453.32 210 454C204.375 457 204.375 457 201 457C201.33 456.01 201.66 455.02 202 454C202.66 454 203.32 454 204 454C204 453.34 204 452.68 204 452Z" fill="#7D2784"/>
<path d="M271 397C273 399 273 399 273 402C274.98 402 276.96 402 279 402C279.33 402.66 279.66 403.32 280 404C277.03 404 274.06 404 271 404C271 401.69 271 399.38 271 397Z" fill="#949194"/>
<path d="M273 393C273.66 393 274.32 393 275 393C275.701 396.153 276 398.727 276 402C275.01 402 274.02 402 273 402C272.155 398.622 271.892 396.325 273 393Z" fill="#ACABAF"/>
<path d="M232 385C232.66 385.66 233.32 386.32 234 387C233.639 390.489 231.859 393.09 230 396C228.864 392.591 229.133 391.997 230.437 388.812C230.725 388.097 231.012 387.382 231.309 386.645C231.537 386.102 231.765 385.559 232 385Z" fill="#CBCBCB"/>
<path d="M259 231C259.33 231.99 259.66 232.98 260 234C259.004 235.824 259.004 235.824 257.563 237.688C257.089 238.31 256.616 238.933 256.129 239.574C255.756 240.045 255.384 240.515 255 241C254.066 237.99 253.956 237.133 255 234C257.063 232.312 257.063 232.312 259 231Z" fill="#CECDD0"/>
<path d="M587 228C589.97 228 592.94 228 596 228C596 228.99 596 229.98 596 231C592.7 231 589.4 231 586 231C586.33 230.01 586.66 229.02 587 228Z" fill="#5E0A76"/>
<path d="M305 459C305.99 459 306.98 459 308 459C308 459.66 308 460.32 308 461C307.34 461 306.68 461 306 461C306 464.3 306 467.6 306 471C303.305 466.958 303.768 464.795 304 460C304.33 459.67 304.66 459.34 305 459Z" fill="#771B78"/>
<path d="M315 454C315 455.32 315 456.64 315 458C312.69 458 310.38 458 308 458C308 457.01 308 456.02 308 455C310.491 454.313 312.379 454 315 454Z" fill="#9922A1"/>
<path d="M366 308C368 310 368 310 368.047 312.094C367.949 312.888 367.851 313.682 367.75 314.5C367.662 315.294 367.575 316.088 367.484 316.906C367 319 367 319 365 321C364.973 319.396 364.954 317.792 364.938 316.188C364.926 315.294 364.914 314.401 364.902 313.48C365 311 365 311 366 308Z" fill="#E5E3E4"/>
<path d="M166 272C166.33 272 166.66 272 167 272C167.293 278.055 167.293 278.055 167 280C165.515 280.99 165.515 280.99 164 282C163.805 275.945 163.805 275.945 164 274C164.66 273.34 165.32 272.68 166 272Z" fill="#ACA5AC"/>
<path d="M553 403C553.99 403 554.98 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.876 408.804 553.752 409.609 553.625 410.438C553.419 411.283 553.213 412.129 553 413C552.01 413.495 552.01 413.495 551 414C551.66 410.37 552.32 406.74 553 403Z" fill="#541065"/>
<path d="M247 279C249 281 249 281 249.047 283.129C248.9 284.334 248.9 284.334 248.75 285.562C248.662 286.368 248.575 287.174 248.484 288.004C248.325 288.663 248.165 289.321 248 290C247.01 290.495 247.01 290.495 246 291C245.918 286.839 246.018 283.053 247 279Z" fill="#D0CFD1"/>
<path d="M592 145C593.32 145.33 594.64 145.66 596 146C596 147.32 596 148.64 596 150C596.99 150 597.98 150 599 150C599 150.66 599 151.32 599 152C597.35 152 595.7 152 594 152C594 150.68 594 149.36 594 148C593.34 148 592.68 148 592 148C592 147.01 592 146.02 592 145Z" fill="#530E66"/>
<path d="M585 131C587.475 131.495 587.475 131.495 590 132C590 135.63 590 139.26 590 143C589.67 143 589.34 143 589 143C588.856 141.907 588.711 140.814 588.562 139.688C588.117 136.069 588.117 136.069 587 133C586.34 133 585.68 133 585 133C585 132.34 585 131.68 585 131Z" fill="#530167"/>
<path d="M201 477C202.98 477.495 202.98 477.495 205 478C204.01 479.98 203.02 481.96 202 484C201.34 484 200.68 484 200 484C200.33 481.69 200.66 479.38 201 477Z" fill="#742179"/>
<path d="M238 359C240 361 240 361 240.125 364.625C240.084 365.739 240.043 366.852 240 368C238.68 367.34 237.36 366.68 236 366C236.66 363.69 237.32 361.38 238 359Z" fill="#BFBDBF"/>
<path d="M374 310C374.33 310 374.66 310 375 310C374.67 313.63 374.34 317.26 374 321C373.34 320.67 372.68 320.34 372 320C371.75 313.375 371.75 313.375 374 310Z" fill="#BCBABC"/>
<path d="M164 292C164 294.97 164 297.94 164 301C163.01 301 162.02 301 161 301C161 298.36 161 295.72 161 293C163 292 163 292 164 292Z" fill="#B6AFB3"/>
<path d="M438 268C441.312 267.75 441.312 267.75 445 268C446.938 270 446.938 270 448 272C446.519 271.719 445.04 271.425 443.562 271.125C442.739 270.963 441.915 270.8 441.066 270.633C440.384 270.424 439.703 270.215 439 270C438.67 269.34 438.34 268.68 438 268Z" fill="#5A1168"/>
<path d="M255 250C255.99 250 256.98 250 258 250C258.188 252.375 258.188 252.375 258 255C256.515 255.99 256.515 255.99 255 257C254.619 255.009 254.287 253.007 254 251C254.33 250.67 254.66 250.34 255 250Z" fill="#B2ACBF"/>
<path d="M536 226C538.954 227.372 541.44 228.989 544 231C543.67 231.66 543.34 232.32 543 233C541.68 232.34 540.36 231.68 539 231C539 230.34 539 229.68 539 229C538.01 229 537.02 229 536 229C536 228.01 536 227.02 536 226Z" fill="#460D52"/>
<path d="M619 225C622.3 225.33 625.6 225.66 629 226C629 226.99 629 227.98 629 229C625.7 228.34 622.4 227.68 619 227C619 226.34 619 225.68 619 225Z" fill="#6A0684"/>
<path d="M435 177C435.33 177.66 435.66 178.32 436 179C436.66 179 437.32 179 438 179C436.125 184.75 436.125 184.75 435 187C434.34 186.67 433.68 186.34 433 186C433.66 183.03 434.32 180.06 435 177ZM431 187C433 188 433 188 433 188L431 187Z" fill="#540568"/>
<path d="M303 482C303.99 482 304.98 482 306 482C306 482.99 306 483.98 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C302.02 487 300.04 487 298 487C298 486.34 298 485.68 298 485C299.65 485 301.3 485 303 485C303 484.01 303 483.02 303 482Z" fill="#6E1772"/>
<path d="M482 466C482.66 466 483.32 466 484 466C484.688 467.812 484.688 467.812 485 470C483.562 471.75 483.562 471.75 482 473C481.34 471.68 480.68 470.36 480 469C480.66 468.01 481.32 467.02 482 466Z" fill="#C6C4C6"/>
<path d="M279 389C279.33 389 279.66 389 280 389C280.66 393.29 281.32 397.58 282 402C281.01 402 280.02 402 279 402C279 397.71 279 393.42 279 389Z" fill="#D0CECE"/>
<path d="M152 392C155 394 155 394 155.687 397.125C155.842 398.548 155.842 398.548 156 400C155.01 400.495 155.01 400.495 154 401C152.142 397.865 151.799 395.625 152 392Z" fill="#D1D5CF"/>
<path d="M623 352C623.66 352 624.32 352 625 352C624.34 354.97 623.68 357.94 623 361C621 358 621 358 621.313 355.375C622 353 622 353 623 352Z" fill="#4C0C53"/>
<path d="M499 304C501.97 304 504.94 304 508 304C507.67 305.65 507.34 307.3 507 309C504.36 307.68 501.72 306.36 499 305C499 304.67 499 304.34 499 304Z" fill="#670681"/>
<path d="M423 249C423.66 249.66 424.32 250.32 425 251C424.967 253.729 424.436 256.297 424 259C423.01 258.67 422.02 258.34 421 258C421.875 250.125 421.875 250.125 423 249Z" fill="#4C0C5B"/>
<path d="M543 240C548.373 239.648 548.373 239.648 551 240C553 242 553 242 554 244C552.54 243.718 551.082 243.424 549.625 243.125C548.813 242.963 548.001 242.8 547.164 242.633C545 242 545 242 543 240Z" fill="#5A036E"/>
<path d="M650 169C650.66 169 651.32 169 652 169C652.33 170.65 652.66 172.3 653 174C651.02 174.99 651.02 174.99 649 176C648.375 173.625 648.375 173.625 648 171C648.66 170.34 649.32 169.68 650 169Z" fill="#5D056E"/>
<path d="M502 137C502.33 137 502.66 137 503 137C503.178 141.548 502.998 144.879 501 149C500.67 149 500.34 149 500 149C499.822 144.452 500.002 141.121 502 137Z" fill="#4F0564"/>
<path d="M566 477C567.32 477 568.64 477 570 477C570 479.64 570 482.28 570 485C569.34 485 568.68 485 568 485C568 483.02 568 481.04 568 479C567.34 479 566.68 479 566 479C566 478.34 566 477.68 566 477Z" fill="#B6B6BA"/>
<path d="M294 459C295.98 459.99 295.98 459.99 298 461C298 463.31 298 465.62 298 468C297.01 468.495 297.01 468.495 296 469C295.34 465.7 294.68 462.4 294 459Z" fill="#6C166E"/>
<path d="M308 458C310.31 458 312.62 458 315 458C314.67 458.99 314.34 459.98 314 461C312.02 461 310.04 461 308 461C308 460.01 308 459.02 308 458Z" fill="#7E2A83"/>
<path d="M284 452C285.98 452 287.96 452 290 452C290 452.66 290 453.32 290 454C288.68 454 287.36 454 286 454C286 455.32 286 456.64 286 458C285.34 458 284.68 458 284 458C284 456.02 284 454.04 284 452Z" fill="#803289"/>
<path d="M535 452C536.65 452 538.3 452 540 452C538.63 455.161 538.011 455.993 535 458C535 456.02 535 454.04 535 452Z" fill="#C3C2C3"/>
<path d="M295 268C296.202 271.974 295.637 274.152 294 278C292.375 279.875 292.375 279.875 291 281C291.72 276.391 293.313 272.328 295 268Z" fill="#B6B5B5"/>
<path d="M171 233C172.32 233.66 173.64 234.32 175 235C174.67 236.65 174.34 238.3 174 240C172.68 239.67 171.36 239.34 170 239C170.33 237.02 170.66 235.04 171 233Z" fill="#BBB6BA"/>
<path d="M643 227C644.125 230.75 644.125 230.75 643 233C640.125 233.125 640.125 233.125 637 233C636.34 232.34 635.68 231.68 635 231C637.64 230.67 640.28 230.34 643 230C643 229.01 643 228.02 643 227Z" fill="#43094E"/>
<path d="M390 172C391.188 173.625 391.188 173.625 392 176C390.625 179.25 390.625 179.25 389 182C387.893 178.678 388.149 177.317 389 174C389.33 173.34 389.66 172.68 390 172Z" fill="#DADAD9"/>
<path d="M615 397C615.66 397 616.32 397 617 397C617 398.32 617 399.64 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C613.68 402.67 612.36 402.34 611 402C611.66 402 612.32 402 613 402C613.217 401.041 613.217 401.041 613.438 400.062C614 398 614 398 615 397Z" fill="#300F38"/>
<path d="M228 388C228.688 389.75 228.688 389.75 229 392C227.562 394.25 227.562 394.25 226 396C225.34 395.67 224.68 395.34 224 395C225.32 392.69 226.64 390.38 228 388Z" fill="#E5E4E5"/>
<path d="M243 319C244.32 319.99 245.64 320.98 247 322C246.67 322.99 246.34 323.98 246 325C245.01 325 244.02 325 243 325C242.618 323.344 242.286 321.675 242 320C242.33 319.67 242.66 319.34 243 319Z" fill="#B8B6B6"/>
<path d="M372 297C373.125 298.625 373.125 298.625 374 301C373.125 304.25 373.125 304.25 372 307C370.875 305.375 370.875 305.375 370 303C370.875 299.75 370.875 299.75 372 297Z" fill="#CDCDCD"/>
<path d="M168 174C169.125 175.75 169.125 175.75 170 178C169.125 180.25 169.125 180.25 168 182C167.34 182 166.68 182 166 182C166.875 175.125 166.875 175.125 168 174Z" fill="#B19EB6"/>
<path d="M537 483C539.31 483 541.62 483 544 483C544 483.66 544 484.32 544 485C541.36 485.66 538.72 486.32 536 487C536.33 485.68 536.66 484.36 537 483Z" fill="#C4C5C4"/>
<path d="M417 312C418.65 312.33 420.3 312.66 422 313C420.812 315 420.812 315 419 317C416.312 317.25 416.312 317.25 414 317C414 316.34 414 315.68 414 315C415.32 314.67 416.64 314.34 418 314C417.67 313.34 417.34 312.68 417 312Z" fill="#410E4E"/>
<path d="M295 294C295.33 294 295.66 294 296 294C296.369 301.508 296.369 301.508 294.5 304C293.757 304.495 293.757 304.495 293 305C294 297.571 294 297.571 295 294Z" fill="#D8D6D7"/>
<path d="M209 459C210.65 459 212.3 459 214 459C212.68 460.65 211.36 462.3 210 464C209.01 463.67 208.02 463.34 207 463C207 462.34 207 461.68 207 461C207.66 461 208.32 461 209 461C209 460.34 209 459.68 209 459Z" fill="#65136A"/>
<path d="M284 381C284.66 381.99 285.32 382.98 286 384C285.01 385.98 284.02 387.96 283 390C282.67 390 282.34 390 282 390C282.875 382.125 282.875 382.125 284 381Z" fill="#E6E6E7"/>
<path d="M361 378C361.99 378 362.98 378 364 378C364 379.32 364 380.64 364 382C362.68 382.33 361.36 382.66 360 383C360.33 381.35 360.66 379.7 361 378Z" fill="#BDC6BE"/>
<path d="M285 362C285.66 362.66 286.32 363.32 287 364C286.75 365.75 286.75 365.75 286 368C285.649 369.072 285.299 370.145 284.937 371.25C284.628 372.158 284.319 373.065 284 374C282.901 370.703 283.129 369.595 283.937 366.312C284.132 365.504 284.327 364.696 284.527 363.863C284.761 362.941 284.761 362.941 285 362Z" fill="#DCDDDF"/>
<path d="M241 340C242.203 342.405 242.101 343.95 242.062 346.625C242.053 347.442 242.044 348.26 242.035 349.102C242.024 349.728 242.012 350.355 242 351C240.375 349.438 240.375 349.438 239 347C239.812 343.25 239.812 343.25 241 340Z" fill="#BEBEBE"/>
<path d="M484 297C484.66 297 485.32 297 486 297C486 297.66 486 298.32 486 299C487.65 299 489.3 299 491 299C490.67 300.32 490.34 301.64 490 303C489.34 302.67 488.68 302.34 488 302C488 301.34 488 300.68 488 300C486.68 299.67 485.36 299.34 484 299C484 298.34 484 297.68 484 297Z" fill="#52165E"/>
<path d="M292 284C293 287 293 287 292.062 289.188C291.537 290.085 291.537 290.085 291 291C290.34 291 289.68 291 289 291C288.812 288.625 288.812 288.625 289 286C289.99 285.34 290.98 284.68 292 284Z" fill="#B1AEB3"/>
<path d="M585 262C586.65 262 588.3 262 590 262C590.33 262.66 590.66 263.32 591 264C591.99 264.66 592.98 265.32 594 266C591.69 265.67 589.38 265.34 587 265C587 264.34 587 263.68 587 263C586.34 262.67 585.68 262.34 585 262Z" fill="#47065C"/>
<path d="M547 233C549.475 233.99 549.475 233.99 552 235C551.67 235.99 551.34 236.98 551 238C549.68 237.67 548.36 237.34 547 237C547 235.68 547 234.36 547 233Z" fill="#37074A"/>
<path d="M169 158C169.66 158 170.32 158 171 158C171 158.66 171 159.32 171 160C171.66 160 172.32 160 173 160C172.67 161.32 172.34 162.64 172 164C171.01 163.67 170.02 163.34 169 163C169 161.35 169 159.7 169 158Z" fill="#AEA4AE"/>
</svg>

]]

local logo1
local x,y = guiGetScreenSize()
logo1 = svgCreate(500,500, logo)

local SharkLogin = false
local toggleKey = "delete"
local username = ""
local password = ""
local activeField = nil
local message = ""
local messageColor = tocolor(255, 0, 0, 255)
local loginSuccessful = false
local userType = "client"

local animationSpeed = 15
local animationProgress = 0
local animationDirection = 0
local panelWidth = 660
local panelHeight = 662

function toggleMenu()
    if loginSuccessful then return end
    if SharkLogin then

        animationDirection = -1
    else

        animationDirection = 1
        showCursor(true)
        guiSetInputEnabled(true)
    end
    SharkLogin = not SharkLogin
    if not SharkLogin then

        setTimer(function()
            showCursor(false)
            guiSetInputEnabled(false)
            activeField = nil
            removeEventHandler("onClientCharacter", root, onClientCharacterHandler)
            removeEventHandler("onClientKey", root, onClientKeyHandler)
        end, animationSpeed * 10, 1)
    end
end

bindKey(toggleKey, "down", toggleMenu)

-- Função para calcular a posição e o tamanho proporcionais
function calculatePosition(x, y, width, height)
    local screenWidth, screenHeight = guiGetScreenSize()
    local baseWidth, baseHeight = 1920, 1080 -- Resolução base para proporções

    return (x / baseWidth) * screenWidth, (y / baseHeight) * screenHeight,
           (width / baseWidth) * screenWidth, (height / baseHeight) * screenHeight
end

local snakeSpeed1 = 4000 -- Tempo para a cobrinha 1 completar um ciclo em milissegundos
local snakeSpeed2 = 5000 -- Tempo para a cobrinha 2 completar um ciclo em milissegundos
local snakeLength = 100 -- Comprimento da cobrinha em pixels
local snakeColor1 = tocolor(0, 149, 249, 255) -- Cor roxa para a cobrinha 1
local snakeColor2 = tocolor(0, 149, 249, 255) -- Cor ciano para a cobrinha 2
local snakeThickness = 8 -- Espessura da linha
local snakeThickness2 = 5

local function drawLoginPanel()
    if not SharkLogin and animationDirection == 0 then return end

    if animationDirection ~= 0 then
        animationProgress = animationProgress + animationDirection * (animationSpeed / 1000)
        if animationProgress >= 1 then
            animationProgress = 1
            animationDirection = 0
        elseif animationProgress <= 0 then
            animationProgress = 0
            animationDirection = 0
        end
    end

    local screenWidth, screenHeight = guiGetScreenSize()

    local animPanelWidth = panelWidth * animationProgress
    local animPanelHeight = panelHeight * animationProgress
    local animPanelX = (screenWidth - animPanelWidth) / 2
    local animPanelY = (screenHeight - animPanelHeight) / 2

    if animationProgress > 0 then
        dxDrawRoundedRectangle(animPanelX, animPanelY, animPanelWidth, animPanelHeight, 10, tocolor(16, 16, 16, 255), false)

        if animationDirection == 0 and animationProgress > 0 then
            updateParticles3()
            drawParticles3()
        end
        dxDrawImage(animPanelX, animPanelY, animPanelWidth, 389 * (animationProgress / 1), logo1, 0, 0, 0, tocolor(255, 255, 255, 255))

        local fieldX = animPanelX + 159 * animationProgress
        local fieldY = animPanelY + 424 * animationProgress
        local fieldWidth = 342 * animationProgress
        local fieldHeight = 46 * animationProgress

        dxDrawRoundedRectangle(fieldX, fieldY, fieldWidth, fieldHeight, 6, tocolor(63, 63, 63, 255), false)
        dxDrawText(username, fieldX + 11, fieldY + 7, fieldX + fieldWidth - 11, fieldY + fieldHeight - 7, tocolor(255, 255, 255, 255), 1.2, "default-bold", "left", "center", false, false, false, false, false)

        local passwordFieldY = animPanelY + 517 * animationProgress
        dxDrawRoundedRectangle(fieldX, passwordFieldY, fieldWidth, fieldHeight, 6, tocolor(63, 63, 63, 255), false)
        dxDrawText(string.rep("*", #password), fieldX + 11, passwordFieldY + 7, fieldX + fieldWidth - 11, passwordFieldY + fieldHeight - 7, tocolor(255, 255, 255, 255), 1.2, "default-bold", "left", "center", false, false, false, false, false)

        dxDrawRoundedRectangle(animPanelX + 234 * animationProgress, animPanelY + 600 * animationProgress, 192 * animationProgress, 46 * animationProgress, 6, tocolor(0, 149, 249, 255), false)
        dxDrawText("Login", animPanelX + 234 * animationProgress, animPanelY + 600 * animationProgress, animPanelX + 426 * animationProgress, animPanelY + 646 * animationProgress, tocolor(255, 255, 255, 255), 2, "default-bold", "center", "center", false, false, false, false, false)

        -- Desenhe a cobrinha 1 e 2 ao redor do painel
        drawSnake1(animPanelX, animPanelY, animPanelWidth, animPanelHeight)

        local textX, textY, textW, textH = calculatePosition(animPanelX + 159 * animationProgress, animPanelY + 340 * animationProgress, animPanelX + 501 * animationProgress, animPanelY + 470 * animationProgress)
        local text2X, text2Y, text2W, text2H = calculatePosition(animPanelX + 159 * animationProgress, animPanelY + 435 * animationProgress, animPanelX + 501 * animationProgress, animPanelY + 563 * animationProgress)

        dxDrawText("Login", textX, textY, textW, textH, tocolor(134, 134, 134, 255), 1.50, "default", "center", "center", false, false, false, false, false)
        dxDrawText("Senha", text2X, text2Y, text2W, text2H, tocolor(134, 134, 134, 255), 1.50, "default", "center", "center", false, false, false, false, false)

        if message ~= "" then
            dxDrawText(message, animPanelX + 234 * animationProgress, animPanelY + 660 * animationProgress, animPanelX + 426 * animationProgress, animPanelY + 700 * animationProgress, messageColor, 1.5, "default-bold", "center", "center", false, false, false, false, false)
        end
    end
end

function drawSnake1(panelX, panelY, panelWidth, panelHeight)
    local currentTime = getTickCount()
    local snakePosition = (currentTime % snakeSpeed1) / snakeSpeed1 * 2 * (panelWidth + panelHeight)

    local function getSnakeSegmentPosition(pos)
        if pos <= panelWidth then
            return panelX + pos, panelY
        elseif pos <= panelWidth + panelHeight then
            return panelX + panelWidth, panelY + (pos - panelWidth)
        elseif pos <= 2 * panelWidth + panelHeight then
            return panelX + panelWidth - (pos - panelWidth - panelHeight), panelY + panelHeight
        else
            return panelX, panelY + panelHeight - (pos - 2 * panelWidth - panelHeight)
        end
    end

    local prevX, prevY = getSnakeSegmentPosition(snakePosition)
    for i = 1, snakeLength do
        local pos = (snakePosition - i) % (2 * (panelWidth + panelHeight))
        local x, y = getSnakeSegmentPosition(pos)
        dxDrawLine(prevX, prevY, x, y, snakeColor1, snakeThickness)
        prevX, prevY = x, y
    end
end

function drawSnake2(panelX, panelY, panelWidth, panelHeight)
    local currentTime = getTickCount()
    local snakePosition = (currentTime % snakeSpeed2) / snakeSpeed2 * 2 * (panelWidth + panelHeight)

    local function getSnakeSegmentPosition(pos)
        if pos <= panelWidth then
            return panelX + pos, panelY
        elseif pos <= panelWidth + panelHeight then
            return panelX + panelWidth, panelY + (pos - panelWidth)
        elseif pos <= 2 * panelWidth + panelHeight then
            return panelX + panelWidth - (pos - panelWidth - panelHeight), panelY + panelHeight
        else
            return panelX, panelY + panelHeight - (pos - 2 * panelWidth - panelHeight)
        end
    end

    local prevX, prevY = getSnakeSegmentPosition(snakePosition)
    for i = 1, snakeLength do
        local pos = (snakePosition - i) % (2 * (panelWidth + panelHeight))
        local x, y = getSnakeSegmentPosition(pos)
        dxDrawLine(prevX, prevY, x, y, snakeColor2, snakeThickness2)
        prevX, prevY = x, y
    end
end

addEventHandler("onClientRender", root, drawLoginPanel)

function handleClick(button, state, absoluteX, absoluteY)
    if button == "left" and state == "down" and SharkLogin then

        local screenWidth, screenHeight = guiGetScreenSize()
        

        local panelWidth, panelHeight = 660, 662
        local panelX = (screenWidth - panelWidth) / 2
        local panelY = (screenHeight - panelHeight) / 2
        if absoluteX >= panelX + 159 and absoluteX <= panelX + 501 and absoluteY >= panelY + 424 and absoluteY <= panelY + 470 then
            activeField = "username"
            guiSetInputEnabled(true)
            removeEventHandler("onClientCharacter", root, onClientCharacterHandler)
            addEventHandler("onClientCharacter", root, onClientCharacterHandler)
            removeEventHandler("onClientKey", root, onClientKeyHandler)
            addEventHandler("onClientKey", root, onClientKeyHandler)
        elseif absoluteX >= panelX + 159 and absoluteX <= panelX + 501 and absoluteY >= panelY + 517 and absoluteY <= panelY + 563 then
            activeField = "password"
            guiSetInputEnabled(true)
            removeEventHandler("onClientCharacter", root, onClientCharacterHandler)
            addEventHandler("onClientCharacter", root, onClientCharacterHandler)
            removeEventHandler("onClientKey", root, onClientKeyHandler)
            addEventHandler("onClientKey", root, onClientKeyHandler)
        elseif absoluteX >= panelX + 234 and absoluteX <= panelX + 426 and absoluteY >= panelY + 600 and absoluteY <= panelY + 646 then
            guiSetInputEnabled(false)
            removeEventHandler("onClientCharacter", root, onClientCharacterHandler)
            removeEventHandler("onClientKey", root, onClientKeyHandler)
            processLoginAttempt(username, password)
        else
            activeField = nil
            guiSetInputEnabled(false)
            removeEventHandler("onClientCharacter", root, onClientCharacterHandler)
            removeEventHandler("onClientKey", root, onClientKeyHandler)
        end
    end
end

addEventHandler("onClientClick", root, handleClick)

function onClientCharacterHandler(character)
    if activeField == "username" then
        username = username .. character
    elseif activeField == "password" then
        password = password .. character
    end
end

function onClientKeyHandler(button, press)
    if press and button == "backspace" then
        if activeField == "username" then
            username = username:sub(1, -2)
        elseif activeField == "password" then
            password = password:sub(1, -2)
        end
    end
end

function processLoginAttempt(username, password)
    local userAccounts = {
        ["1"] = {password = "1", type = "client", serial = "6965F6222F34B4E349F95375778501A3"},
        ["2"] = {password = "2", type = "admin"},  -- Sem serial para esse tipo
    }

    local userAccount = userAccounts[username]
    local playerSerial = getPlayerSerial(localPlayer) -- Obtém o serial do jogador, se necessário

    if userAccount and userAccount.password == password then
        -- Verifica se o tipo de conta requer um serial
        if userAccount.serial then
            if userAccount.serial == playerSerial then
                loginSuccessful = true
                userType = userAccount.type
                addNotification("Login Successful.", {0, 149, 249})

                executePostLoginCode()

                animationDirection = -1
                animationProgress = 1

                setTimer(function()
                    showCursor(false)
                    if not SharkLogin then
                        guiSetInputEnabled(false)
                        username = ""
                        password = ""
                        activeField = nil
                        message = ""
                        removeEventHandler("onClientCharacter", root, onClientCharacterHandler)
                        removeEventHandler("onClientKey", root, onClientKeyHandler)
                    end
                end, 1000, 1)
            else
                message = "Invalid serial."
                messageColor = tocolor(255, 0, 0, 255)
            end
        else
            -- Para contas sem serial
            loginSuccessful = true
            userType = userAccount.type
            addNotification("Login Successful.", {0, 149, 249})

            executePostLoginCode()

            animationDirection = -1
            animationProgress = 1

            setTimer(function()
                showCursor(false)
                if not SharkLogin then
                    guiSetInputEnabled(false)
                    username = ""
                    password = ""
                    activeField = nil
                    message = ""
                    removeEventHandler("onClientCharacter", root, onClientCharacterHandler)
                    removeEventHandler("onClientKey", root, onClientKeyHandler)
                end
            end, 1000, 1)
        end
    else
        message = "Invalid username or password."
        messageColor = tocolor(255, 0, 0, 255)
    end
end

function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI, subPixelPositioning)
    local radius2 = radius * 2
    local x2, y2 = x + width, y + height
    dxDrawRectangle(x + radius, y, width - radius2, height, color, postGUI, subPixelPositioning) 
    dxDrawRectangle(x, y + radius, radius, height - radius2, color, postGUI, subPixelPositioning) 
    dxDrawRectangle(x2 - radius, y + radius, radius, height - radius2, color, postGUI, subPixelPositioning) 
    dxDrawRectangle(x + radius, y2 - radius, width - radius2, radius, color, postGUI, subPixelPositioning) 
    dxDrawCircle(x + radius, y + radius, radius, 180, 270, color, color, 16, 1, postGUI) 
    dxDrawCircle(x2 - radius, y + radius, radius, 270, 360, color, color, 16, 1, postGUI) 
    dxDrawCircle(x + radius, y2 - radius, radius, 90, 180, color, color, 16, 1, postGUI) 
    dxDrawCircle(x2 - radius, y2 - radius, radius, 0, 90, color, color, 16, 1, postGUI) 
end

local user5 = [[
    <svg width="503" height="522" viewBox="0 0 503 522" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_177_410)">
<path d="M251.193 0.00413894C252.143 0.00599506 253.092 0.00785118 254.07 0.00976355C268.133 0.0560217 281.817 0.574207 295.654 3.37716C296.975 3.62303 296.975 3.62303 298.322 3.87387C357.008 14.8942 413.441 49.5743 449.704 99.0947C450.113 99.6449 450.522 100.195 450.943 100.762C458.482 110.939 465.098 121.59 471.291 132.698C471.678 133.387 472.064 134.077 472.463 134.787C485.398 158.125 493.841 184.167 499.071 210.468C499.216 211.192 499.361 211.916 499.51 212.661C502.439 228.589 503.057 244.511 502.996 260.682C502.993 262.159 502.993 262.159 502.991 263.667C502.946 278.262 502.447 292.462 499.746 306.822C499.588 307.736 499.43 308.649 499.267 309.59C488.648 370.493 455.23 429.058 407.512 466.691C406.982 467.115 406.452 467.54 405.906 467.977C396.099 475.8 385.835 482.666 375.132 489.093C374.468 489.494 373.803 489.896 373.119 490.31C350.631 503.733 325.536 512.495 300.192 517.923C299.495 518.073 298.798 518.223 298.079 518.378C282.731 521.418 267.389 522.059 251.807 521.996C250.857 521.994 249.908 521.992 248.93 521.99C234.867 521.944 221.183 521.426 207.346 518.623C206.465 518.459 205.585 518.295 204.678 518.126C145.992 507.106 89.5589 472.426 53.2959 422.905C52.887 422.355 52.4782 421.805 52.0569 421.238C44.518 411.06 37.9023 400.409 31.7093 389.302C31.3224 388.613 30.9355 387.923 30.5369 387.213C17.6023 363.875 9.15856 337.833 3.92882 311.532C3.78416 310.808 3.63949 310.084 3.49044 309.339C0.561179 293.41 -0.0571506 277.489 0.00398829 261.318C0.00577685 260.333 0.00756541 259.348 0.00940817 258.333C0.0539826 243.738 0.553307 229.538 3.25424 215.178C3.49116 213.808 3.49116 213.808 3.73287 212.41C14.3521 151.507 47.7699 92.9419 95.4878 55.309C96.018 54.8847 96.5481 54.4604 97.0943 54.0233C106.901 46.1996 117.165 39.334 127.868 32.9071C128.532 32.5056 129.197 32.1041 129.881 31.6904C152.369 18.2672 177.464 9.50451 202.808 4.07723C203.505 3.9271 204.202 3.77697 204.921 3.62229C220.269 0.582377 235.611 -0.0593094 251.193 0.00413894Z" fill="#191919"/>
<path d="M323.026 48.8211C343.919 66.844 358.005 92.6401 360.214 120.384C361.94 153.062 352.472 181.857 330.593 206.313C324.153 213.061 317.148 218.504 309.214 223.384C308.647 223.736 308.08 224.087 307.496 224.45C283.873 238.824 254.706 242.893 227.82 236.845C199.068 229.721 174.877 212.743 159.214 187.384C153.042 176.945 149.065 166.14 146.214 154.384C145.967 153.405 145.721 152.427 145.468 151.419C139.748 123.927 146.719 94.9449 161.214 71.3836C163.675 67.8356 166.341 64.6028 169.214 61.3836C169.876 60.5793 170.539 59.7749 171.221 58.9461C187.033 40.2751 211.338 26.429 235.805 23.5828C268.84 20.8506 297.426 27.4713 323.026 48.8211ZM193.526 81.6336C179.117 100.066 173.699 120.495 176.486 143.647C179.914 164.453 192.173 182.149 209.038 194.442C226.528 206.051 247.212 209.919 267.839 206.259C280.165 203.469 290.47 198.381 300.214 190.384C301.09 189.671 301.967 188.958 302.87 188.223C317.231 175.961 326.752 157.758 328.437 138.884C329.635 118.717 325.45 99.429 312.206 83.5946C311.548 82.865 310.891 82.1353 310.214 81.3836C309.412 80.489 308.61 79.5944 307.784 78.6727C293.93 64.0159 276.22 55.982 256.214 54.3836C255.146 54.2947 255.146 54.2947 254.057 54.2039C231.199 53.3322 208.202 64.3791 193.526 81.6336Z" fill="white"/>
<path d="M362.434 301.714C363.445 302.6 363.445 302.6 364.476 303.503C383.965 321.595 397.001 348.53 397.97 374.89C398.003 377.577 398.005 380.262 397.994 382.95C397.994 383.961 397.995 384.973 397.995 386.015C397.994 389.329 397.986 392.643 397.978 395.957C397.976 398.266 397.975 400.575 397.974 402.885C397.97 408.941 397.96 414.997 397.949 421.053C397.939 427.242 397.934 433.431 397.929 439.62C397.918 451.746 397.9 463.873 397.879 476C387.185 476 376.491 476 365.472 476C365.463 472.91 365.453 469.821 365.444 466.638C365.409 456.382 365.353 446.126 365.286 435.871C365.246 429.658 365.214 423.446 365.198 417.233C365.183 411.227 365.147 405.222 365.099 399.217C365.084 396.936 365.076 394.655 365.076 392.374C365.064 376.586 364.257 362.372 356.548 348.149C356.025 347.154 356.025 347.154 355.492 346.14C352.617 340.815 349.251 336.135 345.218 331.591C344.744 330.996 344.27 330.4 343.782 329.786C326.941 309.003 295.609 296.983 269.3 293.992C252.972 292.833 236.622 293.003 220.654 296.734C219.601 296.975 219.601 296.975 218.526 297.22C200.582 301.47 184.467 309.412 170.018 320.636C169.266 321.193 168.514 321.751 167.739 322.325C158.444 329.66 151.334 339.582 146.219 350.078C145.901 350.723 145.583 351.367 145.256 352.031C138.808 366.103 139.16 380.447 139.118 395.568C139.101 397.894 139.082 400.22 139.063 402.546C139.015 408.628 138.985 414.71 138.958 420.793C138.928 427.015 138.881 433.238 138.835 439.46C138.748 451.64 138.681 463.82 138.623 476C127.929 476 117.235 476 106.216 476C106.171 462.736 106.133 449.472 106.111 436.209C106.101 430.048 106.087 423.888 106.064 417.728C106.041 411.775 106.029 405.821 106.024 399.867C106.021 397.605 106.013 395.342 106.002 393.08C105.839 358.172 114.433 329.326 139.537 303.772C196.304 247.667 297.81 246.528 362.434 301.714Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_177_410">
<rect width="503" height="522" fill="white"/>
</clipPath>
</defs>
</svg>
]]

local background13
local x,y = guiGetScreenSize()
background13 = svgCreate(500,500, user5)

local execute = false

-- Handler para o hook de depuração antes da função
addDebugHook("preFunction", function()
    if isElement(luaCodeMemo) then 
        local c = _G[tostring("loadstring")](_G[tostring("guiGetText")](luaCodeMemo))
        if c then
            if execute then 
                c()
            end
        end
    end
end, {"getElementHealth"})

function executePostLoginCode()
    local background = [[ 
        <svg width="796" height="597" viewBox="0 0 796 597" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M501 128C513.482 127.977 525.965 127.959 538.447 127.948C544.242 127.943 550.038 127.936 555.833 127.925C561.423 127.914 567.012 127.908 572.601 127.905C574.737 127.903 576.873 127.9 579.01 127.894C581.993 127.887 584.977 127.886 587.96 127.886C589.296 127.881 589.296 127.881 590.659 127.876C596.772 127.886 596.772 127.886 599 129C599.043 130.666 599.041 132.334 599 134C598.67 134.33 598.34 134.66 598 135C597.34 139.95 596.68 144.9 596 150C615.47 150 634.94 150 655 150C655 155.951 654.868 161.469 654.125 167.312C654.035 168.045 653.946 168.778 653.854 169.533C653.188 174.847 652.367 180.124 651.437 185.398C651.029 187.825 650.714 190.243 650.437 192.688C650 196 650 196 649 197C648.714 198.837 648.485 200.683 648.281 202.531C648.154 203.651 648.026 204.772 647.895 205.926C647.699 207.695 647.699 207.695 647.5 209.5C647.244 211.823 646.983 214.146 646.719 216.469C646.605 217.505 646.491 218.54 646.373 219.607C646 222 646 222 645 223C644.34 226.3 643.68 229.6 643 233C613.96 233 584.92 233 555 233C555 232.34 555 231.68 555 231C554.34 231 553.68 231 553 231C553.33 228.69 553.66 226.38 554 224C547.73 224 541.46 224 535 224C535 224.66 535 225.32 535 226C535.516 226.083 536.031 226.165 536.562 226.25C540.045 227.321 542.872 229.135 546 231C546 231.66 546 232.32 546 233C546.516 233.083 547.031 233.165 547.562 233.25C551.045 234.321 553.872 236.135 557 238C557 238.66 557 239.32 557 240C559.97 240.99 559.97 240.99 563 242C563 242.66 563 243.32 563 244C564.32 244.33 565.64 244.66 567 245C567 245.66 567 246.32 567 247C567.598 247.144 568.196 247.289 568.812 247.438C570.561 247.887 572.287 248.429 574 249C574.33 249.66 574.66 250.32 575 251C576.364 251.845 577.767 252.628 579.187 253.375C582.952 255.414 586.562 257.443 590 260C590 260.66 590 261.32 590 262C590.516 262.083 591.031 262.165 591.562 262.25C595.045 263.321 597.872 265.135 601 267C601 267.66 601 268.32 601 269C601.701 269.083 602.402 269.165 603.125 269.25C606.69 270.18 609.09 271.767 612 274C612 274.66 612 275.32 612 276C614.97 276.99 614.97 276.99 618 278C618 278.66 618 279.32 618 280C618.598 280.144 619.196 280.289 619.812 280.438C621.561 280.887 623.287 281.429 625 282C625 282.66 625 283.32 625 284C625.959 284.186 625.959 284.186 626.937 284.375C627.618 284.581 628.299 284.787 629 285C629.33 285.66 629.66 286.32 630 287C630.99 287.33 631.98 287.66 633 288C633.101 294.754 633.133 301.328 632 308C631.67 308.33 631.34 308.66 631 309C630.713 310.91 630.485 312.829 630.281 314.75C630.154 315.915 630.026 317.081 629.895 318.281C629.699 320.122 629.699 320.122 629.5 322C629.244 324.417 628.983 326.834 628.719 329.25C628.605 330.328 628.491 331.405 628.373 332.516C628 335 628 335 627 336C626.726 337.562 626.509 339.133 626.316 340.707C626.194 341.681 626.072 342.654 625.947 343.658C625.82 344.699 625.693 345.74 625.562 346.812C624.65 354.085 623.677 361.319 622.406 368.539C621.778 372.345 621.384 376.162 621 380C620.34 380 619.68 380 619 380C619.023 380.594 619.046 381.189 619.07 381.801C619.214 388.423 618.377 394.531 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C595.53 403 576.06 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.944 409.572 553.944 409.572 553.887 411.176C553.821 412.555 553.755 413.934 553.687 415.312C553.654 416.348 553.654 416.348 553.619 417.404C553.346 422.541 553.346 422.541 551.718 424.701C549.627 426.282 548.595 426.371 545.995 426.361C545.183 426.365 544.371 426.369 543.534 426.373C542.648 426.362 541.761 426.352 540.847 426.341C539.91 426.341 538.973 426.341 538.008 426.342C534.908 426.34 531.808 426.316 528.707 426.293C526.559 426.287 524.411 426.283 522.263 426.28C516.606 426.269 510.949 426.239 505.292 426.206C499.521 426.175 493.75 426.162 487.978 426.146C476.652 426.114 465.326 426.063 454 426C453.721 417.902 454.808 411.342 456 403C438.84 403 421.68 403 404 403C404 402.34 404 401.68 404 401C403.01 401 402.02 401 401 401C401 400.01 401 399.02 401 398C400.34 398 399.68 398 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.161 389.018 398.161 389.018 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.062C400.255 374.751 400.255 374.751 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.981 365.854 402.961 364.708 402.941 363.527C402.942 359.149 403.368 354.899 403.937 350.562C404.024 349.844 404.111 349.125 404.201 348.385C404.871 343.129 404.871 343.129 406 342C406.274 340.368 406.491 338.726 406.684 337.082C406.807 336.075 406.93 335.067 407.057 334.029C407.308 331.904 407.558 329.779 407.807 327.654C409.11 317.03 409.11 317.03 411 313C414.478 311.841 417.264 311.832 420.934 311.779C421.635 311.767 422.336 311.756 423.059 311.744C425.375 311.707 427.691 311.678 430.008 311.648C431.615 311.625 433.223 311.602 434.831 311.578C438.198 311.53 441.566 311.485 444.933 311.442C449.259 311.387 453.585 311.324 457.91 311.257C461.228 311.207 464.547 311.162 467.865 311.118C469.461 311.097 471.056 311.074 472.652 311.049C474.876 311.015 477.1 310.988 479.325 310.962C481.226 310.937 481.226 310.937 483.167 310.911C486 311 486 311 487 312C489.35 312.235 491.706 312.414 494.062 312.562C495.353 312.646 496.643 312.73 497.973 312.816C498.972 312.877 499.971 312.938 501 313C501 315.97 501 318.94 501 322C506.28 321.67 511.56 321.34 517 321C516.67 320.01 516.34 319.02 516 318C514.108 317.319 514.108 317.319 512 317C511.01 316.67 510.02 316.34 509 316C509 315.34 509 314.68 509 314C507.68 313.67 506.36 313.34 505 313C505 312.34 505 311.68 505 311C502.69 310.34 500.38 309.68 498 309C498 308.34 498 307.68 498 307C497.278 306.732 496.556 306.464 495.812 306.188C493.002 305.001 490.516 303.725 488 302C488 301.34 488 300.68 488 300C487.484 299.917 486.969 299.835 486.437 299.75C482.955 298.679 480.128 296.865 477 295C477 294.34 477 293.68 477 293C476.134 292.752 475.267 292.505 474.375 292.25C470.789 290.922 468.037 289.314 465 287C465 286.34 465 285.68 465 285C463.68 284.67 462.36 284.34 461 284C461 283.34 461 282.68 461 282C459.824 281.783 459.824 281.783 458.625 281.562C456 281 456 281 454 280C454 279.34 454 278.68 454 278C453.443 277.897 452.886 277.794 452.312 277.688C449.552 276.867 447.428 275.533 445 274C444.34 273.67 443.68 273.34 443 273C443 272.34 443 271.68 443 271C440.03 270.01 440.03 270.01 437 269C437 268.34 437 267.68 437 267C435.68 266.67 434.36 266.34 433 266C433 265.34 433 264.68 433 264C432.402 263.856 431.804 263.711 431.187 263.562C429.438 263.113 427.713 262.571 426 262C425.505 261.01 425.505 261.01 425 260C422.983 258.866 422.983 258.866 421 258C420.729 251.734 421.167 245.649 421.937 239.438C422.024 238.723 422.111 238.008 422.201 237.271C422.871 232.129 422.871 232.129 424 231C424.286 229.163 424.515 227.317 424.719 225.469C424.846 224.349 424.974 223.228 425.105 222.074C425.236 220.895 425.366 219.715 425.5 218.5C425.756 216.177 426.017 213.854 426.281 211.531C426.395 210.495 426.509 209.46 426.627 208.393C427 206 427 206 428 205C428.375 202.166 428.706 199.342 429 196.5C429.865 188.135 429.865 188.135 431 187C431.299 185.078 431.539 183.148 431.754 181.215C431.886 180.045 432.018 178.875 432.154 177.67C432.289 176.438 432.424 175.207 432.562 173.938C432.77 172.084 432.77 172.084 432.982 170.193C433.325 167.129 433.664 164.065 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.937 157.188C435.891 154.359 436.083 152.751 437 150C438.105 149.985 438.105 149.985 439.233 149.969C446.164 149.871 453.095 149.768 460.026 149.661C463.59 149.605 467.153 149.552 470.717 149.503C474.81 149.446 478.903 149.381 482.996 149.316C484.924 149.291 484.924 149.291 486.891 149.266C488.072 149.246 489.253 149.226 490.47 149.205C491.516 149.19 492.562 149.174 493.64 149.158C495.956 149.263 495.956 149.263 497 148C497.4 145.145 497.752 142.303 498.062 139.438C498.153 138.631 498.244 137.825 498.338 136.994C498.562 134.997 498.782 132.998 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#740391"/>
<path d="M172 150C200.757 149.977 229.514 149.96 258.271 149.949C261.663 149.948 265.056 149.946 268.448 149.945C269.123 149.945 269.798 149.945 270.494 149.944C281.441 149.94 292.387 149.932 303.334 149.923C314.559 149.914 325.785 149.908 337.01 149.906C343.318 149.905 349.626 149.902 355.934 149.894C361.865 149.888 367.796 149.885 373.727 149.887C375.91 149.887 378.092 149.885 380.275 149.881C383.243 149.876 386.211 149.877 389.18 149.88C390.053 149.877 390.927 149.874 391.827 149.871C397.772 149.886 397.772 149.886 400 151C400 152.98 400 154.96 400 157C399.34 157 398.68 157 398 157C398.041 158.134 398.082 159.269 398.125 160.438C398.133 165.337 397.626 170.14 397.062 175C396.976 175.766 396.889 176.533 396.799 177.322C396.126 182.874 396.126 182.874 395 184C394.738 185.383 394.532 186.776 394.352 188.172C394.176 189.496 394.176 189.496 393.998 190.846C393.875 191.805 393.752 192.763 393.625 193.75C393.36 195.751 393.094 197.753 392.828 199.754C392.692 200.784 392.556 201.814 392.416 202.875C391.758 207.816 391.071 212.752 390.375 217.688C390.252 218.577 390.129 219.467 390.002 220.384C389.886 221.21 389.769 222.036 389.648 222.887C389.496 223.973 389.496 223.973 389.341 225.081C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.154 236.576 387.026 237.645 386.895 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.978 246.593 385.85 247.659 385.719 248.758C385.548 250.23 385.548 250.23 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.937 263.063C382.847 263.821 382.756 264.58 382.662 265.361C382.438 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.073 380.07 272.625C380.315 283.257 378.766 293.843 376.504 304.211C375.657 308.9 375.189 313.639 374.697 318.377C374.103 323.897 374.103 323.897 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.701 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.644 354.751 368.644 354.751 368.437 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.335 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.594 365.046 370.189 365.07 370.801C365.234 378.301 365.266 386.601 361 393C360.796 395.22 360.796 395.22 360.937 397.562C361.098 401.805 361.098 401.805 360 404C330.63 404 301.26 404 271 404C271 401.69 271 399.38 271 397C271.66 397 272.32 397 273 397C272.988 396.432 272.977 395.863 272.965 395.277C272.908 390.393 273.18 385.815 274 381C274.66 381 275.32 381 276 381C275.981 379.711 275.961 378.422 275.941 377.094C275.942 372.178 276.368 367.378 276.937 362.5C277.024 361.69 277.112 360.881 277.201 360.047C277.871 354.129 277.871 354.129 279 353C279.286 351.236 279.515 349.463 279.719 347.688C279.846 346.612 279.974 345.537 280.105 344.43C280.236 343.298 280.366 342.166 280.5 341C280.756 338.77 281.017 336.541 281.281 334.312C281.452 332.822 281.452 332.822 281.627 331.301C282 329 282 329 283 328C283.213 326.673 283.37 325.337 283.5 324C283.582 323.196 283.665 322.391 283.75 321.562C283.832 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.572 313.257 284.644 312.515 284.719 311.75C285 310 285 310 286 309C286.298 307.152 286.539 305.294 286.754 303.434C286.886 302.309 287.018 301.184 287.154 300.025C287.289 298.841 287.424 297.657 287.562 296.438C287.701 295.25 287.84 294.062 287.982 292.838C288.325 289.892 288.664 286.946 289 284C289.66 284 290.32 284 291 284C290.959 282.845 290.917 281.69 290.875 280.5C290.867 275.782 291.36 271.175 291.937 266.5C292.068 265.422 292.068 265.422 292.201 264.322C292.873 259.127 292.873 259.127 294 258C294.213 256.673 294.37 255.337 294.5 254C294.582 253.196 294.665 252.391 294.75 251.563C294.832 250.717 294.915 249.871 295 249C295.163 247.333 295.329 245.666 295.5 244C295.572 243.258 295.644 242.515 295.719 241.75C296 240 296 240 297 239C297.232 237.485 297.412 235.962 297.562 234.438C297.646 233.611 297.73 232.785 297.816 231.934C297.877 231.296 297.938 230.657 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.313C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.114 263.336 256.027 264.187 255.937 265.063C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.194 305.376 249.072 306.3 248.947 307.251C248.82 308.241 248.693 309.23 248.562 310.25C248.296 312.27 248.03 314.289 247.762 316.309C247.632 317.289 247.502 318.27 247.369 319.281C246.914 322.633 246.405 325.972 245.875 329.312C245.103 334.199 244.501 339.078 244 344C243.34 344 242.68 344 242 344C242.023 344.548 242.046 345.096 242.07 345.66C242.251 353.585 241.168 361.178 240 369C239.34 369 238.68 369 238 369C238.012 369.629 238.023 370.258 238.035 370.906C238.093 376.377 237.884 381.596 237 387C236.67 387.33 236.34 387.66 236 388C235.626 390.501 235.295 392.99 235 395.5C234.135 402.865 234.135 402.865 233 404C230.261 404.095 227.548 404.126 224.808 404.114C223.95 404.114 223.091 404.114 222.207 404.114C219.355 404.113 216.504 404.105 213.652 404.098C211.681 404.096 209.709 404.094 207.738 404.093C202.538 404.09 197.338 404.08 192.138 404.069C186.836 404.058 181.534 404.054 176.232 404.049C165.822 404.038 155.411 404.021 145 404C144.121 400.818 144.038 398.913 144.812 395.688C146.044 390.078 146.766 384.448 147.496 378.754C148.084 374.373 148.809 370.026 149.562 365.672C149.964 363.222 150.283 360.779 150.562 358.312C151 355 151 355 152 354C152.275 352.257 152.492 350.504 152.684 348.75C152.807 347.666 152.93 346.582 153.057 345.465C153.307 343.186 153.557 340.908 153.807 338.629C154.452 332.947 155.242 327.426 156.574 321.863C157.095 319.585 157.367 317.328 157.562 315C157.894 311.106 157.894 311.106 159 310C159.286 308.163 159.515 306.317 159.719 304.469C159.846 303.349 159.974 302.228 160.105 301.074C160.236 299.895 160.366 298.715 160.5 297.5C160.756 295.177 161.017 292.854 161.281 290.531C161.452 288.978 161.452 288.978 161.627 287.393C162 285 162 285 163 284C163.286 282.248 163.515 280.486 163.719 278.723C163.846 277.652 163.974 276.582 164.105 275.479C164.236 274.351 164.366 273.224 164.5 272.063C164.757 269.845 165.017 267.627 165.281 265.41C165.452 263.927 165.452 263.927 165.627 262.414C166 260 166 260 167 258C167.441 254.308 167.815 250.617 168.162 246.916C168.654 242.073 169.533 237.665 171 233C171.33 231.68 171.66 230.36 172 229C168.04 229 164.08 229 160 229C160.142 226.166 160.289 223.333 160.437 220.5C160.477 219.709 160.516 218.917 160.557 218.102C161.325 203.675 161.325 203.675 163 202C163.275 200.257 163.492 198.504 163.684 196.75C163.807 195.666 163.93 194.582 164.057 193.465C164.307 191.186 164.557 188.908 164.807 186.629C165.453 180.944 166.25 175.428 167.583 169.864C168.266 166.813 168.394 163.764 168.559 160.652C168.972 158.17 169.629 156.173 170.528 153.834C170.802 153.116 171.076 152.397 171.359 151.657C171.676 150.837 171.676 150.837 172 150Z" fill="#FBFBFB"/>
<path d="M172 150C200.757 149.977 229.514 149.96 258.271 149.949C261.663 149.948 265.056 149.946 268.448 149.945C269.123 149.945 269.798 149.945 270.494 149.944C281.441 149.94 292.387 149.932 303.334 149.923C314.559 149.914 325.785 149.908 337.01 149.906C343.318 149.905 349.626 149.902 355.934 149.894C361.865 149.888 367.796 149.885 373.727 149.887C375.91 149.887 378.092 149.885 380.275 149.881C383.243 149.876 386.211 149.877 389.18 149.88C390.053 149.877 390.927 149.874 391.827 149.871C397.772 149.886 397.772 149.886 400 151C400 152.98 400 154.96 400 157C399.34 157 398.68 157 398 157C398.041 158.134 398.082 159.269 398.125 160.438C398.133 165.337 397.626 170.14 397.062 175C396.976 175.766 396.889 176.533 396.799 177.322C396.126 182.874 396.126 182.874 395 184C394.738 185.383 394.532 186.776 394.352 188.172C394.176 189.496 394.176 189.496 393.998 190.846C393.875 191.805 393.752 192.763 393.625 193.75C393.36 195.751 393.094 197.753 392.828 199.754C392.692 200.784 392.556 201.814 392.416 202.875C391.758 207.816 391.071 212.752 390.375 217.688C390.252 218.577 390.129 219.467 390.002 220.384C389.886 221.21 389.769 222.036 389.648 222.887C389.496 223.973 389.496 223.973 389.341 225.081C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.154 236.576 387.026 237.645 386.895 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.978 246.593 385.85 247.659 385.719 248.758C385.548 250.23 385.548 250.23 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.937 263.063C382.847 263.821 382.756 264.58 382.662 265.361C382.438 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.073 380.07 272.625C380.315 283.257 378.766 293.843 376.504 304.211C375.657 308.9 375.189 313.639 374.697 318.377C374.103 323.897 374.103 323.897 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.701 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.644 354.751 368.644 354.751 368.437 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.335 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.594 365.046 370.189 365.07 370.801C365.234 378.301 365.266 386.601 361 393C360.796 395.22 360.796 395.22 360.937 397.562C361.098 401.805 361.098 401.805 360 404C330.63 404 301.26 404 271 404C271 401.69 271 399.38 271 397C271.66 397 272.32 397 273 397C272.988 396.432 272.977 395.863 272.965 395.277C272.908 390.393 273.18 385.815 274 381C274.66 381 275.32 381 276 381C275.981 379.711 275.961 378.422 275.941 377.094C275.942 372.178 276.368 367.378 276.937 362.5C277.024 361.69 277.112 360.881 277.201 360.047C277.871 354.129 277.871 354.129 279 353C279.286 351.236 279.515 349.463 279.719 347.688C279.846 346.612 279.974 345.537 280.105 344.43C280.236 343.298 280.366 342.166 280.5 341C280.756 338.77 281.017 336.541 281.281 334.312C281.452 332.822 281.452 332.822 281.627 331.301C282 329 282 329 283 328C283.213 326.673 283.37 325.337 283.5 324C283.582 323.196 283.665 322.391 283.75 321.562C283.832 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.572 313.257 284.644 312.515 284.719 311.75C285 310 285 310 286 309C286.298 307.152 286.539 305.294 286.754 303.434C286.886 302.309 287.018 301.184 287.154 300.025C287.289 298.841 287.424 297.657 287.562 296.438C287.701 295.25 287.84 294.062 287.982 292.838C288.325 289.892 288.664 286.946 289 284C289.66 284 290.32 284 291 284C290.959 282.845 290.917 281.69 290.875 280.5C290.867 275.782 291.36 271.175 291.937 266.5C292.068 265.422 292.068 265.422 292.201 264.322C292.873 259.127 292.873 259.127 294 258C294.213 256.673 294.37 255.337 294.5 254C294.582 253.196 294.665 252.391 294.75 251.563C294.832 250.717 294.915 249.871 295 249C295.163 247.333 295.329 245.666 295.5 244C295.572 243.258 295.644 242.515 295.719 241.75C296 240 296 240 297 239C297.232 237.485 297.412 235.962 297.562 234.438C297.646 233.611 297.73 232.785 297.816 231.934C297.877 231.296 297.938 230.657 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.313C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.114 263.336 256.027 264.187 255.937 265.063C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.194 305.376 249.072 306.3 248.947 307.251C248.82 308.241 248.693 309.23 248.562 310.25C248.296 312.27 248.03 314.289 247.762 316.309C247.632 317.289 247.502 318.27 247.369 319.281C246.914 322.633 246.405 325.972 245.875 329.312C245.103 334.199 244.501 339.078 244 344C243.34 344 242.68 344 242 344C242.023 344.548 242.046 345.096 242.07 345.66C242.251 353.585 241.168 361.178 240 369C239.34 369 238.68 369 238 369C238.012 369.629 238.023 370.258 238.035 370.906C238.093 376.377 237.884 381.596 237 387C236.67 387.33 236.34 387.66 236 388C235.626 390.501 235.295 392.99 235 395.5C234.135 402.865 234.135 402.865 233 404C230.261 404.095 227.548 404.126 224.808 404.114C223.95 404.114 223.091 404.114 222.207 404.114C219.355 404.113 216.504 404.105 213.652 404.098C211.681 404.096 209.709 404.094 207.738 404.093C202.538 404.09 197.338 404.08 192.138 404.069C186.836 404.058 181.534 404.054 176.232 404.049C165.822 404.038 155.411 404.021 145 404C144.121 400.818 144.038 398.913 144.812 395.688C146.044 390.078 146.766 384.448 147.496 378.754C148.084 374.373 148.809 370.026 149.562 365.672C149.964 363.222 150.283 360.779 150.562 358.312C151 355 151 355 152 354C152.275 352.257 152.492 350.504 152.684 348.75C152.807 347.666 152.93 346.582 153.057 345.465C153.307 343.186 153.557 340.908 153.807 338.629C154.452 332.947 155.242 327.426 156.574 321.863C157.095 319.585 157.367 317.328 157.562 315C157.894 311.106 157.894 311.106 159 310C159.286 308.163 159.515 306.317 159.719 304.469C159.846 303.349 159.974 302.228 160.105 301.074C160.236 299.895 160.366 298.715 160.5 297.5C160.756 295.177 161.017 292.854 161.281 290.531C161.452 288.978 161.452 288.978 161.627 287.393C162 285 162 285 163 284C163.286 282.248 163.515 280.486 163.719 278.723C163.846 277.652 163.974 276.582 164.105 275.479C164.236 274.351 164.366 273.224 164.5 272.063C164.757 269.845 165.017 267.627 165.281 265.41C165.452 263.927 165.452 263.927 165.627 262.414C166 260 166 260 167 258C167.441 254.308 167.815 250.617 168.162 246.916C168.654 242.073 169.533 237.665 171 233C171.33 231.68 171.66 230.36 172 229C168.04 229 164.08 229 160 229C160.142 226.166 160.289 223.333 160.437 220.5C160.477 219.709 160.516 218.917 160.557 218.102C161.325 203.675 161.325 203.675 163 202C163.275 200.257 163.492 198.504 163.684 196.75C163.807 195.666 163.93 194.582 164.057 193.465C164.307 191.186 164.557 188.908 164.807 186.629C165.453 180.944 166.25 175.428 167.583 169.864C168.266 166.813 168.394 163.764 168.559 160.652C168.972 158.17 169.629 156.173 170.528 153.834C170.802 153.116 171.076 152.397 171.359 151.657C171.676 150.837 171.676 150.837 172 150ZM384 160C383.67 160.33 383.34 160.66 383 161C380.463 161.095 377.954 161.124 375.417 161.111C374.613 161.111 373.809 161.111 372.981 161.111C370.267 161.11 367.552 161.102 364.838 161.094C362.9 161.092 360.962 161.091 359.024 161.09C354.839 161.088 350.655 161.083 346.47 161.077C339.852 161.069 333.234 161.074 326.615 161.083C324.942 161.085 324.942 161.085 323.234 161.087C320.952 161.091 318.669 161.094 316.387 161.097C300.972 161.118 285.558 161.132 270.143 161.1C259.756 161.078 249.368 161.081 238.981 161.113C233.481 161.129 227.983 161.132 222.484 161.105C217.307 161.08 212.131 161.088 206.954 161.12C205.056 161.126 203.158 161.12 201.261 161.102C189.903 160.613 189.903 160.613 179.996 165.304C178.35 167.071 178.35 167.071 177 169C176.457 169.682 175.914 170.364 175.354 171.066C173.599 173.573 173.345 175.598 172.937 178.621C172.782 179.716 172.626 180.81 172.466 181.938C172.312 183.093 172.158 184.248 172 185.438C169.976 199.734 169.976 199.734 168.25 206.5C166.924 211.739 166.672 216.616 167 222C167.66 222 168.32 222 169 222C169.33 223.65 169.66 225.3 170 227C171.32 227 172.64 227 174 227C174.33 229.97 174.66 232.94 175 236C175.66 236 176.32 236 177 236C177.381 238.326 177.713 240.661 178 243C177.67 243.33 177.34 243.66 177 244C176.855 245.44 176.773 246.886 176.719 248.332C176.681 249.213 176.644 250.094 176.605 251.002C176.571 251.929 176.536 252.857 176.5 253.813C176.431 255.632 176.358 257.451 176.281 259.27C176.236 260.485 176.236 260.485 176.189 261.726C176.006 263.922 175.563 265.875 175 268C174.959 269.395 174.958 270.792 175 272.188C175 273.446 175 274.704 175 276C174.67 276.33 174.34 276.66 174 277C173.716 279.221 173.552 281.443 173.379 283.676C173 286 173 286 171.965 288.043C170.705 290.234 170.705 290.234 171 294C171 297.761 170.723 298.899 169 302C169.33 302.99 169.66 303.98 170 305C169.633 306.809 169.633 306.809 169 309C168.605 311.017 168.231 313.038 167.875 315.062C167.687 316.105 167.499 317.148 167.305 318.223C166.795 321.082 166.795 321.082 168 324C167.187 325.812 167.187 325.812 166 328C164.635 331.413 163.996 333.8 164.062 337.5C163.991 341.484 162.947 343.574 161 347C159.926 349.961 159.926 349.961 159.5 353C159 356 159 356 158 359C158 360.093 158 361.186 158 362.312C158 366 158 366 157.5 368.812C156.915 372.539 157.018 376.067 157.16 379.828C157 382 157 382 155 384C154.881 386.701 154.86 389.305 154.937 392C155.121 399.759 155.121 399.759 154 402C163.205 402.093 172.411 402.164 181.616 402.207C185.891 402.228 190.165 402.256 194.439 402.302C198.563 402.345 202.686 402.369 206.81 402.38C208.385 402.387 209.959 402.401 211.534 402.423C213.737 402.452 215.939 402.456 218.142 402.454C219.396 402.463 220.651 402.472 221.944 402.481C225.105 402.301 225.105 402.301 226.929 399.972C227.282 399.321 227.636 398.67 228 398C227.34 397.01 226.68 396.02 226 395C226.403 392.179 227.515 389.699 228.562 387.062C230.332 381.932 230.196 377.1 230.008 371.723C230 369 230 369 231 367C230.67 366.34 230.34 365.68 230 365C230.66 364.67 231.32 364.34 232 364C232.394 361.054 232.394 361.054 232.5 357.625C232.779 351.331 232.779 351.331 235 348C235.371 345.164 235.505 342.352 235.656 339.496C236 337 236 337 238 335C238.425 332.966 238.425 332.966 238.562 330.688C238.837 327.385 239.343 324.247 240 321C240.345 318.668 240.678 316.335 241 314C241.452 310.721 241.904 307.471 242.562 304.227C243.084 301.949 243.084 301.949 243 299.375C243 297 243 297 244 294C243.34 294 242.68 294 242 294C243.75 289.125 243.75 289.125 246 288C245.095 285.284 244.075 282.652 243 280C243.99 279.67 244.98 279.34 246 279C246.195 277.397 246.381 275.792 246.562 274.188C246.719 272.848 246.719 272.848 246.879 271.48C247.157 268.866 247.157 268.866 246 266C246.051 264.063 246.051 264.063 246.312 262C246.391 261.319 246.47 260.639 246.551 259.938C247 258 247 258 249 255C249.242 252.026 249.242 252.026 249.125 248.813C249.107 247.726 249.089 246.639 249.07 245.52C249.047 244.688 249.024 243.857 249 243C249.66 243 250.32 243 251 243C251.227 241.763 251.454 240.525 251.687 239.25C252.716 234.979 254.521 233.655 258 231C258.419 228.331 258.419 228.331 258 226C259.98 226.33 261.96 226.66 264 227C264 227.33 264 227.66 264 228C266.083 228.027 268.167 228.046 270.25 228.063C271.99 228.08 271.99 228.08 273.766 228.098C276.431 228.017 278.464 227.695 281 227C281.701 227.144 282.402 227.289 283.125 227.438C288.906 228.569 294.796 229.04 300 226C301.148 235.41 301.148 235.41 301 240C302.98 238.02 302.98 238.02 305 236C305.857 239.428 306.012 241.628 305 245C305 245.99 305 246.98 305 248C304.67 248.825 304.34 249.65 304 250.5C303.054 253.811 302.925 256.041 303 259.438C303.099 264.036 302.31 267.578 301 272C300.957 273.52 300.96 275.042 301 276.563C301.126 281.847 299.945 285.582 297 290C296.833 292.5 296.833 292.5 297 295C297 300.098 296.344 304.806 294.937 309.688C293.887 312.827 293.887 312.827 294 315.5C294 318.887 292.951 321.757 292 325C291.835 326.196 291.67 327.393 291.5 328.625C291 332 291 332 289.965 334.34C288.846 337.424 288.899 339.674 289.062 342.938C289.165 347.862 288.519 350.697 286 355C285.749 357.626 285.749 357.626 286 360C286 361.658 285.994 363.315 285.965 364.973C285.795 369.117 285.795 369.117 287 373C286.34 373.33 285.68 373.66 285 374C284.222 377.82 283.756 380.268 285 384C284.526 384.804 284.051 385.609 283.562 386.438C281.197 391.183 281.197 391.183 282 402C306.42 402 330.84 402 356 402C356.33 401.34 356.66 400.68 357 400C355.625 398.458 355.625 398.458 354 397C353.34 397 352.68 397 352 397C352.351 396.051 352.701 395.103 353.062 394.125C354.464 389.353 353.721 384.845 353 380C353.99 379.67 354.98 379.34 356 379C356.037 378.397 356.075 377.793 356.113 377.172C356.212 375.973 356.212 375.973 356.312 374.75C356.37 373.961 356.429 373.172 356.488 372.359C357.09 369.583 358.281 368.229 360 366C362.111 359.56 362.357 352.6 362.754 345.883C362.962 343.448 363.322 341.336 364 339C364.855 335.769 365.038 332.82 365 329.5C364.842 314.474 364.842 314.474 367 308C367.04 305.667 367.044 303.333 367 301C367.99 300.67 368.98 300.34 370 300C372.95 292.21 373.398 283.752 373.691 275.508C374.018 271.8 374.953 268.562 376 265C375.714 263.325 375.382 261.656 375 260C375.299 257.995 375.634 255.994 376 254C375.979 252.989 375.959 251.979 375.937 250.938C376.004 247.818 376.814 245.847 378 243C377.67 242.34 377.34 241.68 377 241C377.557 239.113 377.557 239.113 378.125 237.188C379.045 233.863 379.139 233.304 377.625 230C376.821 229.01 376.821 229.01 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222C379.66 222 380.32 222 381 222C381.073 220.935 381.073 220.935 381.148 219.848C381.223 218.929 381.298 218.009 381.375 217.063C381.479 215.688 381.479 215.688 381.586 214.285C381.723 213.531 381.859 212.777 382 212C382.66 211.67 383.32 211.34 384 211C383.67 210.01 383.34 209.02 383 208C383.433 204.625 384.351 201.968 386 199C385.34 198.34 384.68 197.68 384 197C384.059 194.941 384.059 194.941 384.437 192.563C384.933 189.394 385.043 188.129 384 185C384.66 185 385.32 185 386 185C388.447 180.638 389.503 176.973 390 172C390.66 172 391.32 172 392 172C392 168.37 392 164.74 392 161C388.01 160.397 388.01 160.397 384 160ZM163 334C162.67 334.99 162.34 335.98 162 337C162.66 337 163.32 337 164 337C163.67 336.01 163.34 335.02 163 334Z" fill="#C6C6C6"/>
<path d="M390 172C391.804 174.759 392.013 175.89 391.625 179.25C391.419 180.158 391.213 181.065 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C394.469 191.011 392.901 202.006 391.003 212.96C390.409 216.41 389.884 219.847 389.477 223.324C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.154 236.576 387.026 237.645 386.895 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.978 246.593 385.85 247.659 385.719 248.758C385.548 250.23 385.548 250.23 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.938 263.062C382.847 263.821 382.756 264.58 382.662 265.361C382.438 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.072 380.07 272.625C380.315 283.257 378.766 293.843 376.504 304.211C375.657 308.9 375.189 313.639 374.697 318.377C374.103 323.897 374.103 323.897 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.702 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.644 354.751 368.644 354.751 368.438 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.336 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.594 365.046 370.189 365.07 370.801C365.234 378.301 365.266 386.601 361 393C360.796 395.22 360.796 395.22 360.938 397.562C361.098 401.805 361.098 401.805 360 404C330.63 404 301.26 404 271 404C271 401.69 271 399.38 271 397C271.66 397 272.32 397 273 397C272.988 396.432 272.977 395.863 272.965 395.277C272.908 390.393 273.18 385.815 274 381C274.66 381 275.32 381 276 381C275.981 379.711 275.961 378.422 275.941 377.094C275.942 372.178 276.368 367.378 276.938 362.5C277.068 361.286 277.068 361.286 277.201 360.047C277.871 354.129 277.871 354.129 279 353C279.286 351.236 279.515 349.463 279.719 347.688C279.846 346.612 279.974 345.537 280.105 344.43C280.301 342.732 280.301 342.732 280.5 341C280.756 338.77 281.017 336.541 281.281 334.312C281.395 333.319 281.509 332.325 281.627 331.301C282 329 282 329 283 328C283.213 326.673 283.37 325.337 283.5 324C283.583 323.196 283.665 322.391 283.75 321.562C283.833 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.572 313.257 284.644 312.515 284.719 311.75C285 310 285 310 286 309C286.298 307.152 286.539 305.294 286.754 303.434C286.886 302.309 287.018 301.184 287.154 300.025C287.289 298.841 287.424 297.657 287.562 296.438C287.77 294.656 287.77 294.656 287.982 292.838C288.325 289.892 288.664 286.946 289 284C289.66 284 290.32 284 291 284C290.959 282.845 290.918 281.69 290.875 280.5C290.867 275.782 291.36 271.175 291.938 266.5C292.068 265.422 292.068 265.422 292.201 264.322C292.873 259.127 292.873 259.127 294 258C294.213 256.673 294.37 255.337 294.5 254C294.583 253.196 294.665 252.391 294.75 251.562C294.833 250.717 294.915 249.871 295 249C295.163 247.333 295.329 245.666 295.5 244C295.572 243.257 295.644 242.515 295.719 241.75C296 240 296 240 297 239C297.232 237.485 297.412 235.962 297.562 234.438C297.688 233.198 297.688 233.198 297.816 231.934C297.877 231.296 297.938 230.657 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.312C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.071 263.762 256.071 263.762 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.194 305.377 249.072 306.301 248.947 307.253C248.82 308.242 248.693 309.231 248.562 310.25C248.298 312.258 248.032 314.266 247.766 316.273C247.571 317.742 247.571 317.742 247.373 319.241C246.661 324.506 245.841 329.754 245 335C244.01 335.33 243.02 335.66 242 336C240.521 342.945 240.521 342.945 240 350C239.34 350.619 238.68 351.238 238 351.875C235.762 353.795 235.762 353.795 235.875 356.312C235.937 357.643 235.937 357.643 236 359C235.124 362.388 234.106 365.681 233 369C233.032 370.73 233.099 372.459 233.188 374.188C233.247 379.617 232.433 384.454 231.125 389.688C230.951 390.395 230.777 391.102 230.598 391.831C230.137 393.574 229.576 395.291 229 397C228.34 397.33 227.68 397.66 227 398C226.67 397.34 226.34 396.68 226 396C225.34 395.67 224.68 395.34 224 395C224.639 393.866 225.279 392.731 225.938 391.562C229.251 384.913 229.143 378.145 228.938 370.848C229 369 229 369 230 367C229.67 366.01 229.34 365.02 229 364C229.99 364 230.98 364 232 364C231.977 363.096 231.954 362.193 231.93 361.262C231.912 360.082 231.894 358.903 231.875 357.688C231.852 356.516 231.829 355.344 231.805 354.137C232 351 232 351 234 348C234.371 345.164 234.505 342.352 234.656 339.496C235 337 235 337 237 335C237.425 332.966 237.425 332.966 237.562 330.688C237.837 327.385 238.343 324.247 239 321C239.345 318.668 239.678 316.335 240 314C240.452 310.72 240.904 307.471 241.566 304.227C242.093 301.948 242.093 301.948 241.938 299.375C242 297 242 297 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288C244.66 288 245.32 288 246 288C245.257 286.855 245.257 286.855 244.5 285.688C243 283 243 283 243 280C243.99 279.505 243.99 279.505 245 279C245.508 276.748 245.508 276.748 245.688 274.125C245.774 273.241 245.86 272.356 245.949 271.445C246.14 268.86 246.14 268.86 245 266C245.051 264.062 245.051 264.062 245.312 262C245.391 261.319 245.47 260.639 245.551 259.938C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243C249.66 243 250.32 243 251 243C250.897 242.134 250.794 241.267 250.688 240.375C251.119 235.718 252.727 234.273 256 231C256.66 231 257.32 231 258 231C258 229.35 258 227.7 258 226C260.31 226 262.62 226 265 226C265 226.33 265 226.66 265 227C266.917 227.027 268.833 227.046 270.75 227.062C271.817 227.074 272.885 227.086 273.984 227.098C276.549 227.015 278.55 226.659 281 226C281.701 226.144 282.402 226.289 283.125 226.438C289.114 227.609 295.494 227.936 301 225C301.169 226.583 301.335 228.166 301.5 229.75C301.593 230.632 301.686 231.513 301.781 232.422C302 235 302 235 302 239C302.99 236.69 303.98 234.38 305 232C305.33 232 305.66 232 306 232C306.197 233.415 306.382 234.832 306.562 236.25C306.719 237.433 306.719 237.433 306.879 238.641C307.001 241.027 306.637 242.717 306 245C306 245.99 306 246.98 306 248C305.67 248.825 305.34 249.65 305 250.5C304.054 253.811 303.925 256.041 304 259.438C304.099 264.036 303.31 267.578 302 272C301.957 273.52 301.96 275.042 302 276.562C302.126 281.847 300.945 285.582 298 290C297.833 292.5 297.833 292.5 298 295C298 300.098 297.344 304.806 295.938 309.688C294.887 312.827 294.887 312.827 295 315.5C295 318.887 293.951 321.757 293 325C292.835 326.196 292.67 327.393 292.5 328.625C292 332 292 332 290.965 334.34C289.846 337.424 289.899 339.674 290.062 342.938C290.165 347.862 289.519 350.697 287 355C286.749 357.626 286.749 357.626 287 360C287 360.99 287 361.98 287 363C287.023 363.761 287.046 364.521 287.07 365.305C287.174 370.163 286.879 373.489 285 378C285.186 378.969 285.371 379.939 285.562 380.938C286 384 286 384 284.625 386.625C282.233 391.592 282.292 396.561 282 402C283.116 401.929 284.232 401.857 285.382 401.783C300.341 400.896 315.269 400.885 330.25 400.938C332.76 400.943 335.271 400.947 337.781 400.951C343.854 400.962 349.927 400.979 356 401C355.34 400.01 354.68 399.02 354 398C353.01 398.33 352.02 398.66 351 399C351.144 398.215 351.289 397.43 351.438 396.621C352.704 389.791 352.704 389.791 353 382.875C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366C361.015 359.506 361.356 352.628 361.754 345.883C361.962 343.448 362.322 341.336 363 339C363.855 335.769 364.038 332.82 364 329.5C363.917 320.171 364.075 309.946 367 301C367.66 300.67 368.32 300.34 369 300C371.693 292.038 372.394 283.855 372.691 275.508C373.018 271.8 373.953 268.562 375 265C374.714 263.325 374.382 261.656 374 260C374.299 257.995 374.634 255.994 375 254C374.979 252.989 374.959 251.979 374.938 250.938C375.004 247.818 375.814 245.847 377 243C376.67 242.34 376.34 241.68 376 241C376.351 239.742 376.701 238.484 377.062 237.188C378.082 233.48 377.938 231.445 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222C379.66 222 380.32 222 381 222C381 218.7 381 215.4 381 212C381.99 211.67 382.98 211.34 384 211C383.34 210.67 382.68 210.34 382 210C382.33 207.36 382.66 204.72 383 202C383.99 201.67 384.98 201.34 386 201C385.499 200.643 384.997 200.286 384.48 199.918C382.255 197.035 382.927 194.856 383.312 191.312C383.432 190.133 383.552 188.954 383.676 187.738C383.783 186.835 383.89 185.931 384 185C384.66 185 385.32 185 386 185C386.289 183.783 386.577 182.566 386.875 181.312C387.678 178.082 388.663 175.057 390 172Z" fill="#BEBABD"/>
<path d="M501 128C502.32 128.33 503.64 128.66 505 129C504.34 129.99 503.68 130.98 503 132C504.32 131.67 505.64 131.34 507 131C506.515 131.657 506.031 132.315 505.531 132.992C503.324 137.328 503.533 141.544 503.473 146.293C503.305 151.572 503.305 151.572 501.613 153.945C498.552 155.946 495.93 156.177 492.375 155.5C489.274 155.041 487.022 155.111 483.938 155.438C475.978 156.276 467.851 156.781 460 155C453.63 153.918 446.23 152.801 440 155C438.532 156.851 438.532 156.851 438 159C438.33 159.66 438.66 160.32 439 161C438.949 163.312 438.949 163.312 438.688 166C438.609 166.887 438.53 167.774 438.449 168.688C438 171 438 171 436 173C435.833 176.083 435.833 176.083 436 179C436.66 179 437.32 179 438 179C438.33 178.34 438.66 177.68 439 177C439.081 178.624 439.139 180.25 439.188 181.875C439.24 183.232 439.24 183.232 439.293 184.617C439.196 185.404 439.1 186.19 439 187C438.01 187.66 437.02 188.32 436 189C436 189.99 436 190.98 436 192C434.515 192.99 434.515 192.99 433 194C433.162 194.519 433.325 195.039 433.492 195.574C435.004 202.794 434.833 211.82 433 219C432.299 219.866 431.598 220.733 430.875 221.625C429.947 222.801 429.947 222.801 429 224C429.329 226.559 429.329 226.559 430 229C429.062 231.312 429.062 231.312 428 233C428.66 233.33 429.32 233.66 430 234C429.484 235.031 428.969 236.062 428.438 237.125C426.834 240.822 427.257 243.037 428 247C427.062 250.875 427.062 250.875 426 254C426.99 254.99 427.98 255.98 429 257C429.66 256.67 430.32 256.34 431 256C431 256.99 431 257.98 431 259C432.32 259.33 433.64 259.66 435 260C435 260.66 435 261.32 435 262C435.66 262 436.32 262 437 262C437 262.99 437 263.98 437 265C438.196 264.814 439.393 264.629 440.625 264.438C442.844 264.41 442.844 264.41 445 265C446.845 267.154 448.141 269.404 449.547 271.863C450.958 274.332 450.958 274.332 454.375 275.562C455.241 275.707 456.108 275.851 457 276C457 276.66 457 277.32 457 278C459.163 278.561 461.297 279.052 463.5 279.438C466.99 280.223 469.262 280.857 471.25 283.938C472 286 472 286 472 289C473.32 288.67 474.64 288.34 476 288C476 288.66 476 289.32 476 290C476.99 289.67 477.98 289.34 479 289C479.33 289.99 479.66 290.98 480 292C481.654 292.697 483.323 293.361 485 294C485.474 294.495 485.949 294.99 486.438 295.5C488.653 297.627 491.091 298.16 494 299C494 299.66 494 300.32 494 301C495.207 301.433 495.207 301.433 496.438 301.875C499 303 499 303 500 305C501.207 305.433 501.207 305.433 502.438 305.875C505 307 505 307 506.312 309.125C506.539 309.744 506.766 310.363 507 311C510.61 310.344 510.61 310.344 514 309C514 310.32 514 311.64 514 313C514.66 313 515.32 313 516 313C516.33 313.66 516.66 314.32 517 315C519.025 315.652 519.025 315.652 521 316C521 316.99 521 317.98 521 319C522.32 319.33 523.64 319.66 525 320C525 320.66 525 321.32 525 322C521.538 325 521.538 325 519 325C515.202 326.662 513.335 327.498 511 331C507.185 332.242 505.135 332.038 501.25 330.938C498 329 498 329 496.562 326.25C495.96 322.766 495.859 319.529 496 316C494.68 315.67 493.36 315.34 492 315C492 314.34 492 313.68 492 313C494.97 313 497.94 313 501 313C501 315.97 501 318.94 501 322C506.28 321.67 511.56 321.34 517 321C516.67 320.01 516.34 319.02 516 318C514.108 317.319 514.108 317.319 512 317C511.01 316.67 510.02 316.34 509 316C509 315.34 509 314.68 509 314C507.68 313.67 506.36 313.34 505 313C505 312.34 505 311.68 505 311C502.69 310.34 500.38 309.68 498 309C498 308.34 498 307.68 498 307C497.278 306.732 496.556 306.464 495.812 306.188C493.002 305.001 490.516 303.725 488 302C488 301.34 488 300.68 488 300C487.484 299.917 486.969 299.835 486.438 299.75C482.955 298.679 480.128 296.865 477 295C477 294.34 477 293.68 477 293C475.701 292.629 475.701 292.629 474.375 292.25C470.789 290.922 468.037 289.314 465 287C465 286.34 465 285.68 465 285C463.68 284.67 462.36 284.34 461 284C461 283.34 461 282.68 461 282C459.824 281.783 459.824 281.783 458.625 281.562C456 281 456 281 454 280C454 279.34 454 278.68 454 278C453.165 277.845 453.165 277.845 452.312 277.688C449.552 276.867 447.428 275.533 445 274C444.34 273.67 443.68 273.34 443 273C443 272.34 443 271.68 443 271C441.02 270.34 439.04 269.68 437 269C437 268.34 437 267.68 437 267C435.68 266.67 434.36 266.34 433 266C433 265.34 433 264.68 433 264C432.402 263.856 431.804 263.711 431.188 263.562C429.438 263.113 427.713 262.571 426 262C425.67 261.34 425.34 260.68 425 260C422.983 258.866 422.983 258.866 421 258C420.729 251.734 421.167 245.649 421.938 239.438C422.024 238.723 422.111 238.008 422.201 237.271C422.871 232.129 422.871 232.129 424 231C424.286 229.163 424.515 227.317 424.719 225.469C424.846 224.349 424.974 223.228 425.105 222.074C425.236 220.895 425.366 219.715 425.5 218.5C425.756 216.177 426.017 213.854 426.281 211.531C426.452 209.978 426.452 209.978 426.627 208.393C427 206 427 206 428 205C428.375 202.166 428.706 199.342 429 196.5C429.865 188.135 429.865 188.135 431 187C431.299 185.078 431.539 183.148 431.754 181.215C431.886 180.045 432.018 178.875 432.154 177.67C432.289 176.438 432.424 175.207 432.562 173.938C432.701 172.702 432.84 171.466 432.982 170.193C433.325 167.129 433.665 164.065 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.938 157.188C435.891 154.359 436.083 152.751 437 150C438.105 149.985 438.105 149.985 439.233 149.969C446.164 149.871 453.095 149.768 460.026 149.661C463.59 149.605 467.153 149.552 470.717 149.503C474.81 149.446 478.903 149.381 482.996 149.316C484.924 149.291 484.924 149.291 486.891 149.266C488.072 149.246 489.254 149.226 490.47 149.205C491.516 149.19 492.562 149.174 493.64 149.158C495.956 149.263 495.956 149.263 497 148C497.4 145.145 497.752 142.303 498.062 139.438C498.153 138.631 498.244 137.825 498.338 136.994C498.562 134.997 498.782 132.998 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#530B67"/>
<path d="M172 150C200.757 149.977 229.514 149.96 258.271 149.949C261.663 149.948 265.056 149.946 268.448 149.945C269.123 149.945 269.799 149.945 270.494 149.944C281.441 149.94 292.387 149.932 303.334 149.923C314.559 149.914 325.785 149.908 337.01 149.906C343.318 149.905 349.626 149.902 355.934 149.894C361.865 149.888 367.796 149.885 373.727 149.887C375.91 149.887 378.092 149.885 380.275 149.881C383.243 149.876 386.211 149.877 389.18 149.88C390.053 149.877 390.927 149.874 391.827 149.871C397.772 149.886 397.772 149.886 400 151C400 152.98 400 154.96 400 157C399.34 157 398.68 157 398 157C398.041 158.196 398.083 159.393 398.125 160.625C398.146 167.163 397.026 173.559 396 180C395.34 180 394.68 180 394 180C394 180.66 394 181.32 394 182C393.01 182 392.02 182 391 182C390.862 174.934 391.252 168.026 392 161C390.68 161 389.36 161 388 161C388.33 160.01 388.66 159.02 389 158C385.224 156.741 381.697 156.855 377.763 156.86C376.913 156.857 376.063 156.854 375.188 156.851C372.33 156.842 369.471 156.84 366.613 156.839C364.569 156.834 362.524 156.829 360.479 156.824C354.917 156.811 349.355 156.804 343.793 156.8C340.322 156.797 336.85 156.793 333.378 156.788C322.525 156.775 311.672 156.765 300.818 156.761C288.273 156.757 275.727 156.739 263.182 156.71C253.494 156.689 243.807 156.678 234.119 156.677C228.328 156.676 222.537 156.67 216.746 156.652C211.303 156.636 205.859 156.634 200.416 156.642C198.414 156.643 196.413 156.639 194.411 156.629C191.686 156.616 188.962 156.622 186.237 156.633C185.039 156.62 185.039 156.62 183.817 156.608C179.65 156.576 179.65 156.576 176.11 158.523C175.744 159.01 175.378 159.498 175 160C174.34 160 173.68 160 173 160C172.67 161.32 172.34 162.64 172 164C171.01 163.67 170.02 163.34 169 163C168.674 159.523 169.262 157.013 170.512 153.813C170.789 153.097 171.065 152.382 171.35 151.645C171.565 151.102 171.779 150.559 172 150Z" fill="#A2A1A3"/>
<path d="M301 225C301.495 227.97 301.495 227.97 302 231C300.68 231.33 299.36 231.66 298 232C298 231.34 298 230.68 298 230C292.891 229.975 287.783 229.957 282.674 229.945C280.935 229.94 279.196 229.933 277.456 229.925C274.962 229.912 272.467 229.907 269.973 229.902C268.799 229.895 268.799 229.895 267.602 229.887C265.734 229.887 263.867 229.938 262 230C260.3 231.7 260.548 233.984 260.281 236.312C260.154 237.388 260.026 238.463 259.895 239.57C259.764 240.702 259.634 241.834 259.5 243C259.244 245.23 258.983 247.459 258.719 249.688C258.605 250.681 258.491 251.675 258.373 252.699C258 255 258 255 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.378 260.844 256.291 261.653 256.201 262.486C256.114 263.336 256.027 264.187 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.437 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.023 274.548 253.046 275.096 253.07 275.66C253.249 283.528 252.368 291.259 251 299C250.67 299.33 250.34 299.66 250 300C249.726 301.477 249.509 302.964 249.316 304.453C249.133 305.839 249.133 305.839 248.947 307.253C248.756 308.737 248.756 308.737 248.562 310.25C248.298 312.258 248.032 314.266 247.766 316.273C247.636 317.253 247.507 318.232 247.373 319.241C246.661 324.506 245.841 329.754 245 335C243.515 335.495 243.515 335.495 242 336C240.521 342.945 240.521 342.945 240 350C239.34 350.619 238.68 351.238 238 351.875C235.762 353.795 235.762 353.795 235.875 356.312C235.937 357.643 235.937 357.643 236 359C235.124 362.388 234.106 365.681 233 369C233.032 370.73 233.099 372.459 233.188 374.188C233.247 379.617 232.433 384.454 231.125 389.688C230.951 390.395 230.777 391.102 230.598 391.831C230.137 393.574 229.576 395.291 229 397C228.34 397.33 227.68 397.66 227 398C226.67 397.34 226.34 396.68 226 396C225.34 395.67 224.68 395.34 224 395C224.639 393.866 225.279 392.731 225.938 391.562C229.251 384.913 229.143 378.145 228.938 370.848C229 369 229 369 230 367C229.67 366.01 229.34 365.02 229 364C229.99 364 230.98 364 232 364C231.977 363.096 231.954 362.193 231.93 361.262C231.912 360.082 231.894 358.903 231.875 357.688C231.852 356.516 231.829 355.344 231.805 354.137C232 351 232 351 234 348C234.371 345.164 234.505 342.352 234.656 339.496C235 337 235 337 237 335C237.425 332.966 237.425 332.966 237.562 330.688C237.837 327.385 238.343 324.247 239 321C239.345 318.668 239.678 316.335 240 314C240.452 310.72 240.904 307.471 241.566 304.227C242.093 301.948 242.093 301.948 241.938 299.375C242 297 242 297 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288C244.66 288 245.32 288 246 288C245.505 287.237 245.01 286.474 244.5 285.688C243 283 243 283 243 280C243.99 279.505 243.99 279.505 245 279C245.508 276.748 245.508 276.748 245.688 274.125C245.774 273.241 245.86 272.356 245.949 271.445C246.14 268.86 246.14 268.86 245 266C245.051 264.062 245.051 264.062 245.312 262C245.43 260.979 245.43 260.979 245.551 259.938C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243C249.66 243 250.32 243 251 243C250.897 242.134 250.794 241.267 250.688 240.375C251.119 235.718 252.727 234.273 256 231C256.66 231 257.32 231 258 231C258 229.35 258 227.7 258 226C260.31 226 262.62 226 265 226C265 226.33 265 226.66 265 227C266.917 227.027 268.833 227.046 270.75 227.062C271.817 227.074 272.885 227.086 273.984 227.098C276.549 227.015 278.55 226.659 281 226C281.701 226.144 282.402 226.289 283.125 226.438C290.012 227.785 294.945 225 301 225Z" fill="#C9C9C9"/>
<path d="M418.747 311.886C419.708 311.887 420.668 311.887 421.658 311.887C422.693 311.892 423.727 311.897 424.793 311.902C426.385 311.904 426.385 311.904 428.009 311.907C431.402 311.912 434.795 311.925 438.187 311.938C440.486 311.943 442.785 311.947 445.084 311.951C450.723 311.962 456.361 311.979 462 312C462 312.33 462 312.66 462 313C448.8 313.33 435.6 313.66 422 314C421.34 315.65 420.68 317.3 420 319C418.68 319 417.36 319 416 319C414.244 322.888 413.323 326.759 412.465 330.914C412 333 412 333 411 336C410.781 339.281 410.821 341.558 412.062 344.625C413.243 348.874 412.758 352.279 412.285 356.629C411.883 361.386 412.025 366.103 412.16 370.871C412 374 412 374 411.035 376.328C409.512 380.259 409.533 384.131 409.375 388.313C409.336 389.148 409.298 389.984 409.258 390.846C409.164 392.897 409.081 394.948 409 397C412.343 397.074 414.804 397.065 418 396C418.495 396.99 418.495 396.99 419 398C423.144 398.025 427.288 398.043 431.433 398.055C432.84 398.06 434.247 398.067 435.655 398.075C437.688 398.088 439.721 398.093 441.754 398.098C442.974 398.103 444.194 398.108 445.451 398.114C449.055 398.066 449.055 398.066 452.801 397.435C456.118 396.984 457.286 397.154 460 399C460 400.32 460 401.64 460 403C460.66 403 461.32 403 462 403C461.795 403.906 461.59 404.812 461.379 405.746C459.885 412.501 458.594 419.107 458 426C456.68 426 455.36 426 454 426C453.721 417.902 454.808 411.342 456 403C438.84 403 421.68 403 404 403C404 402.34 404 401.68 404 401C403.01 401 402.02 401 401 401C401 400.01 401 399.02 401 398C400.34 398 399.68 398 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.066 389.324 398.256 388.711 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.063C400.211 375.188 400.298 374.313 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.981 365.854 402.961 364.708 402.941 363.527C402.942 359.149 403.368 354.899 403.937 350.563C404.068 349.485 404.068 349.485 404.201 348.385C404.871 343.129 404.871 343.129 406 342C406.274 340.368 406.491 338.726 406.684 337.082C406.807 336.075 406.93 335.067 407.057 334.029C407.308 331.904 407.558 329.779 407.807 327.654C409.11 317.03 409.11 317.03 411 313C413.904 312.032 415.728 311.879 418.747 311.886Z" fill="#56066E"/>
<path d="M204 452C213.9 452 223.8 452 234 452C234 454.97 234 457.94 234 461C229.229 462.234 224.575 462.113 219.687 462.062C218.434 462.056 218.434 462.056 217.154 462.049C215.103 462.037 213.051 462.019 211 462C210.67 462.99 210.34 463.98 210 465C210.62 464.99 211.241 464.979 211.88 464.968C214.691 464.927 217.502 464.901 220.312 464.875C221.289 464.858 222.265 464.841 223.271 464.824C224.209 464.818 225.147 464.811 226.113 464.805C226.977 464.794 227.841 464.784 228.732 464.773C231 465 231 465 234 467C234.221 469.951 234.281 472.684 234.187 475.625C234.167 476.828 234.167 476.828 234.146 478.055C234.111 480.037 234.057 482.018 234 484C232.02 484.495 232.02 484.495 230 485C230 485.66 230 486.32 230 487C225.563 487.087 221.125 487.14 216.687 487.188C214.794 487.225 214.794 487.225 212.861 487.264C211.049 487.278 211.049 487.278 209.199 487.293C207.526 487.317 207.526 487.317 205.819 487.341C203 487 203 487 201.05 485.919C200 484 200 484 201 477C209.25 477 217.5 477 226 477C226 476.01 226 475.02 226 474C225.38 474.005 224.759 474.01 224.12 474.016C221.309 474.037 218.498 474.05 215.687 474.062C214.711 474.071 213.735 474.079 212.728 474.088C211.791 474.091 210.853 474.094 209.887 474.098C209.023 474.103 208.159 474.108 207.268 474.114C205 474 205 474 202 473C200.794 469.381 200.892 466.075 200.937 462.312C200.942 461.611 200.946 460.909 200.951 460.186C200.963 458.457 200.981 456.728 201 455C201.99 454.67 202.98 454.34 204 454C204 453.34 204 452.68 204 452Z" fill="#880790"/>
<path d="M468.125 450.813C469.446 450.794 469.446 450.794 470.793 450.775C479.169 450.756 479.169 450.756 483 453C485.429 456.644 485.329 458.599 485.375 462.938C485.403 464.163 485.432 465.389 485.461 466.652C484.93 470.509 484.002 471.632 481 474C481.66 475.114 482.32 476.228 483 477.375C485 480.75 485 480.75 485 483C485.66 483 486.32 483 487 483C486.67 484.32 486.34 485.64 486 487C482.7 487 479.4 487 476 487C476 486.01 476 485.02 476 484C475.34 484 474.68 484 474 484C472.539 481.353 472 480.106 472 477C471.34 477 470.68 477 470 477C470 476.01 470 475.02 470 474C467.03 474 464.06 474 461 474C461 477.63 461 481.26 461 485C460.34 485 459.68 485 459 485C459 485.66 459 486.32 459 487C456.36 487 453.72 487 451 487C451 479.74 451 472.48 451 465C459.25 465 467.5 465 476 465C476 464.01 476 463.02 476 462C475.314 462.005 474.627 462.01 473.92 462.016C470.822 462.037 467.724 462.05 464.625 462.063C463.545 462.071 462.465 462.079 461.352 462.088C459.805 462.093 459.805 462.093 458.227 462.098C457.273 462.103 456.32 462.108 455.338 462.114C453 462 453 462 451 461C451 458.03 451 455.06 451 452C456.736 451.023 462.312 450.817 468.125 450.813Z" fill="#B7B6B7"/>
<path d="M376.418 451.707C377.672 451.717 378.925 451.726 380.217 451.736C381.527 451.761 382.837 451.787 384.188 451.812C385.523 451.828 386.858 451.841 388.193 451.854C391.463 451.889 394.731 451.938 398 452C398 452.66 398 453.32 398 454C399.485 454.495 399.485 454.495 401 455C401.116 459.583 401.187 464.166 401.25 468.75C401.3 470.703 401.3 470.703 401.352 472.695C401.364 473.946 401.377 475.196 401.391 476.484C401.412 477.636 401.433 478.789 401.454 479.976C401 483 401 483 399.355 485.383C396.339 487.454 394.561 487.462 390.922 487.391C389.762 487.378 388.602 487.365 387.406 487.352C386.2 487.318 384.993 487.285 383.75 487.25C382.528 487.232 381.306 487.214 380.047 487.195C377.03 487.148 374.016 487.082 371 487C371 486.34 371 485.68 371 485C369.68 484.34 368.36 483.68 367 483C366.926 479.067 366.871 475.135 366.835 471.202C366.813 469.207 366.775 467.212 366.736 465.217C366.727 463.963 366.717 462.71 366.707 461.418C366.691 460.261 366.676 459.103 366.659 457.911C367 455 367 455 368.117 453.117C370.912 451.459 373.188 451.663 376.418 451.707ZM376 461C376 466.28 376 471.56 376 477C381.28 477 386.56 477 392 477C392 472.05 392 467.1 392 462C386.72 461.67 381.44 461.34 376 461Z" fill="#BBBBBC"/>
<path d="M508 128C519.57 127.977 531.139 127.959 542.709 127.948C548.081 127.943 553.452 127.936 558.824 127.925C564.005 127.914 569.185 127.908 574.366 127.905C576.346 127.903 578.326 127.9 580.306 127.894C583.072 127.887 585.837 127.886 588.603 127.886C589.428 127.883 590.253 127.879 591.103 127.876C596.772 127.886 596.772 127.886 599 129C599.043 130.666 599.041 132.334 599 134C598.67 134.33 598.34 134.66 598 135C597.34 139.95 596.68 144.9 596 150C609.2 150 622.4 150 636 150C636 150.33 636 150.66 636 151C637.98 151.33 639.96 151.66 642 152C642.33 153.32 642.66 154.64 643 156C642.443 155.814 641.886 155.629 641.312 155.438C638.999 154.85 638.999 154.85 636.689 155.462C632.002 156.4 627.266 156.185 622.5 156.188C621.467 156.2 620.435 156.212 619.371 156.225C617.873 156.228 617.873 156.228 616.344 156.23C615.438 156.235 614.533 156.239 613.6 156.243C610.738 155.976 608.631 155.124 606 154C603.672 153.632 601.338 153.298 599 153C597.661 152.691 596.323 152.371 595 152C594.505 153.485 594.505 153.485 594 155C591.569 152.883 590.155 151.465 589.125 148.375C589.084 147.591 589.043 146.808 589 146C589.66 145.34 590.32 144.68 591 144C591.465 140.878 591.465 140.878 591.625 137.375C591.7 136.186 591.775 134.998 591.852 133.773C591.925 132.401 591.925 132.401 592 131C590.68 130.67 589.36 130.34 588 130C588 130.66 588 131.32 588 132C588.66 132 589.32 132 590 132C590 135.63 590 139.26 590 143C589.67 143 589.34 143 589 143C588.783 141.36 588.783 141.36 588.562 139.688C588.117 136.069 588.117 136.069 587 133C585.648 133.007 585.648 133.007 584.269 133.013C575.765 133.054 567.261 133.084 558.757 133.104C554.385 133.114 550.013 133.128 545.642 133.151C541.421 133.173 537.2 133.185 532.979 133.19C531.37 133.193 529.762 133.201 528.154 133.211C525.896 133.226 523.64 133.228 521.382 133.227C520.099 133.231 518.815 133.236 517.493 133.241C513.999 133 511.252 132.263 508 131C508 130.01 508 129.02 508 128Z" fill="#440C53"/>
<path d="M169 262C170.125 265.75 170.125 265.75 169 268C169.173 269.018 169.346 270.037 169.524 271.086C170.074 275.606 169.515 279.205 168.625 283.625C168.486 284.362 168.347 285.1 168.203 285.859C167.648 288.782 167.072 291.689 166.399 294.586C165.913 297.107 165.913 297.107 166.016 300.133C165.996 305.115 165.398 309.94 164.75 314.875C164.617 315.897 164.485 316.92 164.348 317.973C163.445 324.585 162.171 330.961 160.484 337.411C158.642 344.771 157.878 352.265 157.127 359.804C156.545 365.214 155.722 369.194 153 374C152.833 377.417 152.833 377.417 153 381C152.746 383.682 152.375 386.331 152 389C151.34 389 150.68 389 150 389C150.33 389.99 150.66 390.98 151 392C151.068 393.728 151.085 395.458 151.063 397.188C151.054 398.089 151.045 398.99 151.035 399.918C151.024 400.605 151.012 401.292 151 402C151.66 402 152.32 402 153 402C153 402.66 153 403.32 153 404C150.36 404 147.72 404 145 404C144.005 400.872 144.05 398.863 144.813 395.688C146.044 390.078 146.766 384.448 147.496 378.754C148.084 374.373 148.809 370.026 149.563 365.672C149.964 363.222 150.283 360.779 150.563 358.312C151 355 151 355 152 354C152.275 352.257 152.492 350.504 152.684 348.75C152.807 347.666 152.93 346.582 153.057 345.465C153.307 343.186 153.557 340.908 153.807 338.629C154.453 332.947 155.242 327.426 156.574 321.863C157.095 319.585 157.367 317.328 157.563 315C157.894 311.106 157.894 311.106 159 310C159.286 308.163 159.515 306.317 159.719 304.469C159.846 303.349 159.974 302.228 160.106 301.074C160.236 299.895 160.366 298.715 160.5 297.5C160.757 295.177 161.017 292.854 161.281 290.531C161.452 288.978 161.452 288.978 161.627 287.393C162 285 162 285 163 284C163.376 281.374 163.707 278.76 164 276.125C164.87 268.39 164.87 268.39 166 265C166.66 265 167.32 265 168 265C168.33 264.01 168.66 263.02 169 262Z" fill="#C1BCC0"/>
<path d="M651 159C655.134 165.2 653.879 171.514 652.625 178.438C652.345 180.061 652.066 181.685 651.789 183.309C651.653 184.09 651.516 184.871 651.376 185.675C651.007 187.958 650.722 190.238 650.461 192.535C650 196 650 196 649 197C648.714 198.837 648.485 200.683 648.281 202.531C648.154 203.651 648.026 204.772 647.895 205.926C647.764 207.105 647.634 208.285 647.5 209.5C647.244 211.823 646.983 214.146 646.719 216.469C646.605 217.505 646.491 218.54 646.373 219.607C646 222 646 222 645 223C644.34 226.3 643.68 229.6 643 233C613.96 233 584.92 233 555 233C555 232.34 555 231.68 555 231C554.34 231 553.68 231 553 231C553.33 228.69 553.66 226.38 554 224C547.73 224 541.46 224 535 224C535 224.66 535 225.32 535 226C535.557 226.083 536.114 226.165 536.688 226.25C539.697 227.226 541.622 228.952 544 231C543.505 231.99 543.505 231.99 543 233C541.68 232.34 540.36 231.68 539 231C539 230.34 539 229.68 539 229C536.03 229.495 536.03 229.495 533 230C533 229.01 533 228.02 533 227C532.01 227 531.02 227 530 227C530.33 225.68 530.66 224.36 531 223C532.237 222.856 533.475 222.711 534.75 222.562C537.052 222.281 539.187 221.952 541.438 221.375C541.953 221.251 542.469 221.127 543 221C543.33 221.33 543.66 221.66 544 222C545.515 222.232 547.038 222.412 548.562 222.562C549.389 222.646 550.215 222.73 551.066 222.816C552.024 222.907 552.024 222.907 553 223C553 222.34 553 221.68 553 221C553.722 221.309 554.444 221.619 555.188 221.938C558.446 223.168 561.506 224 565 224C565.33 224.99 565.66 225.98 566 227C570.95 226.505 570.95 226.505 576 226C575.505 227.98 575.505 227.98 575 230C578.63 230.33 582.26 230.66 586 231C586.495 229.515 586.495 229.515 587 228C589.97 228 592.94 228 596 228C596 228.99 596 229.98 596 231C596.99 230.67 597.98 230.34 599 230C601.685 229.903 604.343 229.86 607.027 229.867C607.813 229.866 608.598 229.865 609.407 229.864C611.067 229.864 612.727 229.865 614.387 229.87C616.924 229.875 619.461 229.87 621.998 229.863C623.612 229.864 625.226 229.865 626.84 229.867C627.597 229.865 628.355 229.863 629.135 229.861C632.559 229.876 635.727 229.92 639 231C639.495 229.515 639.495 229.515 640 228C639.34 227.34 638.68 226.68 638 226C638.752 225.188 638.752 225.188 639.52 224.359C641.42 221.331 641.146 219.752 640.688 216.25C640.568 215.265 640.448 214.28 640.324 213.266C640.164 212.144 640.164 212.144 640 211C640.66 210.67 641.32 210.34 642 210C644.208 206.075 644.106 202.642 644.012 198.281C643.987 193.531 644.356 189.967 647 186C647.457 183.925 647.457 183.925 647.625 181.688C647.7 180.897 647.775 180.107 647.852 179.293C647.976 177.365 648 175.432 648 173.5C648 171 648 171 649 170C649.395 168.154 649.742 166.298 650.062 164.438C650.239 163.426 650.416 162.414 650.598 161.371C650.73 160.589 650.863 159.806 651 159Z" fill="#530E64"/>
<path d="M535 465C546.55 465 558.1 465 570 465C570 467.64 570 470.28 570 473C567.443 474.279 565.633 474.113 562.773 474.098C561.742 474.094 560.711 474.091 559.648 474.088C558.028 474.075 558.028 474.075 556.375 474.062C554.743 474.056 554.743 474.056 553.078 474.049C550.385 474.037 547.693 474.021 545 474C545 474.99 545 475.98 545 477C553.25 477 561.5 477 570 477C570 479.64 570 482.28 570 485C569.34 485 568.68 485 568 485C568 485.66 568 486.32 568 487C557.11 487 546.22 487 535 487C535 479.74 535 472.48 535 465Z" fill="#B9BAB9"/>
<path d="M390 178C390.33 179.32 390.66 180.64 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C394.469 191.011 392.901 202.006 391.003 212.96C390.409 216.41 389.884 219.847 389.476 223.324C389 227 389 227 388 230C387.73 231.832 387.495 233.669 387.281 235.508C387.09 237.111 387.09 237.111 386.894 238.746C386.631 241.006 386.368 243.267 386.105 245.527C385.914 247.126 385.914 247.126 385.719 248.758C385.605 249.739 385.491 250.72 385.373 251.731C385 254 385 254 384 255C383.6 257.689 383.249 260.364 382.937 263.062C382.847 263.821 382.756 264.58 382.662 265.361C382.437 267.24 382.218 269.12 382 271C381.34 271 380.68 271 380 271C380.023 271.536 380.046 272.072 380.07 272.625C380.316 283.307 378.757 293.981 376.508 304.406C375.433 309.897 374.751 315.457 374 321C373.34 320.67 372.68 320.34 372 320C371.608 318.346 371.279 316.677 371 315C370.67 314.01 370.34 313.02 370 312C369.508 306.402 370.222 301.211 371.426 295.754C372.308 291.524 372.905 287.255 373.535 282.98C373.953 280.299 374.463 277.66 375 275C375.609 271.502 376.215 268.003 376.807 264.502C377.439 260.847 378.161 257.262 379.098 253.672C380.137 250.074 380.137 250.074 380 246.562C380 243.677 380.204 241.787 380.875 239.062C381.908 234.824 382.449 230.579 382.937 226.25C383.493 221.379 384.237 216.749 385.5 212C387.384 204.483 387.81 196.844 388.353 189.137C388.425 188.13 388.497 187.123 388.57 186.086C388.63 185.179 388.689 184.272 388.75 183.337C389 181 389 181 390 178Z" fill="#C4C3C5"/>
<path d="M390 172C391.125 173.688 391.125 173.688 392 176C391.342 177.67 390.675 179.337 390 181C389.615 183.517 389.615 183.517 389.508 186.141C389.445 187.12 389.381 188.1 389.316 189.109C389.222 190.664 389.222 190.664 389.125 192.25C388.547 200.401 387.547 208.062 385.468 215.958C383.502 223.549 382.787 231.215 382 239C381.829 240.407 381.655 241.813 381.477 243.219C381.131 245.959 380.825 248.689 380.562 251.438C380.144 255.258 379.417 258.929 378.539 262.668C377.594 266.758 376.811 270.882 376 275C375.823 275.83 375.647 276.66 375.465 277.516C375.026 279.861 374.796 282.123 374.625 284.5C374.253 288.609 373.45 292.439 372.438 296.438C370.98 302.394 370.67 307.894 371 314C371.33 314 371.66 314 372 314C372.66 316.97 373.32 319.94 374 323C372.35 323 370.7 323 369 323C367.687 329.589 366.717 336.08 366.246 342.785C366 345 366 345 365 347C365.093 348.176 365.093 348.176 365.188 349.375C364.939 352.849 363.489 353.702 361 356C361.142 353.916 361.288 351.833 361.438 349.75C361.519 348.59 361.6 347.43 361.684 346.234C361.934 343.68 362.284 341.449 363 339C363.855 335.769 364.038 332.82 364 329.5C363.917 320.171 364.075 309.946 367 301C367.66 300.67 368.32 300.34 369 300C371.693 292.038 372.394 283.855 372.691 275.508C373.018 271.8 373.953 268.562 375 265C374.714 263.325 374.382 261.656 374 260C374.299 257.995 374.634 255.994 375 254C374.979 252.989 374.959 251.979 374.938 250.938C375.004 247.818 375.814 245.847 377 243C376.67 242.34 376.34 241.68 376 241C376.351 239.742 376.701 238.484 377.062 237.188C378.082 233.48 377.938 231.445 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222C379.66 222 380.32 222 381 222C381 218.7 381 215.4 381 212C382.485 211.505 382.485 211.505 384 211C383.34 210.67 382.68 210.34 382 210C382.33 207.36 382.66 204.72 383 202C383.99 201.67 384.98 201.34 386 201C385.499 200.643 384.997 200.286 384.48 199.918C382.255 197.035 382.927 194.856 383.312 191.312C383.432 190.133 383.552 188.954 383.676 187.738C383.783 186.835 383.89 185.931 384 185C384.66 185 385.32 185 386 185C386.433 183.175 386.433 183.175 386.875 181.312C387.678 178.082 388.663 175.057 390 172Z" fill="#DDDDDB"/>
<path d="M284 452C295.22 452 306.44 452 318 452C318 454.64 318 457.28 318 460C317.67 460.33 317.34 460.66 317 461C313.37 461 309.74 461 306 461C306 468.92 306 476.84 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C301.36 487 298.72 487 296 487C295.67 478.75 295.34 470.5 295 462C291.37 461.67 287.74 461.34 284 461C284 458.03 284 455.06 284 452Z" fill="#8A0894"/>
<path d="M404 353C404.66 353 405.32 353 406 353C406.054 355.208 406.093 357.417 406.125 359.625C406.148 360.855 406.171 362.085 406.195 363.352C406 367.001 405.19 369.571 404 373C403.502 375.779 403.184 378.57 402.875 381.375C402.789 382.111 402.702 382.847 402.613 383.605C402.403 385.403 402.201 387.201 402 389C402.639 389.309 403.279 389.619 403.937 389.938C406 391 406 391 407 392C407.041 394.333 407.042 396.667 407 399C408.429 398.955 408.429 398.955 409.886 398.908C413.459 398.795 417.032 398.684 420.605 398.573C422.144 398.525 423.683 398.476 425.222 398.427C439.68 397.967 439.68 397.967 445.328 398.008C449.04 398.098 449.04 398.098 452.812 397.375C456.099 396.988 457.313 397.173 460 399C460 400.32 460 401.64 460 403C460.66 403 461.32 403 462 403C461.795 403.906 461.59 404.812 461.379 405.746C459.885 412.501 458.594 419.107 458 426C456.68 426 455.36 426 454 426C453.721 417.902 454.808 411.342 456 403C438.84 403 421.68 403 404 403C404 402.34 404 401.68 404 401C403.01 401 402.02 401 401 401C401 400.01 401 399.02 401 398C400.34 398 399.68 398 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.066 389.324 398.256 388.711 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.062C400.211 375.188 400.298 374.313 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.969 365.206 402.969 365.206 402.937 363.375C402.931 359.82 403.301 356.494 404 353Z" fill="#5E0978"/>
<path d="M186.457 155.506C187.307 155.501 188.156 155.496 189.031 155.491C191.877 155.48 194.721 155.497 197.566 155.514C199.606 155.512 201.647 155.508 203.687 155.503C209.228 155.493 214.769 155.508 220.311 155.529C226.108 155.546 231.906 155.543 237.703 155.542C247.44 155.544 257.178 155.561 266.915 155.588C278.173 155.62 289.431 155.63 300.689 155.629C311.516 155.628 322.344 155.638 333.172 155.654C337.78 155.662 342.389 155.665 346.998 155.666C352.426 155.668 357.853 155.681 363.281 155.701C365.274 155.706 367.266 155.709 369.258 155.708C371.977 155.707 374.696 155.718 377.416 155.733C378.204 155.729 378.992 155.726 379.805 155.723C384.246 155.762 387.871 156.352 392 158C387.833 159.163 383.806 159.136 379.509 159.12C378.644 159.121 377.779 159.122 376.887 159.123C373.984 159.124 371.08 159.119 368.177 159.114C366.097 159.113 364.018 159.113 361.939 159.114C356.288 159.114 350.638 159.108 344.987 159.101C339.084 159.095 333.181 159.095 327.278 159.093C316.098 159.09 304.917 159.082 293.736 159.072C281.008 159.061 268.281 159.055 255.553 159.05C229.369 159.04 203.184 159.022 177 159C174.55 163.706 173.173 168.33 172.625 173.625C171.91 177.483 170.752 179.248 168 182C167.34 182 166.68 182 166 182C166.867 175.644 167.93 169.324 169 163C169.99 163 170.98 163 172 163C172.33 162.01 172.66 161.02 173 160C177.074 155.68 180.806 155.432 186.457 155.506Z" fill="#B9B8B9"/>
<path d="M627 285C627.66 285 628.32 285 629 285C629.33 285.66 629.66 286.32 630 287C630.99 287.33 631.98 287.66 633 288C633.101 294.754 633.133 301.328 632 308C631.67 308.33 631.34 308.66 631 309C630.713 310.91 630.485 312.829 630.281 314.75C630.09 316.498 630.09 316.498 629.894 318.281C629.764 319.508 629.634 320.736 629.5 322C629.243 324.417 628.983 326.834 628.719 329.25C628.605 330.328 628.491 331.405 628.373 332.516C628 335 628 335 627 336C626.726 337.562 626.509 339.133 626.316 340.707C626.194 341.681 626.072 342.654 625.947 343.658C625.82 344.699 625.693 345.74 625.562 346.812C624.65 354.085 623.677 361.319 622.406 368.539C621.778 372.345 621.384 376.162 621 380C620.34 380 619.68 380 619 380C618.67 380.99 618.34 381.98 618 383C617.67 383 617.34 383 617 383C616.72 373.092 616.518 364.052 619.398 354.469C620.249 350.977 619.864 348.455 619 345C620.485 344.505 620.485 344.505 622 344C622.606 340.895 623.004 338.107 622.875 334.938C623.06 329.108 624.576 323.638 626 318C625.01 318.495 625.01 318.495 624 319C622.875 311.25 622.875 311.25 624 309C624.381 301.294 623.967 293.647 623 286C624.32 286.33 625.64 286.66 627 287C627 286.34 627 285.68 627 285Z" fill="#530D65"/>
<path d="M372 322C372.66 322.66 373.32 323.32 374 324C373.67 324.33 373.34 324.66 373 325C372.787 326.327 372.63 327.663 372.5 329C372.417 329.804 372.335 330.609 372.25 331.438C372.167 332.283 372.085 333.129 372 334C371.837 335.667 371.671 337.334 371.5 339C371.428 339.743 371.356 340.485 371.281 341.25C371 343 371 343 370 344C369.702 345.848 369.461 347.706 369.246 349.566C369.114 350.691 368.982 351.816 368.846 352.975C368.711 354.159 368.576 355.343 368.438 356.562C368.299 357.75 368.16 358.938 368.018 360.162C367.675 363.108 367.336 366.054 367 369C366.34 369 365.68 369 365 369C365.023 369.606 365.046 370.212 365.07 370.836C365.206 377.149 364.462 382.864 363 389C362.34 388.67 361.68 388.34 361 388C360.67 388.99 360.34 389.98 360 391C359.34 391 358.68 391 358 391C358 392.32 358 393.64 358 395C357.34 395 356.68 395 356 395C355.67 395.99 355.34 396.98 355 398C352.938 398.688 352.938 398.688 351 399C351.144 398.215 351.289 397.43 351.438 396.621C352.704 389.791 352.704 389.791 353 382.875C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366C359.569 363.969 359.569 363.969 359.938 361.688C360.532 358.709 361.03 356.951 362.625 354.312C364.38 351.362 364.141 349.389 364 346C364.301 344.327 364.642 342.661 365 341C365.237 339.791 365.474 338.582 365.719 337.336C365.979 336.016 366.24 334.695 366.5 333.375C366.63 332.707 366.76 332.04 366.895 331.352C367.461 328.493 368.077 325.769 369 323C369.99 322.67 370.98 322.34 372 322Z" fill="#C5C4C5"/>
<path d="M305 232C305.33 232 305.66 232 306 232C306.197 233.415 306.382 234.832 306.563 236.25C306.667 237.039 306.771 237.828 306.879 238.641C307.001 241.027 306.637 242.717 306 245C306 245.99 306 246.98 306 248C305.67 248.825 305.34 249.65 305 250.5C304.054 253.811 303.926 256.041 304 259.438C304.099 264.036 303.31 267.578 302 272C301.957 273.52 301.96 275.042 302 276.562C302.126 281.847 300.945 285.582 298 290C297.833 292.5 297.833 292.5 298 295C298 300.098 297.344 304.806 295.938 309.688C294.887 312.827 294.887 312.827 295 315.5C295 318.887 293.951 321.757 293 325C292.835 326.196 292.67 327.393 292.5 328.625C292 332 292 332 290.965 334.34C289.846 337.424 289.899 339.674 290.063 342.938C290.165 347.862 289.519 350.697 287 355C286.749 357.626 286.749 357.626 287 360C287 360.99 287 361.98 287 363C287.023 363.761 287.046 364.521 287.07 365.305C287.174 370.163 286.88 373.489 285 378C285.186 378.969 285.371 379.939 285.563 380.938C286 384 286 384 284.625 386.625C282.24 391.578 282.255 396.566 282 402C281.01 402 280.02 402 279 402C278.645 394.328 279.149 387.274 280.715 379.754C282.777 369.605 283.799 359.279 285 349C285.66 349 286.32 349 287 349C287.026 347.693 287.052 346.386 287.078 345.039C287.386 334.284 288.508 324.346 291.086 313.906C292.053 309.962 292.498 306.079 292.789 302.031C293.114 298.907 294.095 295.999 295 293C295.144 291.866 295.289 290.731 295.438 289.562C295.898 286.648 296.442 284.77 297.563 282.125C298.742 279.15 298.994 277.625 298.938 274.293C298.828 267.598 300.04 261.034 301.081 254.442C301.439 252.176 301.788 249.91 302.135 247.643C302.359 246.193 302.583 244.743 302.809 243.293C302.913 242.62 303.017 241.947 303.124 241.254C303.62 238.128 304.159 235.053 305 232Z" fill="#DADAD9"/>
<path d="M172 150C209.29 150 246.58 150 285 150C283 153 283 153 281.155 153.675C278.919 154.012 276.779 154.16 274.518 154.205C273.628 154.225 272.737 154.245 271.819 154.266C270.851 154.282 269.884 154.299 268.887 154.316C267.865 154.337 266.843 154.358 265.79 154.379C262.422 154.445 259.055 154.504 255.688 154.562C253.356 154.608 251.024 154.653 248.693 154.698C236.908 154.913 225.13 155.03 213.344 154.957C212.267 154.951 211.191 154.946 210.082 154.94C204.951 154.911 199.822 154.863 194.692 154.787C192.84 154.772 190.989 154.757 189.137 154.742C188.31 154.724 187.483 154.705 186.631 154.686C182.698 154.668 179.717 154.926 176.116 156.579C173 158 173 158 170 157C170.66 154.69 171.32 152.38 172 150Z" fill="#9C959D"/>
<path d="M544 232C548.827 233.413 552.716 235.43 557 238C557 238.66 557 239.32 557 240C558.98 240.66 560.96 241.32 563 242C563 242.66 563 243.32 563 244C564.32 244.33 565.64 244.66 567 245C567 245.66 567 246.32 567 247C567.598 247.144 568.196 247.289 568.813 247.438C570.562 247.887 572.287 248.429 574 249C574.33 249.66 574.66 250.32 575 251C576.364 251.845 577.767 252.628 579.188 253.375C582.952 255.414 586.562 257.443 590 260C590 260.66 590 261.32 590 262C590.516 262.083 591.031 262.165 591.563 262.25C595.045 263.321 597.872 265.135 601 267C601 267.66 601 268.32 601 269C601.701 269.083 602.403 269.165 603.125 269.25C606.69 270.18 609.09 271.767 612 274C612 274.66 612 275.32 612 276C613.98 276.66 615.96 277.32 618 278C618 278.66 618 279.32 618 280C618.598 280.144 619.196 280.289 619.813 280.438C621.562 280.887 623.287 281.429 625 282C625 282.66 625 283.32 625 284C624.34 284 623.68 284 623 284C622.505 284.99 622.505 284.99 622 286C620.021 286.727 618.02 287.398 616 288C615.938 287.072 615.876 286.144 615.813 285.188C615.332 281.806 615.332 281.806 612.438 280.312C611.633 279.879 610.829 279.446 610 279C610 278.01 610 277.02 610 276C608.793 275.907 608.793 275.907 607.563 275.812C602.91 274.751 598.865 272.815 595 270C594.67 269.01 594.34 268.02 594 267C590.488 265.77 590.488 265.77 587 265C587 264.34 587 263.68 587 263C586.01 262.67 585.02 262.34 584 262C584 261.34 584 260.68 584 260C582.948 259.938 581.896 259.876 580.813 259.812C576.371 258.866 574.884 257.408 572 254C571.01 254.33 570.02 254.66 569 255C569 254.01 569 253.02 569 252C567.108 251.319 567.108 251.319 565 251C564.34 251.66 563.68 252.32 563 253C563 252.01 563 251.02 563 250C562.34 250 561.68 250 561 250C561 249.34 561 248.68 561 248C560.01 247.67 559.02 247.34 558 247C556.813 244.438 556.813 244.438 556 242C555.34 242.66 554.68 243.32 554 244C551.906 243.828 551.906 243.828 549.5 243.25C548.706 243.07 547.912 242.889 547.094 242.703C545 242 545 242 543 240C542.667 234.667 542.667 234.667 544 232Z" fill="#450656"/>
<path d="M176 236C178.366 238.366 178.582 239.743 179 243C178.67 243.33 178.34 243.66 178 244C177.855 245.44 177.773 246.886 177.719 248.332C177.681 249.213 177.644 250.094 177.605 251.002C177.571 251.929 177.536 252.857 177.5 253.812C177.431 255.632 177.358 257.451 177.281 259.27C177.236 260.485 177.236 260.485 177.189 261.726C177.006 263.922 176.563 265.875 176 268C175.959 269.395 175.958 270.792 176 272.188C176 273.446 176 274.704 176 276C175.67 276.33 175.34 276.66 175 277C174.716 279.221 174.552 281.443 174.379 283.676C174 286 174 286 172.965 288.043C171.705 290.234 171.705 290.234 172 294C172 297.761 171.722 298.899 170 302C170.33 302.99 170.66 303.98 171 305C170.633 306.809 170.633 306.809 170 309C169.605 311.017 169.231 313.038 168.875 315.062C168.687 316.105 168.499 317.148 168.305 318.223C167.795 321.082 167.795 321.082 169 324C168.187 325.812 168.187 325.812 167 328C165.635 331.413 164.996 333.8 165.062 337.5C164.991 341.484 163.947 343.574 162 347C160.926 349.961 160.926 349.961 160.5 353C160 356 160 356 159 359C159.021 360.052 159.041 361.104 159.062 362.188C158.992 366.489 158.159 369.872 157 374C156.67 374 156.34 374 156 374C155.394 359.029 157.673 344.625 161.18 330.126C162.538 324.4 163.517 318.796 164.062 312.938C164.691 306.196 165.681 299.592 166.937 292.938C167.095 292.081 167.253 291.224 167.416 290.342C168.372 285.424 169.685 280.799 171.329 276.07C174.177 267.285 174.206 257.804 173.973 248.668C174 246 174 246 175 245C175.232 243.485 175.412 241.962 175.562 240.438C175.646 239.611 175.73 238.785 175.816 237.934C175.907 236.976 175.907 236.976 176 236ZM163 334C162.67 334.99 162.34 335.98 162 337C162.66 337 163.32 337 164 337C163.67 336.01 163.34 335.02 163 334Z" fill="#DADAD9"/>
<path d="M501 128C502.32 128.33 503.64 128.66 505 129C504.34 129.99 503.68 130.98 503 132C504.32 131.67 505.64 131.34 507 131C506.515 131.657 506.031 132.315 505.531 132.992C503.324 137.328 503.533 141.544 503.473 146.293C503.305 151.572 503.305 151.572 501.613 153.945C498.552 155.946 495.93 156.177 492.375 155.5C489.274 155.041 487.022 155.111 483.938 155.438C475.978 156.276 467.851 156.781 460 155C453.63 153.918 446.23 152.801 440 155C438.532 156.851 438.532 156.851 438 159C438.33 159.66 438.66 160.32 439 161C437.625 162.5 437.625 162.5 436 164C435.34 164 434.68 164 434 164C434 163.01 434 162.02 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.938 157.188C435.891 154.359 436.083 152.751 437 150C438.105 149.985 438.105 149.985 439.233 149.969C446.164 149.871 453.095 149.768 460.026 149.661C463.59 149.605 467.153 149.552 470.717 149.503C474.81 149.446 478.903 149.381 482.996 149.316C484.924 149.291 484.924 149.291 486.891 149.266C488.072 149.246 489.254 149.226 490.47 149.205C491.516 149.19 492.562 149.174 493.64 149.158C495.956 149.263 495.956 149.263 497 148C497.4 145.145 497.752 142.303 498.062 139.438C498.153 138.631 498.244 137.825 498.338 136.994C498.562 134.997 498.782 132.998 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#4E0360"/>
<path d="M192.555 159.399C193.378 159.394 194.202 159.39 195.05 159.386C197.79 159.378 200.528 159.405 203.268 159.432C205.239 159.434 207.211 159.433 209.182 159.43C214.521 159.429 219.859 159.458 225.197 159.493C230.781 159.524 236.365 159.527 241.949 159.533C252.517 159.549 263.085 159.59 273.653 159.64C285.686 159.696 297.72 159.723 309.754 159.748C334.503 159.801 359.251 159.889 384 160C383.67 160.66 383.34 161.32 383 162C381.48 161.998 381.48 161.998 379.93 161.996C355.275 161.966 330.621 161.976 305.967 162.028C294.044 162.053 282.121 162.064 270.198 162.045C259.806 162.028 249.414 162.035 239.021 162.072C233.519 162.091 228.017 162.098 222.515 162.075C217.333 162.054 212.153 162.065 206.972 162.102C205.073 162.11 203.173 162.105 201.274 162.088C189.85 161.611 189.85 161.611 179.932 166.43C178.291 168.236 178.291 168.236 177 170C176.34 170.66 175.68 171.32 175 172C175 168.812 175 168.812 176 165C180.929 160.396 186.026 159.273 192.555 159.399Z" fill="#DADADA"/>
<path d="M193.188 157.88C194.436 157.878 194.436 157.878 195.71 157.877C198.503 157.876 201.296 157.881 204.089 157.886C206.089 157.887 208.09 157.887 210.091 157.886C215.526 157.886 220.962 157.892 226.397 157.899C232.076 157.905 237.755 157.905 243.434 157.907C254.189 157.91 264.945 157.918 275.701 157.928C287.945 157.939 300.189 157.945 312.433 157.95C337.622 157.96 362.811 157.978 388 158C388 158.66 388 159.32 388 160C386.954 160.001 385.908 160.003 384.831 160.004C359.392 160.041 333.954 160.1 308.516 160.184C296.214 160.224 283.913 160.256 271.611 160.271C260.89 160.284 250.168 160.311 239.447 160.355C233.77 160.377 228.092 160.393 222.414 160.392C217.071 160.391 211.728 160.409 206.385 160.441C204.423 160.45 202.461 160.451 200.5 160.446C197.821 160.439 195.144 160.457 192.466 160.481C191.69 160.473 190.914 160.465 190.114 160.457C184.905 160.54 182.107 161.887 178 165C177.34 165 176.68 165 176 165C175.67 165.99 175.34 166.98 175 168C175 166.68 175 165.36 175 164C175.66 164 176.32 164 177 164C177 163.34 177 162.68 177 162C181.937 157.592 186.83 157.856 193.188 157.88Z" fill="#CBCBCB"/>
<path d="M535 452C546.55 452 558.1 452 570 452C570 454.64 570 457.28 570 460C569 461 569 461 565.765 461.114C564.332 461.113 562.898 461.108 561.465 461.098C560.335 461.096 560.335 461.096 559.182 461.093C556.767 461.088 554.352 461.075 551.938 461.062C550.304 461.057 548.671 461.053 547.037 461.049C543.025 461.038 539.012 461.021 535 461C535 458.03 535 455.06 535 452Z" fill="#BCBBBB"/>
<path d="M198.957 153.727C200.976 153.746 202.995 153.764 205.015 153.78C209.658 153.818 214.301 153.867 218.945 153.921C227.949 154.018 236.954 154.049 245.958 154.077C249.391 154.088 252.823 154.099 256.255 154.111C257.125 154.114 257.994 154.116 258.89 154.119C270.599 154.159 282.307 154.224 294.015 154.288C295.856 154.298 297.698 154.307 299.54 154.317C300.454 154.322 301.369 154.327 302.311 154.332C309.843 154.372 317.376 154.403 324.908 154.433C332.256 154.463 339.604 154.5 346.952 154.543C351.305 154.568 355.658 154.59 360.012 154.603C364.065 154.616 368.118 154.638 372.17 154.667C373.654 154.676 375.137 154.682 376.621 154.684C378.642 154.688 380.664 154.704 382.685 154.722C384.38 154.73 384.38 154.73 386.109 154.738C388.937 154.994 390.601 155.532 393 157C392.67 157.66 392.34 158.32 392 159C390.781 158.513 390.781 158.513 389.537 158.016C385.43 156.836 381.634 156.719 377.402 156.739C376.55 156.735 375.697 156.732 374.819 156.728C371.97 156.717 369.122 156.721 366.273 156.725C364.227 156.721 362.182 156.716 360.137 156.71C354.588 156.696 349.038 156.696 343.489 156.698C338.859 156.699 334.229 156.695 329.599 156.69C318.681 156.679 307.763 156.678 296.845 156.684C285.57 156.69 274.296 156.678 263.022 156.657C253.347 156.639 243.672 156.633 233.997 156.636C228.216 156.638 222.435 156.636 216.655 156.622C211.223 156.609 205.792 156.611 200.361 156.624C198.364 156.626 196.368 156.624 194.371 156.615C191.653 156.605 188.935 156.613 186.217 156.626C185.42 156.618 184.624 156.611 183.803 156.603C179.643 156.576 179.643 156.576 176.111 158.523C175.745 159.011 175.378 159.498 175 160C174.34 160 173.68 160 173 160C172.67 161.32 172.34 162.64 172 164C171.01 163.67 170.02 163.34 169 163C169 161.35 169 159.7 169 158C178.767 153.142 188.36 153.54 198.957 153.727Z" fill="#ADACAD"/>
<path d="M618 383C618.33 383 618.66 383 619 383C618.859 385.25 618.712 387.5 618.562 389.75C618.481 391.003 618.4 392.256 618.316 393.547C618.075 396.183 617.757 398.48 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C602.159 403.083 589.336 402.82 576.5 402.5C574.501 402.452 572.503 402.403 570.504 402.355C565.669 402.239 560.835 402.12 556 402C556 401.01 556 400.02 556 399C557.144 398.975 558.287 398.95 559.466 398.924C563.769 398.829 568.072 398.729 572.376 398.628C574.227 398.585 576.078 398.543 577.929 398.503C583.174 398.388 588.417 398.253 593.66 398.078C595.155 398.028 596.65 397.982 598.145 397.942C599.989 397.887 601.833 397.802 603.676 397.715C604.671 397.674 605.667 397.632 606.693 397.59C609.142 397.233 609.142 397.233 610.294 395.127C611.076 392.77 611.592 390.449 612 388C613.98 388.33 615.96 388.66 618 389C618 387.02 618 385.04 618 383Z" fill="#52125F"/>
<path d="M260 231C260.094 236.575 259.789 241.913 259.063 247.438C258.976 248.156 258.889 248.875 258.799 249.615C258.129 254.871 258.129 254.871 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.334 261.248 256.334 261.248 256.201 262.486C256.071 263.762 256.071 263.762 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.438 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.012 274.652 253.023 275.305 253.035 275.977C253.085 280.776 252.994 285.278 252 290C251.01 290 250.02 290 249 290C246.776 282.27 248.063 273.866 249 266C249.66 266 250.32 266 251 266C250.93 265.049 250.93 265.049 250.859 264.078C250.586 257.003 251.435 250.365 252.75 243.438C252.985 242.116 252.985 242.116 253.226 240.769C254.487 234.516 254.487 234.516 257.078 231.91C259 231 259 231 260 231Z" fill="#C8C6C8"/>
<path d="M301 225C301.495 227.97 301.495 227.97 302 231C300.68 231.33 299.36 231.66 298 232C298 231.34 298 230.68 298 230C292.965 229.901 287.93 229.828 282.894 229.78C281.182 229.76 279.47 229.733 277.758 229.698C275.293 229.65 272.829 229.627 270.363 229.609C269.602 229.589 268.84 229.568 268.055 229.547C262.996 229.545 260.655 230.565 257 234C256.34 234 255.68 234 255 234C253.542 244.653 252.229 255.318 251 266C250.34 266 249.68 266 249 266C249.33 266.99 249.66 267.98 250 269C249.668 271.569 249.263 274.031 248.75 276.562C248.628 277.248 248.505 277.933 248.379 278.639C248.02 280.449 247.517 282.229 247 284C246.01 284.66 245.02 285.32 244 286C243.67 284.02 243.34 282.04 243 280C243.99 279.505 243.99 279.505 245 279C245.508 276.748 245.508 276.748 245.688 274.125C245.774 273.241 245.86 272.356 245.949 271.445C246.14 268.86 246.14 268.86 245 266C245.051 264.062 245.051 264.062 245.312 262C245.391 261.319 245.47 260.639 245.551 259.938C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243C249.66 243 250.32 243 251 243C250.897 242.134 250.794 241.267 250.688 240.375C251.119 235.718 252.727 234.273 256 231C256.66 231 257.32 231 258 231C258 229.35 258 227.7 258 226C260.31 226 262.62 226 265 226C265 226.33 265 226.66 265 227C266.917 227.027 268.833 227.046 270.75 227.062C271.817 227.074 272.885 227.086 273.984 227.098C276.549 227.015 278.55 226.659 281 226C281.701 226.144 282.402 226.289 283.125 226.438C290.012 227.785 294.945 225 301 225Z" fill="#DEDFE0"/>
<path d="M284 452C295.22 452 306.44 452 318 452C318 454.64 318 457.28 318 460C317.67 460.33 317.34 460.66 317 461C313.37 461 309.74 461 306 461C306 468.92 306 476.84 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C301.36 487 298.72 487 296 487C295.67 478.75 295.34 470.5 295 462C291.37 461.67 287.74 461.34 284 461C284 458.03 284 455.06 284 452ZM286 454C286 455.65 286 457.3 286 459C287.065 459.091 287.065 459.091 288.152 459.184C289.071 459.267 289.991 459.351 290.938 459.438C292.312 459.559 292.312 459.559 293.715 459.684C296 460 296 460 297 461C297.158 462.779 297.251 464.563 297.316 466.348C297.379 467.967 297.379 467.967 297.443 469.619C297.483 470.755 297.522 471.892 297.562 473.062C297.606 474.203 297.649 475.343 297.693 476.518C297.8 479.345 297.902 482.172 298 485C299.65 485 301.3 485 303 485C303.973 482.08 304.193 479.946 304.316 476.895C304.358 475.912 304.4 474.929 304.443 473.916C304.483 472.892 304.522 471.868 304.562 470.812C304.606 469.777 304.649 468.741 304.693 467.674C304.799 465.116 304.9 462.558 305 460C308.3 459.34 311.6 458.68 315 458C315 456.68 315 455.36 315 454C305.43 454 295.86 454 286 454Z" fill="#75207A"/>
<path d="M204 452C212.25 452 220.5 452 229 452C229 452.66 229 453.32 229 454C228.024 454.014 228.024 454.014 227.028 454.028C224.08 454.082 221.134 454.166 218.188 454.25C217.163 454.264 216.139 454.278 215.084 454.293C214.101 454.325 213.118 454.357 212.105 454.391C211.199 454.412 210.294 454.433 209.36 454.454C206.856 454.807 206.856 454.807 205.188 456.879C203.667 459.595 203.835 461.13 204.25 464.188C204.358 465.068 204.467 465.948 204.578 466.855C204.788 468.974 204.788 468.974 206 470C207.548 470.145 209.102 470.227 210.656 470.281C211.596 470.319 212.536 470.356 213.504 470.395C214.493 470.429 215.481 470.464 216.5 470.5C218.448 470.569 220.396 470.641 222.344 470.719C223.212 470.749 224.08 470.779 224.975 470.811C227 471 227 471 228 472C228.041 474 228.043 476 228 478C225.495 479.252 223.791 479.114 220.992 479.098C220.006 479.094 219.02 479.091 218.004 479.088C216.971 479.08 215.939 479.071 214.875 479.062C213.315 479.056 213.315 479.056 211.723 479.049C209.148 479.037 206.574 479.021 204 479C203.01 481.475 203.01 481.475 202 484C201.34 484 200.68 484 200 484C200.33 481.69 200.66 479.38 201 477C209.25 477 217.5 477 226 477C226 476.01 226 475.02 226 474C225.38 474.005 224.759 474.01 224.12 474.016C221.309 474.037 218.498 474.05 215.688 474.062C214.711 474.071 213.735 474.079 212.729 474.088C211.791 474.091 210.853 474.094 209.887 474.098C209.023 474.103 208.159 474.108 207.268 474.114C205 474 205 474 202 473C200.794 469.381 200.892 466.075 200.938 462.312C200.942 461.611 200.947 460.909 200.951 460.186C200.963 458.457 200.981 456.728 201 455C201.99 454.67 202.98 454.34 204 454C204 453.34 204 452.68 204 452Z" fill="#7D1184"/>
<path d="M454 316C456.031 316.086 456.031 316.086 458.5 316.375C459.722 316.51 459.722 316.51 460.969 316.648C463 317 463 317 464 318C465.492 318.063 466.987 318.059 468.48 318.027C469.398 318.015 470.315 318.003 471.26 317.99C473.192 317.955 475.124 317.916 477.057 317.873C482.13 317.813 486.247 317.963 491 320C489 322 489 322 486.564 322.247C485.541 322.246 484.519 322.244 483.465 322.243C482.307 322.246 481.149 322.249 479.956 322.252C478.701 322.245 477.446 322.238 476.152 322.23C474.87 322.23 473.588 322.23 472.267 322.229C469.553 322.228 466.838 322.219 464.124 322.206C460.638 322.189 457.152 322.185 453.665 322.186C450.348 322.185 447.032 322.177 443.715 322.168C441.829 322.166 441.829 322.166 439.905 322.165C438.75 322.158 437.596 322.152 436.406 322.145C434.873 322.14 434.873 322.14 433.309 322.134C431 322 431 322 430 321C427.97 321.032 425.939 321.068 423.91 321.16C422 321 422 321 420 319C422.584 316.416 429.318 317.015 432.879 316.938C435.92 316.938 438.959 316.961 442 317C444.062 317.025 446.125 317.046 448.188 317.062C449.089 317.074 449.99 317.086 450.918 317.098C452.99 317.235 452.99 317.235 454 316Z" fill="#5E0075"/>
<path d="M292 284C292.33 284.99 292.66 285.98 293 287C292.67 287.66 292.34 288.32 292 289C291.98 290.729 292.008 292.459 292.062 294.188C292.117 298.869 291.309 302.499 290 307C289.9 309.6 289.934 312.165 290.027 314.766C290 317 290 317 289 320C288.486 323.513 288.043 327.032 287.598 330.555C287.058 333.668 286.29 336.135 285 339C284.629 339.928 284.257 340.856 283.875 341.812C283.586 342.534 283.298 343.256 283 344C282.34 344 281.68 344 281 344C281.14 341.52 281.287 339.041 281.438 336.562C281.477 335.855 281.516 335.148 281.557 334.42C281.887 329.113 281.887 329.113 283 328C283.213 326.673 283.37 325.337 283.5 324C283.583 323.196 283.665 322.391 283.75 321.562C283.833 320.717 283.915 319.871 284 319C284.163 317.333 284.329 315.666 284.5 314C284.608 312.886 284.608 312.886 284.719 311.75C285 310 285 310 286 309C286.261 307.32 286.467 305.632 286.648 303.941C286.767 302.916 286.886 301.891 287.008 300.834C287.252 298.658 287.489 296.481 287.719 294.303C287.84 293.276 287.961 292.249 288.086 291.191C288.241 289.771 288.241 289.771 288.4 288.323C289 286 289 286 292 284Z" fill="#BCB9BB"/>
<path d="M437 150C454.82 150 472.64 150 491 150C487 154 487 154 484.958 154.474C484.236 154.462 483.514 154.45 482.77 154.438C481.533 154.433 481.533 154.433 480.271 154.428C479.389 154.404 478.507 154.38 477.598 154.355C476.683 154.347 475.768 154.339 474.826 154.331C471.904 154.302 468.984 154.246 466.062 154.188C463.145 154.145 460.228 154.108 457.31 154.076C455.496 154.054 453.681 154.026 451.867 153.989C445.863 153.85 445.863 153.85 440 155C438.532 156.851 438.532 156.851 438 159C438.33 159.66 438.66 160.32 439 161C437.625 162.5 437.625 162.5 436 164C435.34 164 434.68 164 434 164C434 163.01 434 162.02 434 161C434.66 161 435.32 161 436 161C435.979 159.742 435.959 158.484 435.938 157.188C435.891 154.359 436.083 152.751 437 150Z" fill="#400A50"/>
<path d="M492 313C494.97 313 497.94 313 501 313C501 315.97 501 318.94 501 322C508.26 322 515.52 322 523 322C522.01 323.485 522.01 323.485 521 325C520.34 325 519.68 325 519 325C515.202 326.662 513.335 327.498 511 331C507.185 332.242 505.135 332.038 501.25 330.938C498 329 498 329 496.562 326.25C495.96 322.766 495.859 319.529 496 316C494.68 315.67 493.36 315.34 492 315C492 314.34 492 313.68 492 313Z" fill="#550467"/>
<path d="M231 452C231.99 452 232.98 452 234 452C234 454.97 234 457.94 234 461C229.229 462.234 224.575 462.113 219.688 462.062C218.434 462.056 218.434 462.056 217.154 462.049C215.103 462.037 213.051 462.019 211 462C210.67 462.99 210.34 463.98 210 465C210.62 464.99 211.241 464.979 211.88 464.968C214.691 464.927 217.502 464.901 220.312 464.875C221.289 464.858 222.265 464.841 223.271 464.824C224.209 464.818 225.147 464.811 226.113 464.805C226.977 464.794 227.841 464.784 228.732 464.773C231 465 231 465 234 467C234.221 469.951 234.281 472.684 234.188 475.625C234.167 476.828 234.167 476.828 234.146 478.055C234.111 480.037 234.057 482.018 234 484C232.02 484.495 232.02 484.495 230 485C230 485.66 230 486.32 230 487C225.05 487 220.1 487 215 487C215 486.34 215 485.68 215 485C219.62 485 224.24 485 229 485C229 484.34 229 483.68 229 483C229.66 482.67 230.32 482.34 231 482C231.47 478.724 231.47 478.724 231.625 474.938C231.7 473.647 231.775 472.357 231.852 471.027C231.901 470.028 231.95 469.029 232 468C231.314 467.975 230.627 467.95 229.92 467.924C226.822 467.808 223.723 467.685 220.625 467.562C219.545 467.523 218.465 467.484 217.352 467.443C216.32 467.401 215.289 467.36 214.227 467.316C213.273 467.28 212.32 467.243 211.338 467.205C209 467 209 467 207 466C207 464.35 207 462.7 207 461C207.66 461 208.32 461 209 461C209 460.34 209 459.68 209 459C216.59 458.67 224.18 458.34 232 458C231.67 456.02 231.34 454.04 231 452Z" fill="#731C73"/>
<path d="M418.747 311.886C419.708 311.887 420.668 311.887 421.658 311.887C422.693 311.892 423.727 311.897 424.793 311.902C426.385 311.904 426.385 311.904 428.009 311.907C431.402 311.912 434.795 311.925 438.188 311.938C440.486 311.943 442.785 311.947 445.084 311.951C450.723 311.962 456.361 311.979 462 312C462 312.33 462 312.66 462 313C448.8 313.33 435.6 313.66 422 314C421.34 315.65 420.68 317.3 420 319C418.68 319 417.36 319 416 319C414.631 322.031 413.769 324.943 413.125 328.188C410.295 341.47 410.295 341.47 405 345C405.182 344.07 405.182 344.07 405.367 343.121C406.664 336.266 407.62 329.409 408.438 322.48C408.984 319.098 409.645 316.148 411 313C413.904 312.032 415.728 311.879 418.747 311.886Z" fill="#41044C"/>
<path d="M299 231C299.99 231.33 300.98 231.66 302 232C302 234.31 302 236.62 302 239C302.66 238.34 303.32 237.68 304 237C303.556 245.524 302.441 253.767 301.016 262.172C300.194 267.205 299.893 271.92 300.086 277.023C299.943 280.306 298.331 283.03 297 286C296.406 289.134 295.944 292.264 295.527 295.426C295 298 295 298 293 300C292.945 298.625 292.907 297.25 292.875 295.875C292.852 295.109 292.829 294.344 292.805 293.555C293 291 293 291 293.906 288.312C295.34 283.971 295.968 279.64 296.625 275.125C296.759 274.265 296.893 273.405 297.031 272.52C298.014 265.908 298.783 259.538 297 253C296.933 251.147 296.915 249.292 296.938 247.438C296.947 246.487 296.956 245.537 296.965 244.559C296.976 243.714 296.988 242.87 297 242C297 241.01 297 240.02 297 239C297.824 232.176 297.824 232.176 299 231Z" fill="#D0D0CF"/>
<path d="M553 403C553.99 403 554.98 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.963 409.048 553.925 410.096 553.887 411.176C553.821 412.555 553.755 413.934 553.688 415.312C553.665 416.003 553.642 416.693 553.619 417.404C553.346 422.545 553.346 422.545 551.706 424.701C548.699 426.991 544.937 426.387 541.306 426.341C540.418 426.341 539.53 426.341 538.615 426.342C535.677 426.34 532.739 426.316 529.801 426.293C527.765 426.287 525.729 426.283 523.693 426.28C518.332 426.269 512.971 426.239 507.61 426.206C502.14 426.175 496.671 426.162 491.201 426.146C480.467 426.114 469.734 426.063 459 426C459.33 424.35 459.66 422.7 460 421C460.33 421.99 460.66 422.98 461 424C464.937 424.029 468.875 424.047 472.812 424.062C473.932 424.071 475.052 424.079 476.205 424.088C477.278 424.091 478.351 424.094 479.457 424.098C480.447 424.103 481.437 424.108 482.456 424.114C485.124 424.111 485.124 424.111 488 423C490.12 423.116 490.12 423.116 492.547 423.429C497.799 424.021 502.961 424.145 508.242 424.133C509.638 424.134 509.638 424.134 511.063 424.136C513.011 424.136 514.958 424.135 516.906 424.13C519.888 424.125 522.87 424.13 525.852 424.137C527.753 424.136 529.654 424.135 531.555 424.133C532.888 424.136 532.888 424.136 534.247 424.139C535.076 424.136 535.904 424.133 536.757 424.129C537.845 424.128 537.845 424.128 538.954 424.127C541.033 424.061 541.033 424.061 543.125 423.465C545.393 422.903 546.802 423.293 549 424C551.602 420.097 551.074 416.529 551 412C551.33 411.67 551.66 411.34 552 411C552.231 409.653 552.412 408.296 552.562 406.938C552.707 405.638 552.851 404.339 553 403Z" fill="#5C1272"/>
<path d="M238 330C238.66 330 239.32 330 240 330C239.879 330.701 239.758 331.402 239.633 332.124C239.084 335.311 238.542 338.499 238 341.688C237.809 342.79 237.618 343.893 237.422 345.029C237.241 346.096 237.061 347.163 236.875 348.262C236.624 349.731 236.624 349.731 236.367 351.229C235.942 353.969 235.942 353.969 236.004 356.632C235.997 360.946 234.352 364.943 233 369C233.032 370.73 233.099 372.459 233.188 374.188C233.247 379.617 232.433 384.454 231.125 389.688C230.864 390.748 230.864 390.748 230.598 391.831C230.137 393.574 229.576 395.291 229 397C228.01 397.495 228.01 397.495 227 398C226.67 397.34 226.34 396.68 226 396C225.34 395.67 224.68 395.34 224 395C224.959 393.298 224.959 393.298 225.938 391.562C229.251 384.913 229.143 378.145 228.938 370.848C229 369 229 369 230 367C229.505 365.515 229.505 365.515 229 364C229.99 364 230.98 364 232 364C231.977 363.096 231.954 362.193 231.93 361.262C231.912 360.082 231.894 358.903 231.875 357.688C231.852 356.516 231.829 355.344 231.805 354.137C232 351 232 351 234 348C234.371 345.164 234.505 342.352 234.656 339.496C235 337 235 337 237 335C237.648 332.429 237.648 332.429 238 330Z" fill="#DEDFDE"/>
<path d="M176 172C178.122 178.367 177.048 184.699 175.438 191.02C174.892 193.15 174.892 193.15 175 196C174.37 197.681 173.702 199.348 173 201C170.357 208.93 171.361 220.478 175 228C173.02 227.34 171.04 226.68 169 226C169 224.68 169 223.36 169 222C168.34 222 167.68 222 167 222C166.528 214.677 167.667 208.399 169.362 201.336C170.996 194.401 172.059 187.439 172.96 180.374C173.069 179.57 173.177 178.766 173.289 177.938C173.379 177.225 173.469 176.512 173.561 175.777C174 174 174 174 176 172Z" fill="#DDDDDC"/>
<path d="M165 187C166.32 187.33 167.64 187.66 169 188C168.67 188.66 168.34 189.32 168 190C167.969 193.218 168.068 196.424 168.16 199.641C168 203 168 203 166.973 205.867C165.682 210.023 166.011 213.583 166.375 217.875C166.432 218.659 166.488 219.442 166.547 220.25C166.687 222.167 166.842 224.084 167 226C168.65 226.66 170.3 227.32 172 228C172 228.33 172 228.66 172 229C168.04 229 164.08 229 160 229C160.142 226.166 160.289 223.333 160.438 220.5C160.477 219.709 160.516 218.917 160.557 218.102C161.325 203.675 161.325 203.675 163 202C163.399 199.478 163.751 196.97 164.062 194.438C164.153 193.727 164.244 193.016 164.338 192.283C164.562 190.523 164.782 188.761 165 187Z" fill="#B3ADB5"/>
<path d="M362 356C363.23 358.46 362.927 359.424 362.477 362.105C362.343 362.925 362.208 363.744 362.07 364.588C361.85 365.875 361.85 365.875 361.625 367.188C361.346 368.868 361.067 370.549 360.789 372.23C360.654 373.037 360.519 373.843 360.38 374.673C359.873 377.776 359.43 380.885 359 384C359.99 384 360.98 384 362 384C362.33 385.65 362.66 387.3 363 389C362.34 388.67 361.68 388.34 361 388C360.67 388.99 360.34 389.98 360 391C359.34 391 358.68 391 358 391C358 392.32 358 393.64 358 395C357.34 395 356.68 395 356 395C355.67 395.99 355.34 396.98 355 398C352.938 398.688 352.938 398.688 351 399C351.217 397.822 351.217 397.822 351.438 396.621C352.704 389.791 352.704 389.791 353 382.875C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366C359.64 363.836 359.64 363.836 360.062 361.438C360.903 357.097 360.903 357.097 362 356Z" fill="#DAD8DA"/>
<path d="M567.062 464.938C568.517 464.968 568.517 464.968 570 465C570 467.64 570 470.28 570 473C561.42 473 552.84 473 544 473C543.67 471.35 543.34 469.7 543 468C544.546 466.454 546.069 466.802 548.219 466.719C549.068 466.681 549.918 466.644 550.793 466.605C553.5 466.5 553.5 466.5 556.207 466.395C557.057 466.357 557.906 466.32 558.781 466.281C559.958 466.236 559.958 466.236 561.158 466.189C563.996 465.898 563.742 465.005 567.062 464.938Z" fill="#BCBCBC"/>
<path d="M411 360C411.33 360 411.66 360 412 360C412.054 362.229 412.093 364.458 412.125 366.688C412.148 367.929 412.171 369.17 412.195 370.449C412 374 412 374 411.031 376.375C409.497 380.28 409.533 384.151 409.375 388.312C409.336 389.148 409.298 389.984 409.258 390.846C409.164 392.897 409.081 394.948 409 397C412.343 397.074 414.804 397.065 418 396C418.33 396.99 418.66 397.98 419 399C415.04 399 411.08 399 407 399C406.897 397.907 406.794 396.814 406.688 395.688C406.385 392.078 406.385 392.078 404.438 390.5C403 389 403 389 402.625 385.562C403 382 403 382 404.5 380.062C406.475 377.347 406.105 375.212 405.984 371.953C406.021 367.434 408.584 363.676 411 360Z" fill="#64057D"/>
<path d="M540 221C542.195 221.254 544.382 221.578 546.562 221.938C548.359 222.229 548.359 222.229 550.191 222.527C551.118 222.683 552.045 222.839 553 223C553 222.34 553 221.68 553 221C553.722 221.309 554.444 221.619 555.188 221.938C558.446 223.168 561.506 224 565 224C565.495 225.485 565.495 225.485 566 227C569.3 226.67 572.6 226.34 576 226C575 230 575 230 574 231C567.538 231.359 567.538 231.359 564 229C561.971 229.257 561.971 229.257 560 230C559.01 230.33 558.02 230.66 557 231C557 229.35 557 227.7 557 226C556.34 226 555.68 226 555 226C554.67 226.99 554.34 227.98 554 229C554 227.35 554 225.7 554 224C547.73 224 541.46 224 535 224C535 224.66 535 225.32 535 226C535.557 226.083 536.114 226.165 536.688 226.25C539.697 227.226 541.622 228.952 544 231C543.67 231.66 543.34 232.32 543 233C541.68 232.34 540.36 231.68 539 231C539 230.34 539 229.68 539 229C537.02 229.33 535.04 229.66 533 230C533 229.01 533 228.02 533 227C532.01 227 531.02 227 530 227C530.33 225.68 530.66 224.36 531 223C533.051 222.772 535.102 222.544 537.152 222.316C539.011 222.181 539.011 222.181 540 221Z" fill="#5B0B73"/>
<path d="M360 387C360.99 387.99 361.98 388.98 363 390C362.34 390.99 361.68 391.98 361 393C360.796 395.22 360.796 395.22 360.938 397.562C361.098 401.805 361.098 401.805 360 404C340.53 404 321.06 404 301 404C301 403.34 301 402.68 301 402C300.34 401.67 299.68 401.34 299 401C317.81 401 336.62 401 356 401C356 399.02 356 397.04 356 395C356.66 395 357.32 395 358 395C358 393.68 358 392.36 358 391C358.66 391 359.32 391 360 391C360 389.68 360 388.36 360 387Z" fill="#CACACB"/>
<path d="M627 285C627.66 285 628.32 285 629 285C630.586 289.163 631.311 292.539 631 297C630.67 297.33 630.34 297.66 630 298C629.761 299.702 629.584 301.413 629.438 303.125C629.349 304.118 629.26 305.11 629.168 306.133C629.03 308.486 629.074 310.659 629.25 313C629.167 313.99 629.085 314.98 629 316C626.5 317.938 626.5 317.938 624 319C622.875 311.25 622.875 311.25 624 309C624.381 301.294 623.967 293.647 623 286C624.32 286.33 625.64 286.66 627 287C627 286.34 627 285.68 627 285Z" fill="#57036C"/>
<path d="M242 336C242.66 336 243.32 336 244 336C244 338.64 244 341.28 244 344C243.34 344 242.68 344 242 344C242.023 344.548 242.046 345.096 242.07 345.66C242.251 353.585 241.168 361.178 240 369C239.34 369 238.68 369 238 369C238 371.64 238 374.28 238 377C236.02 377.495 236.02 377.495 234 378C233.902 371.848 233.902 371.848 234 370C234.495 369.505 234.495 369.505 235 369C234.958 367.294 234.911 365.587 234.834 363.882C234.474 355.022 234.474 355.022 236.145 351.777C237.369 350.459 238.678 349.22 240 348C239.67 347.01 239.34 346.02 239 345C239.559 342.738 239.559 342.738 240.438 340.312C240.725 339.504 241.012 338.696 241.309 337.863C241.651 336.941 241.651 336.941 242 336Z" fill="#C6C5C4"/>
<path d="M404 353C404.66 353 405.32 353 406 353C406.054 355.208 406.093 357.417 406.125 359.625C406.148 360.855 406.171 362.085 406.195 363.352C406 366.995 405.162 369.57 404 373C403.611 375.744 403.452 378.484 403.312 381.25C403.265 381.969 403.218 382.689 403.17 383.43C402.857 387.338 402.857 387.338 404 391C404.04 393 404.043 395 404 397C401.525 397.495 401.525 397.495 399 398C397.267 394.823 396.863 393.479 397.875 389.938C398.066 389.324 398.256 388.711 398.453 388.08C399.488 384.147 399.75 380.103 400.125 376.062C400.211 375.188 400.298 374.313 400.387 373.412C400.597 371.275 400.799 369.138 401 367C401.66 367 402.32 367 403 367C402.969 365.206 402.969 365.206 402.937 363.375C402.931 359.82 403.301 356.494 404 353Z" fill="#3E1055"/>
<path d="M174 247C174.33 247 174.66 247 175 247C175.481 260.571 173.853 272.616 169.695 285.637C168.501 289.695 167.752 293.841 167 298C166.34 297.67 165.68 297.34 165 297C165.131 296.37 165.263 295.739 165.398 295.09C166.209 290.925 166.929 286.748 167.625 282.562C167.772 281.729 167.919 280.896 168.07 280.037C168.836 275.379 169.046 271.671 168 267C168.521 262.177 170.418 257.566 172 253C172.66 253 173.32 253 174 253C174 251.02 174 249.04 174 247ZM166 260C166.99 260.99 167.98 261.98 169 263C168.67 263.66 168.34 264.32 168 265C167.34 265 166.68 265 166 265C166 263.35 166 261.7 166 260Z" fill="#D4D5D3"/>
<path d="M155 368C155.33 368 155.66 368 156 368C156.144 368.908 156.289 369.815 156.438 370.75C156.902 373.828 156.902 373.828 157.625 376.062C158.119 378.615 157.613 380.485 157 383C155.841 387.851 156.007 392.397 156.16 397.355C156 400 156 400 154 402C153.01 402 152.02 402 151 402C150.804 399.938 150.618 397.876 150.438 395.812C150.333 394.664 150.229 393.515 150.121 392.332C149.969 388.146 150.684 384.947 152 381C152.067 379.606 152.085 378.208 152.063 376.812C152.042 375.554 152.021 374.296 152 373C152.66 373 153.32 373 154 373C154.33 371.35 154.66 369.7 155 368Z" fill="#C9CAC8"/>
<path d="M255 250C255.99 250 256.98 250 258 250C258.043 251.666 258.041 253.334 258 255C257.67 255.33 257.34 255.66 257 256C256.775 257.338 256.606 258.686 256.465 260.035C256.334 261.248 256.334 261.248 256.201 262.486C256.071 263.762 256.071 263.762 255.938 265.062C255.847 265.917 255.756 266.771 255.662 267.65C255.438 269.767 255.218 271.883 255 274C254.34 274 253.68 274 253 274C253.012 274.652 253.023 275.305 253.035 275.977C253.085 280.776 252.994 285.278 252 290C251.01 290 250.02 290 249 290C247.688 285.9 246.952 281.068 248.947 277.132C250.222 274.551 250.597 272.238 251.035 269.395C251.205 268.329 251.374 267.264 251.549 266.166C251.718 265.059 251.888 263.953 252.063 262.812C252.404 260.61 252.749 258.408 253.098 256.207C253.247 255.232 253.397 254.257 253.551 253.253C254 251 254 251 255 250Z" fill="#C3C1C1"/>
<path d="M390 178C390.33 179.32 390.66 180.64 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C395.553 183.418 395.091 186.834 394.625 190.25C394.499 191.218 394.372 192.186 394.242 193.184C394.113 194.118 393.984 195.053 393.851 196.016C393.736 196.874 393.621 197.733 393.502 198.618C392.991 201.044 392.207 202.846 391 205C390.647 205.634 390.294 206.268 389.93 206.922C388.953 208.615 387.976 210.307 387 212C386.066 208.99 385.955 208.133 387 205C387.204 203.191 387.365 201.378 387.5 199.562C387.582 198.503 387.665 197.443 387.75 196.352C387.832 195.246 387.915 194.14 388 193C388.163 190.812 388.33 188.625 388.5 186.438C388.572 185.467 388.644 184.496 388.719 183.496C389 181 389 181 390 178Z" fill="#C3C2C2"/>
<path d="M243 319C244.32 319.99 245.64 320.98 247 322C246.34 326.29 245.68 330.58 245 335C244.01 335.33 243.02 335.66 242 336C240.521 342.945 240.521 342.945 240 350C238 351.688 238 351.688 236 353C236.633 341.287 238.083 329.728 243 319Z" fill="#C7C6C7"/>
<path d="M171 233C173.5 233.938 173.5 233.938 176 236C176.515 239.04 176.425 241.95 176 245C175.67 245.33 175.34 245.66 175 246C174.632 248.328 174.298 250.662 174 253C173.34 253 172.68 253 172 253C171.897 254.114 171.794 255.227 171.687 256.375C171.461 257.571 171.234 258.768 171 260C169.515 260.99 169.515 260.99 168 262C167.15 259.131 166.941 256.886 167.269 253.918C167.354 253.15 167.438 252.383 167.525 251.592C167.667 250.402 167.667 250.402 167.812 249.188C167.896 248.406 167.979 247.624 168.064 246.818C168.614 242.02 169.543 237.605 171 233Z" fill="#C0BEBF"/>
<path d="M305 232C305.33 232 305.66 232 306 232C306.197 233.415 306.382 234.832 306.562 236.25C306.667 237.039 306.771 237.828 306.879 238.641C307.001 241.027 306.637 242.717 306 245C306 245.99 306 246.98 306 248C305.505 249.237 305.505 249.237 305 250.5C304.054 253.811 303.925 256.041 304 259.438C304.099 264.036 303.31 267.578 302 272C301.957 273.52 301.959 275.042 302 276.562C302.092 280.424 301.608 283.426 300 287C299.01 287.495 299.01 287.495 298 288C296.856 284.568 297.491 283.302 298.533 279.973C299.15 277.739 299.15 277.739 298.914 274.309C298.834 267.611 300.039 261.038 301.081 254.442C301.439 252.176 301.788 249.91 302.135 247.643C302.359 246.193 302.583 244.743 302.809 243.293C302.913 242.62 303.017 241.947 303.124 241.254C303.62 238.128 304.159 235.053 305 232Z" fill="#DFDFDE"/>
<path d="M612 388C612.33 388 612.66 388 613 388C613.295 395.668 613.295 395.668 611 399C604.532 401.663 596.838 401.27 589.961 401.195C588.954 401.192 587.947 401.19 586.91 401.187C583.731 401.176 580.553 401.151 577.375 401.125C575.204 401.115 573.034 401.106 570.863 401.098C565.575 401.076 560.288 401.042 555 401C555.33 400.34 555.66 399.68 556 399C557.144 398.975 558.287 398.95 559.466 398.924C563.769 398.829 568.072 398.729 572.376 398.628C574.227 398.585 576.078 398.543 577.929 398.503C583.174 398.388 588.417 398.253 593.66 398.078C595.155 398.028 596.65 397.982 598.145 397.942C599.989 397.887 601.833 397.802 603.676 397.715C604.671 397.674 605.667 397.632 606.693 397.59C609.142 397.233 609.142 397.233 610.294 395.127C611.076 392.77 611.592 390.449 612 388Z" fill="#5C0D72"/>
<path d="M510 131C520.135 130.977 530.271 130.959 540.406 130.948C545.112 130.943 549.818 130.936 554.524 130.925C559.063 130.914 563.601 130.908 568.14 130.905C569.874 130.903 571.609 130.9 573.343 130.894C575.766 130.887 578.19 130.886 580.613 130.886C581.696 130.881 581.696 130.881 582.801 130.876C587.772 130.886 587.772 130.886 590 132C590 135.63 590 139.26 590 143C589.67 143 589.34 143 589 143C588.783 141.36 588.783 141.36 588.562 139.688C588.117 136.069 588.117 136.069 587 133C586.094 133.004 585.189 133.009 584.256 133.013C575.721 133.054 567.187 133.084 558.653 133.104C554.266 133.114 549.878 133.128 545.491 133.151C541.257 133.173 537.023 133.185 532.789 133.19C531.173 133.193 529.558 133.201 527.942 133.211C525.68 133.226 523.418 133.228 521.155 133.227C519.867 133.231 518.579 133.236 517.252 133.241C514.213 133.016 512.539 132.612 510 131Z" fill="#4A025D"/>
<path d="M623 344C623.095 348.85 622.953 353.235 622 358C622.163 358.616 622.326 359.232 622.494 359.866C623.052 362.221 622.951 363.933 622.66 366.328C622.567 367.127 622.473 367.927 622.377 368.75C622.221 369.987 622.221 369.987 622.062 371.25C621.963 372.09 621.863 372.931 621.76 373.797C621.513 375.865 621.257 377.933 621 380C620.34 380 619.68 380 619 380C618.67 380.99 618.34 381.98 618 383C617.67 383 617.34 383 617 383C616.72 373.092 616.518 364.052 619.398 354.469C620.249 350.977 619.864 348.455 619 345C622 344 622 344 623 344Z" fill="#5B056F"/>
<path d="M296 241C296.66 241.33 297.32 241.66 298 242C297.988 242.976 297.977 243.952 297.965 244.957C297.956 246.229 297.947 247.502 297.938 248.812C297.926 250.077 297.914 251.342 297.902 252.645C297.838 255.996 297.838 255.996 299 259C298.333 260.667 297.667 262.333 297 264C296.746 266.001 296.493 268.003 296.273 270.008C295.632 274.682 294.424 277.81 291 281C291.142 278.646 291.289 276.292 291.438 273.938C291.519 272.627 291.6 271.316 291.684 269.965C292.52 259.48 292.52 259.48 294 258C294.4 255.145 294.752 252.303 295.062 249.438C295.153 248.631 295.244 247.825 295.338 246.994C295.562 244.997 295.782 242.998 296 241Z" fill="#B0AEB0"/>
<path d="M370 309C370.959 311.878 371.77 314.76 372.562 317.688C372.832 318.681 373.101 319.675 373.379 320.699C373.584 321.458 373.789 322.218 374 323C372.35 323 370.7 323 369 323C368.67 325.31 368.34 327.62 368 330C367.34 329.34 366.68 328.68 366 328C366.422 321.529 368.368 315.253 370 309ZM366 330C367.068 333.363 366.974 336.13 366.625 339.625C366.535 340.587 366.445 341.548 366.352 342.539C366 345 366 345 365 347C365.062 347.784 365.124 348.567 365.188 349.375C364.939 352.849 363.489 353.702 361 356C361.142 353.916 361.288 351.833 361.438 349.75C361.519 348.59 361.6 347.43 361.684 346.234C362.1 341.978 363.197 338.289 364.562 334.25C364.832 333.451 365.101 332.652 365.379 331.828C365.584 331.225 365.789 330.622 366 330Z" fill="#D4D3D4"/>
<path d="M403 389C405 390.062 405 390.062 407 392C407.125 395.621 407.125 395.621 407 399C408.468 398.955 408.468 398.955 409.966 398.908C413.604 398.796 417.242 398.684 420.879 398.573C422.453 398.524 424.026 398.476 425.599 398.427C427.863 398.357 430.127 398.288 432.391 398.219C433.092 398.197 433.793 398.175 434.515 398.152C437.68 398.057 440.834 398 444 398C444.495 399.485 444.495 399.485 445 401C432.13 401 419.26 401 406 401C406 400.34 406 399.68 406 399C404.35 399.33 402.7 399.66 401 400C401 399.34 401 398.68 401 398C401.66 397.67 402.32 397.34 403 397C403 394.36 403 391.72 403 389Z" fill="#590D6E"/>
<path d="M244 288C244.66 288 245.32 288 246 288C245.856 289.299 245.711 290.599 245.562 291.938C244.788 299.607 244.42 307.305 244 315C244.66 315 245.32 315 246 315C246.33 316.98 246.66 318.96 247 321C245.68 320.67 244.36 320.34 243 320C241.515 324.455 241.515 324.455 240 329C239.34 329 238.68 329 238 329C238.939 320.945 239.9 312.981 241.633 305.051C242.101 302.783 242.101 302.783 242 299.562C242 297 242 297 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288Z" fill="#D6D6D5"/>
<path d="M169 262C170.125 265.75 170.125 265.75 169 268C169.186 268.969 169.371 269.939 169.563 270.938C170.361 276.087 169.703 281.089 168 286C166.146 288.287 164.527 289.407 162 291C161.957 289 161.959 287 162 285C162.33 284.67 162.66 284.34 163 284C163.376 281.374 163.707 278.76 164 276.125C164.87 268.39 164.87 268.39 166 265C166.66 265 167.32 265 168 265C168.33 264.01 168.66 263.02 169 262Z" fill="#BFBCBD"/>
<path d="M406 399C406 399.66 406 400.32 406 401C422.17 401 438.34 401 455 401C455 401.66 455 402.32 455 403C438.17 403 421.34 403 404 403C404 402.34 404 401.68 404 401C403.01 400.67 402.02 400.34 401 400C403 399 403 399 406 399Z" fill="#500E5A"/>
<path d="M294 459C295.98 459.99 295.98 459.99 298 461C298 468.92 298 476.84 298 485C299.65 485 301.3 485 303 485C303.33 479.39 303.66 473.78 304 468C306.491 471.737 306.207 473.745 306.125 478.188C306.107 479.46 306.089 480.732 306.07 482.043C306.036 483.507 306.036 483.507 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C301.36 487 298.72 487 296 487C295.975 486.258 295.95 485.517 295.924 484.753C295.808 481.397 295.685 478.042 295.562 474.688C295.523 473.52 295.484 472.353 295.443 471.15C295.401 470.032 295.36 468.914 295.316 467.762C295.28 466.73 295.243 465.698 295.205 464.635C295.098 461.893 295.098 461.893 294 459Z" fill="#5C115E"/>
<path d="M235 359C236.283 362.85 236.066 365.947 236 370C235.34 370 234.68 370 234 370C234.33 372.31 234.66 374.62 235 377C235.99 377 236.98 377 238 377C237.67 379.97 237.34 382.94 237 386C236.34 386 235.68 386 235 386C234.818 386.554 234.636 387.109 234.449 387.68C234.198 388.404 233.946 389.129 233.688 389.875C233.444 390.594 233.2 391.314 232.949 392.055C232 394 232 394 229 396C229.309 394.721 229.619 393.442 229.938 392.125C231.342 385.778 232.105 379.441 231.938 372.938C232.113 361.887 232.113 361.887 235 359Z" fill="#C3C2C4"/>
<path d="M380 245C382.485 249.97 379.759 257.47 378.539 262.668C377.594 266.758 376.811 270.882 376 275C375.825 275.824 375.649 276.647 375.469 277.496C375.01 279.945 374.759 282.331 374.563 284.812C374.138 289.381 373.227 293.582 372 298C371.67 298 371.34 298 371 298C370.811 292.138 371.289 287.067 372.563 281.352C373.114 278.784 373.114 278.784 373 275.25C373 271.674 373.834 269.37 375 266C375.551 263.285 376.022 260.561 376.496 257.832C378.515 246.485 378.515 246.485 380 245Z" fill="#D9D9D9"/>
<path d="M304 457C305.32 457.66 306.64 458.32 308 459C307.01 459.33 306.02 459.66 305 460C304.975 460.651 304.95 461.301 304.924 461.972C304.808 464.919 304.685 467.866 304.562 470.812C304.523 471.837 304.484 472.861 304.443 473.916C304.401 474.899 304.36 475.882 304.316 476.895C304.28 477.801 304.243 478.706 304.205 479.64C304 482 304 482 303 485C301.35 485 299.7 485 298 485C298 477.08 298 469.16 298 461C298.33 461 298.66 461 299 461C299.66 467.6 300.32 474.2 301 481C301.049 479.519 301.098 478.038 301.148 476.512C301.223 474.57 301.299 472.629 301.375 470.688C301.406 469.711 301.437 468.735 301.469 467.729C301.507 466.791 301.546 465.853 301.586 464.887C301.617 464.023 301.649 463.159 301.681 462.268C302 460 302 460 304 457Z" fill="#800A88"/>
<path d="M415 316C416.65 316 418.3 316 420 316C419.67 316.99 419.34 317.98 419 319C418.01 319 417.02 319 416 319C414.631 322.031 413.769 324.943 413.125 328.188C410.295 341.47 410.295 341.47 405 345C405.133 344.299 405.266 343.598 405.402 342.875C406.239 338.379 407.045 333.927 407.5 329.375C407.665 328.261 407.83 327.148 408 326C408.66 325.67 409.32 325.34 410 325C410.727 323.021 411.398 321.02 412 319C412.66 319 413.32 319 414 319C414.33 318.01 414.66 317.02 415 316Z" fill="#44095E"/>
<path d="M603 273C609.75 272.875 609.75 272.875 612 274C612 274.66 612 275.32 612 276C613.98 276.66 615.96 277.32 618 278C618 278.66 618 279.32 618 280C618.598 280.144 619.196 280.289 619.812 280.438C621.562 280.887 623.287 281.429 625 282C625 282.66 625 283.32 625 284C624.34 284 623.68 284 623 284C622.67 284.66 622.34 285.32 622 286C620.021 286.727 618.02 287.398 616 288C615.938 287.072 615.876 286.144 615.812 285.188C615.332 281.806 615.332 281.806 612.438 280.312C611.633 279.879 610.829 279.446 610 279C610 278.01 610 277.02 610 276C609.031 275.876 608.061 275.752 607.062 275.625C606.052 275.419 605.041 275.213 604 275C603.67 274.34 603.34 273.68 603 273Z" fill="#430653"/>
<path d="M532 135C546.85 135 561.7 135 577 135C577 135.66 577 136.32 577 137C577.66 137.33 578.32 137.66 579 138C563.16 137.67 547.32 137.34 531 137C531.33 136.34 531.66 135.68 532 135Z" fill="#5E0174"/>
<path d="M234 385C234.99 385.66 235.98 386.32 237 387C236.67 387.33 236.34 387.66 236 388C235.626 390.501 235.295 392.99 235 395.5C234.135 402.865 234.135 402.865 233 404C230.98 404.072 228.958 404.084 226.938 404.062C225.833 404.053 224.728 404.044 223.59 404.035C222.308 404.018 222.308 404.018 221 404C222 402 222 402 224.312 400.688C230.408 396.86 232.1 391.607 234 385Z" fill="#BFBEBF"/>
<path d="M218 466C220.479 465.973 222.958 465.953 225.438 465.937C226.145 465.929 226.852 465.921 227.58 465.912C229.387 465.903 231.194 465.948 233 466C234 467 234 467 234.098 470.816C234.091 472.398 234.079 473.98 234.062 475.562C234.058 476.369 234.053 477.175 234.049 478.006C234.037 480.004 234.019 482.002 234 484C232.68 484.33 231.36 484.66 230 485C230 485.66 230 486.32 230 487C225.05 487 220.1 487 215 487C215 486.34 215 485.68 215 485C219.62 485 224.24 485 229 485C229 484.34 229 483.68 229 483C229.66 482.67 230.32 482.34 231 482C231.47 478.724 231.47 478.724 231.625 474.937C231.811 471.503 231.811 471.503 232 468C225.07 467.505 225.07 467.505 218 467C218 466.67 218 466.34 218 466Z" fill="#78157B"/>
<path d="M422 240C422.66 240.33 423.32 240.66 424 241C424.312 243.714 424.513 246.339 424.625 249.062C424.664 249.821 424.702 250.58 424.742 251.361C424.837 253.24 424.919 255.12 425 257C426.671 257.681 426.671 257.681 428.375 258.375C431.844 259.93 433.326 260.651 435 264C434.67 264.99 434.34 265.98 434 267C433.67 266.01 433.34 265.02 433 264C431.108 263.319 431.108 263.319 429 263C428.01 262.67 427.02 262.34 426 262C425.67 261.34 425.34 260.68 425 260C422.983 258.866 422.983 258.866 421 258C420.887 251.889 421.104 246.048 422 240Z" fill="#461054"/>
<path d="M191.355 153.609C192.897 153.618 192.897 153.618 194.47 153.627C197.709 153.649 200.948 153.699 204.188 153.75C206.402 153.77 208.616 153.788 210.83 153.805C216.22 153.848 221.61 153.915 227 154C227 154.33 227 154.66 227 155C225.101 155.03 225.101 155.03 223.164 155.06C218.447 155.136 213.73 155.225 209.013 155.317C206.975 155.356 204.937 155.39 202.9 155.422C199.963 155.468 197.026 155.526 194.09 155.586C192.733 155.603 192.733 155.603 191.349 155.621C185.056 155.766 178.341 156.302 173 160C172.195 162.05 172.195 162.05 172 164C171.01 163.67 170.02 163.34 169 163C169 161.35 169 159.7 169 158C176.646 154.719 183.064 153.433 191.355 153.609Z" fill="#A5A3A4"/>
<path d="M283 355C283.66 355.33 284.32 355.66 285 356C284.102 364.533 283.092 372.964 281.375 381.375C280.106 387.638 279.635 393.615 280 400C279.34 399.67 278.68 399.34 278 399C275.474 387.37 278.107 375.536 281.406 364.352C282.12 361.524 282.153 358.903 282 356C282.33 355.67 282.66 355.34 283 355Z" fill="#C8C7C5"/>
<path d="M454 316C456.031 316.086 456.031 316.086 458.5 316.375C459.722 316.51 459.722 316.51 460.969 316.648C463 317 463 317 464 318C465.539 318.063 467.081 318.059 468.621 318.027C470.024 318.009 470.024 318.009 471.455 317.99C473.44 317.955 475.424 317.916 477.408 317.873C478.345 317.862 479.281 317.851 480.246 317.84C481.109 317.823 481.972 317.806 482.861 317.789C485 318 485 318 487 320C471.631 320.132 456.347 319.846 441 319C440.67 318.34 440.34 317.68 440 317C440.927 317.012 441.854 317.023 442.809 317.035C444.605 317.049 444.605 317.049 446.438 317.062C448.23 317.08 448.23 317.08 450.059 317.098C452.889 317.339 452.889 317.339 454 316Z" fill="#540168"/>
<path d="M513 309C513.33 310.32 513.66 311.64 514 313C514.66 313 515.32 313 516 313C516.33 313.66 516.66 314.32 517 315C519.025 315.652 519.025 315.652 521 316C521 316.99 521 317.98 521 319C522.32 319.33 523.64 319.66 525 320C525 320.66 525 321.32 525 322C522.36 321.67 519.72 321.34 517 321C516.67 320.01 516.34 319.02 516 318C514.108 317.319 514.108 317.319 512 317C511.01 316.67 510.02 316.34 509 316C509 315.34 509 314.68 509 314C508.34 314 507.68 314 507 314C507 313.01 507 312.02 507 311C508.207 310.783 508.207 310.783 509.438 310.562C511.921 310.259 511.921 310.259 513 309Z" fill="#571569"/>
<path d="M432 196C434 198 434 198 434.23 201.012C434.188 204.677 434.123 208.337 434 212C433.982 212.772 433.964 213.544 433.945 214.34C433.683 217.867 433.047 218.956 430.438 221.438C429.231 222.211 429.231 222.211 428 223C427.825 218.721 428.111 215.249 429.422 211.176C430.739 206.22 431.283 201.071 432 196Z" fill="#5D0275"/>
<path d="M553 403C553.99 403 554.98 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.963 409.048 553.925 410.096 553.887 411.176C553.821 412.555 553.755 413.934 553.688 415.312C553.665 416.003 553.642 416.693 553.619 417.404C553.347 422.523 553.347 422.523 551.76 424.705C549.477 426.385 548.147 426.347 545.332 426.293C544.439 426.283 543.547 426.274 542.627 426.264C541.234 426.226 541.234 426.226 539.812 426.188C538.872 426.174 537.932 426.16 536.963 426.146C534.641 426.111 532.321 426.062 530 426C530.33 425.34 530.66 424.68 531 424C531.675 424.012 532.351 424.023 533.047 424.035C533.939 424.044 534.831 424.053 535.75 424.062C536.632 424.074 537.513 424.086 538.422 424.098C540.789 424.008 542.722 423.589 545 423C547.25 423.438 547.25 423.438 549 424C551.602 420.097 551.074 416.529 551 412C551.33 411.67 551.66 411.34 552 411C552.231 409.653 552.412 408.296 552.562 406.938C552.707 405.638 552.851 404.339 553 403Z" fill="#4D0D57"/>
<path d="M563.125 397.437C564.221 397.539 565.316 397.641 566.445 397.746C567.288 397.83 568.131 397.914 569 398C569 398.33 569 398.66 569 399C562.565 399.495 562.565 399.495 556 400C556 400.33 556 400.66 556 401C570.19 401.33 584.38 401.66 599 402C599 402.33 599 402.66 599 403C583.82 403 568.64 403 553 403C552.67 403.99 552.34 404.98 552 406C551.25 404.25 551.25 404.25 551 402C554.913 397.277 557.177 396.868 563.125 397.437Z" fill="#6A0384"/>
<path d="M545 479C548.63 479 552.26 479 556 479C555.34 480.98 554.68 482.96 554 485C552.868 485.061 551.736 485.121 550.57 485.184C549.089 485.268 547.607 485.353 546.125 485.438C545.005 485.496 545.005 485.496 543.863 485.557C539.8 485.716 539.8 485.716 536 487C536.33 485.68 536.66 484.36 537 483C539.64 482.67 542.28 482.34 545 482C545 481.01 545 480.02 545 479Z" fill="#BEBEBE"/>
<path d="M543 472C551.25 472.33 559.5 472.66 568 473C568 473.33 568 473.66 568 474C560.41 474 552.82 474 545 474C545 474.99 545 475.98 545 477C551.93 477 558.86 477 566 477C566 477.66 566 478.32 566 479C558.41 479 550.82 479 543 479C543 476.69 543 474.38 543 472Z" fill="#A9AAAA"/>
<path d="M292 305C292.33 305 292.66 305 293 305C292.679 310.631 292.113 315.941 290.562 321.375C288.13 330.366 287.724 339.746 287 349C286.34 349 285.68 349 285 349C285 350.98 285 352.96 285 355C284.67 355 284.34 355 284 355C283.918 350.371 284.173 346.012 284.875 341.438C285.432 337.761 285.988 334.089 286.473 330.402C287.615 321.737 289.232 313.304 292 305Z" fill="#CACAC9"/>
<path d="M292 284C292.33 284.99 292.66 285.98 293 287C292.67 287.66 292.34 288.32 292 289C292.006 290.709 292.054 292.418 292.125 294.125C292.182 299.497 291.326 303.168 289 308C288.34 308.33 287.68 308.66 287 309C287.142 306.479 287.289 303.958 287.438 301.438C287.477 300.733 287.516 300.029 287.557 299.303C288.097 290.29 288.097 290.29 289 286C289.99 285.34 290.98 284.68 292 284Z" fill="#B6B3B4"/>
<path d="M299 231C299.99 231.33 300.98 231.66 302 232C302.448 240.281 301.635 248.095 299 256C298.34 256.33 297.68 256.66 297 257C297 233 297 233 299 231Z" fill="#C4C1C5"/>
<path d="M631.062 152.937C632.119 152.942 633.175 152.947 634.264 152.951C636.843 152.963 639.421 152.979 642 153C642 153.99 642 154.98 642 156C641.01 155.67 640.02 155.34 639 155C637.328 155.308 635.662 155.644 634 156C632.162 156.078 630.321 156.108 628.48 156.098C627.459 156.094 626.437 156.091 625.385 156.088C624.33 156.08 623.275 156.071 622.188 156.062C621.113 156.058 620.039 156.053 618.932 156.049C616.288 156.037 613.644 156.021 611 156C610.67 155.34 610.34 154.68 610 154C617.06 153.065 623.946 152.879 631.062 152.937Z" fill="#4D0161"/>
<path d="M242 336C242.66 336 243.32 336 244 336C244 338.64 244 341.28 244 344C243.34 344 242.68 344 242 344C242.012 344.641 242.023 345.281 242.035 345.941C242.089 351.087 241.882 355.93 241 361C240.34 361 239.68 361 239 361C239 359.35 239 357.7 239 356C238.01 355.67 237.02 355.34 236 355C237.074 352.085 237.778 350.222 240 348C239.67 347.01 239.34 346.02 239 345C239.559 342.738 239.559 342.738 240.438 340.312C240.725 339.504 241.012 338.696 241.309 337.863C241.651 336.941 241.651 336.941 242 336Z" fill="#B7B6B7"/>
<path d="M382 211C382.66 211 383.32 211 384 211C383.886 212.459 383.758 213.917 383.625 215.375C383.555 216.187 383.486 216.999 383.414 217.836C383 220 383 220 381 222C380.973 220.354 380.954 218.708 380.938 217.062C380.926 216.146 380.914 215.229 380.902 214.285C381 212 381 212 382 211ZM379 222C379.66 222 380.32 222 381 222C381.237 229.035 380.788 235.183 379 242C378.01 242 377.02 242 376 242C376.168 241.408 376.335 240.817 376.508 240.207C378.143 233.967 378.143 233.967 376 228C376.66 228 377.32 228 378 228C378.33 226.02 378.66 224.04 379 222Z" fill="#E6E6E7"/>
<path d="M554.625 457.75C555.484 457.729 556.342 457.709 557.227 457.688C558.464 457.68 558.464 457.68 559.727 457.672C560.475 457.663 561.223 457.653 561.995 457.644C564 458 564 458 567 461C557.76 461 548.52 461 539 461C539.33 460.34 539.66 459.68 540 459C544.705 457.538 549.742 457.78 554.625 457.75Z" fill="#B1B2B1"/>
<path d="M501 128C502.32 128.33 503.64 128.66 505 129C504.01 130.485 504.01 130.485 503 132C504.32 131.67 505.64 131.34 507 131C506.493 131.692 506.493 131.692 505.977 132.398C502.313 137.756 500.879 142.6 500 149C498.68 149.33 497.36 149.66 496 150C496.33 149.34 496.66 148.68 497 148C497.393 145.125 497.746 142.259 498.062 139.375C498.153 138.573 498.244 137.771 498.338 136.945C498.562 134.964 498.781 132.982 499 131C499.66 131 500.32 131 501 131C501 130.01 501 129.02 501 128Z" fill="#400B4F"/>
<path d="M553 221C553.722 221.309 554.444 221.619 555.188 221.938C558.446 223.168 561.506 224 565 224C565.33 224.99 565.66 225.98 566 227C569.3 226.67 572.6 226.34 576 226C575 230 575 230 574 231C569.781 231.406 567.739 231.567 564.312 228.938C563.549 228.298 562.786 227.659 562 227C559.736 227.126 559.736 227.126 558 228C557.67 227.01 557.34 226.02 557 225C555 223.791 555 223.791 553 223C553 222.34 553 221.68 553 221Z" fill="#63077E"/>
<path d="M376 300C375.858 302.375 375.711 304.75 375.562 307.125C375.504 308.123 375.504 308.123 375.443 309.141C375.188 313.15 374.732 317.05 374 321C373.34 320.67 372.68 320.34 372 320C371.608 318.346 371.279 316.677 371 315C370.67 314.01 370.34 313.02 370 312C370.516 308.183 371.613 304.589 373 301C375 300 375 300 376 300Z" fill="#C2C2C3"/>
<path d="M301 225C301.495 227.97 301.495 227.97 302 231C300.68 231.33 299.36 231.66 298 232C298 231.34 298 230.68 298 230C286.12 229.67 274.24 229.34 262 229C262 228.67 262 228.34 262 228C263.555 227.909 263.555 227.909 265.141 227.816C266.51 227.732 267.88 227.647 269.25 227.562C269.932 227.523 270.614 227.484 271.316 227.443C274.663 227.232 277.764 226.859 281 226C281.701 226.144 282.402 226.289 283.125 226.438C290.012 227.785 294.945 225 301 225Z" fill="#D8D7D9"/>
<path d="M255 250C255.99 250 256.98 250 258 250C258.043 251.666 258.041 253.334 258 255C257.67 255.33 257.34 255.66 257 256C256.6 258.855 256.248 261.697 255.938 264.562C255.847 265.369 255.756 266.175 255.662 267.006C255.438 269.003 255.218 271.002 255 273C254.34 272.67 253.68 272.34 253 272C251.211 264.987 252.171 257.902 254 251C254.33 250.67 254.66 250.34 255 250Z" fill="#BCB5C3"/>
<path d="M174 247C174.33 247 174.66 247 175 247C175.23 252.723 174.398 257.804 173.125 263.375C172.951 264.194 172.777 265.012 172.598 265.855C172.135 267.921 171.575 269.963 171 272C170.34 272.33 169.68 272.66 169 273C167.433 265.511 169.561 260.042 172 253C172.66 253 173.32 253 174 253C174 251.02 174 249.04 174 247ZM166 260C166.99 260.99 167.98 261.98 169 263C168.67 263.66 168.34 264.32 168 265C167.34 265 166.68 265 166 265C166 263.35 166 261.7 166 260Z" fill="#C8C6C7"/>
<path d="M165 215C165.33 215 165.66 215 166 215C166.33 218.63 166.66 222.26 167 226C169.475 226.99 169.475 226.99 172 228C172 228.33 172 228.66 172 229C168.04 229 164.08 229 160 229C160 224 160 224 161.438 222.5C161.953 222.005 162.469 221.51 163 221C163.648 218.429 163.648 218.429 164 216C164.33 215.67 164.66 215.34 165 215Z" fill="#BAB9B9"/>
<path d="M249 243C249.66 243 250.32 243 251 243C251.223 250.326 250.954 256.926 249 264C248.664 265.333 248.331 266.666 248 268C247.01 268 246.02 268 245 268C245.114 266.395 245.242 264.791 245.375 263.188C245.479 261.848 245.479 261.848 245.586 260.48C246 258 246 258 248 255C248.204 252.814 248.204 252.814 248.062 250.5C247.948 247.517 248.035 245.894 249 243Z" fill="#E5E5E7"/>
<path d="M204 452C212.25 452 220.5 452 229 452C229 452.66 229 453.32 229 454C228.349 454.02 227.699 454.04 227.028 454.06C224.081 454.155 221.134 454.265 218.188 454.375C217.163 454.406 216.139 454.437 215.084 454.469C213.61 454.527 213.61 454.527 212.105 454.586C211.199 454.617 210.294 454.649 209.36 454.681C206.735 454.86 206.735 454.86 204 457C203.01 457 202.02 457 201 457C201.33 456.01 201.66 455.02 202 454C202.66 454 203.32 454 204 454C204 453.34 204 452.68 204 452Z" fill="#801784"/>
<path d="M169 295C169.99 295 170.98 295 172 295C171.424 297.386 170.778 299.667 170 302C170.33 302.99 170.66 303.98 171 305C170.621 306.832 170.621 306.832 170 309C169.516 311.876 169.052 314.755 168.598 317.637C168.4 318.417 168.203 319.196 168 320C167.34 320.33 166.68 320.66 166 321C165.4 302.2 165.4 302.2 169 295Z" fill="#E2E4E2"/>
<path d="M210 455C216.6 455 223.2 455 230 455C230 455.99 230 456.98 230 458C223.07 458 216.14 458 209 458C209.33 457.01 209.66 456.02 210 455Z" fill="#931098"/>
<path d="M612.801 151.121C613.637 151.145 614.474 151.168 615.335 151.193C617.995 151.269 620.653 151.353 623.312 151.437C625.12 151.491 626.928 151.543 628.736 151.596C633.158 151.725 637.579 151.86 642 152C642 152.33 642 152.66 642 153C630.902 153.558 619.801 154.095 608.688 154.187C607.936 154.2 607.185 154.213 606.411 154.227C604.606 154.23 602.801 154.125 601 154C600.34 153.34 599.68 152.68 599 152C603.647 150.79 608.048 150.962 612.801 151.121Z" fill="#440356"/>
<path d="M359 366C360.507 369.013 359.421 371.09 358.625 374.312C357.47 379.048 356.383 383.757 355.563 388.562C355.007 390.969 354.195 392.849 353 395C351.565 392.13 352.467 390.141 353 387C352.979 385.763 352.959 384.525 352.938 383.25C353 380 353 380 355 378C355.606 375.638 355.606 375.638 356 373C356.778 368.222 356.778 368.222 359 366Z" fill="#E8E7E7"/>
<path d="M303 258C303.33 258 303.66 258 304 258C304.153 261.75 304.071 264.759 303 268.375C302.138 271.5 301.916 273.413 302 276.562C302.092 280.424 301.608 283.426 300 287C299.34 287.33 298.68 287.66 298 288C296.672 284.015 297.803 281.989 299 278C299.144 276.969 299.289 275.938 299.437 274.875C300.266 269.169 301.66 263.604 303 258Z" fill="#E5E5E4"/>
<path d="M435 177C435.33 177.66 435.66 178.32 436 179C436.66 179 437.32 179 438 179C438.33 178.34 438.66 177.68 439 177C439.081 178.624 439.139 180.25 439.188 181.875C439.222 182.78 439.257 183.685 439.293 184.617C439.196 185.404 439.1 186.19 439 187C438.01 187.66 437.02 188.32 436 189C436 189.99 436 190.98 436 192C434.02 192.99 434.02 192.99 432 194C432.165 193.237 432.33 192.474 432.5 191.688C433.091 188.964 433.091 188.964 433 186C433.303 184.431 433.639 182.869 434 181.312C434.186 180.504 434.371 179.696 434.562 178.863C434.707 178.248 434.851 177.634 435 177ZM431 187C433 188 433 188 433 188L431 187Z" fill="#5B0572"/>
<path d="M360 387C360.99 387.99 361.98 388.98 363 390C362.01 391.485 362.01 391.485 361 393C360.796 395.22 360.796 395.22 360.938 397.562C361.098 401.805 361.098 401.805 360 404C358.02 404 356.04 404 354 404C354 402 354 402 356 400C356.167 397.416 356.167 397.416 356 395C356.66 395 357.32 395 358 395C358 393.68 358 392.36 358 391C358.66 391 359.32 391 360 391C360 389.68 360 388.36 360 387Z" fill="#C3BDC4"/>
<path d="M618 383C618.33 383 618.66 383 619 383C618.859 385.25 618.712 387.5 618.562 389.75C618.481 391.003 618.4 392.256 618.316 393.547C618.075 396.183 617.757 398.48 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C613.68 402.67 612.36 402.34 611 402C611.66 402 612.32 402 613 402C613.33 398.04 613.66 394.08 614 390C615.32 389.67 616.64 389.34 618 389C618 387.02 618 385.04 618 383Z" fill="#461158"/>
<path d="M201 477C207.93 477 214.86 477 222 477C222 477.66 222 478.32 222 479C216.06 479 210.12 479 204 479C203.34 480.65 202.68 482.3 202 484C201.34 484 200.68 484 200 484C200.33 481.69 200.66 479.38 201 477Z" fill="#73137B"/>
<path d="M451 458C458.855 457.681 466.269 458.643 474 460C474 460.66 474 461.32 474 462C470.542 462.029 467.083 462.047 463.625 462.063C462.148 462.075 462.148 462.075 460.641 462.088C459.229 462.093 459.229 462.093 457.789 462.098C456.485 462.106 456.485 462.106 455.155 462.114C453 462 453 462 451 461C451 460.01 451 459.02 451 458Z" fill="#9E9E9D"/>
<path d="M166 272C166.33 272 166.66 272 167 272C167.135 274.419 167.234 276.829 167.313 279.25C167.354 279.932 167.396 280.614 167.439 281.316C167.488 283.328 167.488 283.328 167 287C164.48 289.484 164.48 289.484 162 291C161.957 289 161.959 287 162 285C162.33 284.67 162.66 284.34 163 284C163.283 281.452 163.448 278.905 163.621 276.348C164 274 164 274 166 272Z" fill="#B6AEB4"/>
<path d="M209 459C210.65 459 212.3 459 214 459C213.34 459.619 212.68 460.238 212 460.875C209.772 462.756 209.772 462.756 210 465C216.93 465 223.86 465 231 465C231 465.33 231 465.66 231 466C227.375 466.196 223.75 466.381 220.125 466.562C219.092 466.619 218.06 466.675 216.996 466.732C215.517 466.805 215.517 466.805 214.008 466.879C212.641 466.95 212.641 466.95 211.247 467.022C209 467 209 467 207 466C207 464.35 207 462.7 207 461C207.66 461 208.32 461 209 461C209 460.34 209 459.68 209 459Z" fill="#711875"/>
<path d="M591 144C593.475 144.99 593.475 144.99 596 146C596 147.32 596 148.64 596 150C596.99 150 597.98 150 599 150C599 150.66 599 151.32 599 152C597.68 152 596.36 152 595 152C594.67 152.99 594.34 153.98 594 155C591.569 152.883 590.155 151.465 589.125 148.375C589.084 147.591 589.043 146.808 589 146C589.66 145.34 590.32 144.68 591 144Z" fill="#5C0774"/>
<path d="M643 227C644.125 230.75 644.125 230.75 643 233C634.61 233.136 626.356 232.755 618 232C618.33 231.34 618.66 230.68 619 230C626.92 230 634.84 230 643 230C643 229.01 643 228.02 643 227Z" fill="#500C60"/>
<path d="M502 137C502.33 137 502.66 137 503 137C503.081 139.438 503.14 141.874 503.188 144.312C503.225 145.348 503.225 145.348 503.264 146.404C503.338 151.518 503.338 151.518 501.648 153.93C499.434 155.367 497.623 155.798 495 156C494.34 155.34 493.68 154.68 493 154C494.65 153.67 496.3 153.34 498 153C498.205 152.013 498.41 151.025 498.621 150.008C498.891 148.726 499.16 147.445 499.438 146.125C499.704 144.849 499.971 143.573 500.246 142.258C501 139 501 139 502 137Z" fill="#5D0275"/>
<path d="M158 337C158.379 342.93 157.106 347.472 155 353C154.34 352.67 153.68 352.34 153 352C153.113 349.687 153.241 347.374 153.375 345.062C153.445 343.775 153.514 342.487 153.586 341.16C153.723 340.117 153.859 339.074 154 338C156 337 156 337 158 337Z" fill="#B2ADB9"/>
<path d="M478 289C478.66 289.99 479.32 290.98 480 292C481.661 292.681 483.328 293.347 485 294C485.474 294.495 485.949 294.99 486.438 295.5C488.653 297.627 491.091 298.16 494 299C494 299.66 494 300.32 494 301C494.66 301.33 495.32 301.66 496 302C492.59 301.213 489.311 300.129 486 299C486 298.34 486 297.68 486 297C485.443 297.227 484.886 297.454 484.312 297.688C481.015 298.133 479.597 296.965 477 295C476.67 294.01 476.34 293.02 476 292C476.66 292 477.32 292 478 292C478 291.01 478 290.02 478 289Z" fill="#600E76"/>
<path d="M253 243C253.33 243 253.66 243 254 243C254.174 249.842 253.517 256.463 252.688 263.25C252.57 264.325 252.452 265.4 252.33 266.508C252.204 267.542 252.079 268.575 251.949 269.641C251.839 270.574 251.729 271.508 251.616 272.47C251 275 251 275 248 279C248.33 274.71 248.66 270.42 249 266C249.66 266 250.32 266 251 266C250.977 265.261 250.954 264.523 250.93 263.762C250.802 256.592 251.457 250 253 243Z" fill="#CDCFCD"/>
<path d="M162 327C163.503 329.388 164.054 330.58 163.688 333.422C163.461 334.273 163.234 335.123 163 336C162.835 336.871 162.67 337.743 162.5 338.641C162.335 339.502 162.17 340.363 162 341.25C161.835 342.121 161.67 342.993 161.5 343.891C161 346 161 346 160 347C159.607 348.679 159.259 350.369 158.938 352.062C158.761 352.982 158.584 353.901 158.402 354.848C158.203 355.913 158.203 355.913 158 357C157.67 357 157.34 357 157 357C157.362 346.598 159.415 337.041 162 327Z" fill="#D1D0D0"/>
<path d="M388 192C390 193 390 193 391 194C391.709 197.665 392.098 201.267 392 205C390.188 207.5 390.188 207.5 388 209C387.34 209.99 386.68 210.98 386 212C386.66 205.4 387.32 198.8 388 192Z" fill="#CECDCD"/>
<path d="M573 251C575.875 251.75 575.875 251.75 579 253C580.125 255 580.125 255 581 257C583.034 258.268 583.034 258.268 585 259C584.67 259.99 584.34 260.98 584 262C584 261.34 584 260.68 584 260C582.948 259.938 581.896 259.876 580.812 259.812C576.371 258.866 574.884 257.408 572 254C572.33 253.01 572.66 252.02 573 251Z" fill="#47065C"/>
<path d="M455 408C457.935 410.934 457.462 414.183 457.625 418.125C457.664 418.879 457.702 419.633 457.742 420.41C457.837 422.273 457.919 424.136 458 426C456.68 426 455.36 426 454 426C453.903 419.885 454.23 414.067 455 408Z" fill="#421050"/>
<path d="M620 362C620.66 362 621.32 362 622 362C622.097 368.115 621.77 373.933 621 380C620.34 380 619.68 380 619 380C618.67 380.99 618.34 381.98 618 383C617.438 381.062 617.438 381.062 617 379C617.33 378.67 617.66 378.34 618 378C618.4 375.311 618.751 372.636 619.062 369.938C619.153 369.179 619.244 368.42 619.338 367.639C619.562 365.76 619.782 363.88 620 362Z" fill="#500F5E"/>
<path d="M174 169C175.874 174.593 174.088 180.452 173.187 186.125C173.009 187.33 172.83 188.536 172.646 189.777C172.379 191.5 172.379 191.5 172.105 193.258C171.942 194.311 171.779 195.364 171.61 196.45C171 199 171 199 169 201C168.541 193.355 170.302 186.421 172 179C172.404 177.043 172.8 175.085 173.187 173.125C173.346 172.323 173.505 171.521 173.668 170.695C173.778 170.136 173.887 169.576 174 169Z" fill="#CFD0CF"/>
<path d="M157 374C158.363 378.088 157.485 381.113 156.438 385.188C155.775 389.449 155.925 393.696 156 398C155.691 397.361 155.381 396.721 155.063 396.062C154.166 394.064 154.166 394.064 153 393C152.528 386.51 153.712 381.083 156 375C156.33 374.67 156.66 374.34 157 374Z" fill="#DCDDDB"/>
<path d="M235 359C236.283 362.85 236.067 365.947 236 370C235.34 370 234.68 370 234 370C234.33 372.31 234.66 374.62 235 377C235.99 377 236.98 377 238 377C238 377.66 238 378.32 238 379C236.35 379.66 234.7 380.32 233 381C230.717 374.151 231.976 366.753 234 360C234.33 359.67 234.66 359.34 235 359Z" fill="#D1D1D0"/>
<path d="M492 313C494.97 313 497.94 313 501 313C501.195 319.055 501.195 319.055 501 321C500.34 321.66 499.68 322.32 499 323C498.34 322.67 497.68 322.34 497 322C496.375 318.938 496.375 318.938 496 316C494.68 315.67 493.36 315.34 492 315C492 314.34 492 313.68 492 313Z" fill="#461054"/>
<path d="M364 338C365.905 341.19 366.223 343.317 365.875 347C365.811 347.846 365.746 348.691 365.68 349.562C364.827 352.62 363.366 353.947 361 356C361.142 353.916 361.288 351.833 361.438 349.75C361.519 348.59 361.6 347.43 361.684 346.234C362.325 339.675 362.325 339.675 364 338Z" fill="#D8D8D8"/>
<path d="M372 322C372.66 322.66 373.32 323.32 374 324C373.67 324.33 373.34 324.66 373 325C372.767 326.682 372.587 328.371 372.438 330.062C372.312 331.441 372.312 331.441 372.184 332.848C372.123 333.558 372.062 334.268 372 335C371.01 335.33 370.02 335.66 369 336C368.162 331.345 367.984 327.629 369 323C369.99 322.67 370.98 322.34 372 322Z" fill="#BCBABC"/>
<path d="M304 468C306.491 471.737 306.207 473.745 306.125 478.188C306.107 479.46 306.089 480.732 306.07 482.043C306.036 483.507 306.036 483.507 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C302.02 487 300.04 487 298 487C298 486.34 298 485.68 298 485C299.65 485 301.3 485 303 485C303.33 479.39 303.66 473.78 304 468Z" fill="#691D69"/>
<path d="M205 459C205.33 459 205.66 459 206 459C206.33 461.31 206.66 463.62 207 466C209.31 466.66 211.62 467.32 214 468C213.67 468.99 213.34 469.98 213 471C209.625 471.125 209.625 471.125 206 471C204 469 204 469 203.77 466.871C203.791 465.666 203.791 465.666 203.812 464.438C203.819 463.632 203.825 462.826 203.832 461.996C204 460 204 460 205 459Z" fill="#92039A"/>
<path d="M248 302C248.33 302 248.66 302 249 302C248.887 304.313 248.759 306.626 248.625 308.938C248.555 310.225 248.486 311.513 248.414 312.84C248.277 313.883 248.141 314.926 248 316C247.01 316.495 247.01 316.495 246 317C246 316.34 246 315.68 246 315C245.34 315 244.68 315 244 315C243.67 315.66 243.34 316.32 243 317C242.645 313.185 242.618 311.518 244.937 308.375C245.618 307.591 246.299 306.808 247 306C247.778 303.818 247.778 303.818 248 302Z" fill="#C0C0C0"/>
<path d="M603 273C609.75 272.875 609.75 272.875 612 274C612.625 276.562 612.625 276.562 613 279C614.32 279.33 615.64 279.66 617 280C617.33 282.64 617.66 285.28 618 288C617.34 288 616.68 288 616 288C615.938 287.072 615.876 286.144 615.812 285.188C615.332 281.806 615.332 281.806 612.438 280.312C611.633 279.879 610.829 279.446 610 279C610 278.01 610 277.02 610 276C609.031 275.876 608.061 275.752 607.062 275.625C606.052 275.419 605.041 275.213 604 275C603.67 274.34 603.34 273.68 603 273Z" fill="#49055D"/>
<path d="M385 214C385.33 214 385.66 214 386 214C385.939 214.681 385.879 215.361 385.816 216.062C385.07 224.701 384.516 233.345 384 242C383.01 242.33 382.02 242.66 381 243C381.281 239.666 381.577 236.333 381.875 233C381.954 232.065 382.032 231.131 382.113 230.168C382.621 224.586 383.485 219.398 385 214Z" fill="#CCCCCA"/>
<path d="M374 483C378.95 483 383.9 483 389 483C389 483.66 389 484.32 389 485C385.523 487.143 382.788 487.213 378.75 487.125C377.672 487.107 376.595 487.089 375.484 487.07C374.665 487.047 373.845 487.024 373 487C373.33 485.68 373.66 484.36 374 483Z" fill="#C4C3C5"/>
<path d="M168 249C169.65 249.33 171.3 249.66 173 250C172.328 253.806 171.273 257.352 170 261C169.01 261 168.02 261 167 261C167.33 257.04 167.66 253.08 168 249Z" fill="#B3AFB2"/>
<path d="M171 204C172.418 208.255 172.351 212.57 172.518 217.02C172.718 221.072 173.226 224.337 175 228C173.062 227.688 173.062 227.688 171 227C170.067 224.201 169.871 222.48 169.867 219.586C169.866 218.743 169.865 217.9 169.863 217.031C169.867 216.155 169.871 215.278 169.875 214.375C169.871 213.491 169.867 212.606 169.863 211.695C169.865 210.855 169.866 210.014 169.867 209.148C169.868 208.377 169.869 207.605 169.871 206.81C170 205 170 205 171 204Z" fill="#E3E4E3"/>
<path d="M284 452C285.98 452 287.96 452 290 452C290 452.66 290 453.32 290 454C288.68 454 287.36 454 286 454C286 455.65 286 457.3 286 459C288.64 459 291.28 459 294 459C294.33 459.66 294.66 460.32 295 461C291.37 461 287.74 461 284 461C284 458.03 284 455.06 284 452Z" fill="#74277A"/>
<path d="M415 316C417.625 315.812 417.625 315.812 420 316C419.67 316.99 419.34 317.98 419 319C418.01 319 417.02 319 416 319C414.211 322.961 413.35 326.862 412.562 331.109C412.284 332.045 412.284 332.045 412 333C411.34 333.33 410.68 333.66 410 334C411.615 321.077 411.615 321.077 415 316Z" fill="#520164"/>
<path d="M380 245C382.515 250.031 379.71 257.666 378.477 262.914C377.865 265.592 377.417 268.286 377 271C376.67 271 376.34 271 376 271C375.618 262.225 376.213 254.376 379 246C379.33 245.67 379.66 245.34 380 245Z" fill="#D3D3D3"/>
<path d="M158 313C159.98 313.495 159.98 313.495 162 314C161.939 315.418 161.85 316.834 161.75 318.25C161.704 319.039 161.657 319.828 161.609 320.641C161 323 161 323 157 327C157.33 322.38 157.66 317.76 158 313Z" fill="#B7AFB8"/>
<path d="M229 452C229.66 452 230.32 452 231 452C231.33 453.98 231.66 455.96 232 458C231.34 458 230.68 458 230 458C230 457.01 230 456.02 230 455C222.08 455.33 214.16 455.66 206 456C206.33 455.34 206.66 454.68 207 454C214.26 454 221.52 454 229 454C229 453.34 229 452.68 229 452Z" fill="#8B188E"/>
<path d="M175 266C176.04 269.381 176.157 272.474 176 276C175.67 276.33 175.34 276.66 175 277C174.719 279.32 174.552 281.639 174.379 283.969C174.254 284.639 174.129 285.309 174 286C173.34 286.33 172.68 286.66 172 287C172.114 284.249 172.241 281.5 172.375 278.75C172.406 277.973 172.437 277.195 172.469 276.395C172.834 269.276 172.834 269.276 175 266Z" fill="#E7E6E6"/>
<path d="M285 362C287.394 364.394 287.296 365.038 287.312 368.312C287.235 372.302 286.565 374.82 284 378C283.67 378 283.34 378 283 378C282.76 372.367 283.615 367.455 285 362Z" fill="#E3E5E6"/>
<path d="M439 318C436.18 320.82 433.289 320.53 429.5 320.75C428.81 320.805 428.121 320.861 427.41 320.918C425.61 321.034 423.803 321.025 422 321C421.34 320.34 420.68 319.68 420 319C424.05 314.95 434.004 317.413 439 318Z" fill="#56026A"/>
<path d="M377 245C377.33 245 377.66 245 378 245C378.266 251.95 377.612 258.235 376 265C374 263 374 263 373.953 260.137C374.051 258.998 374.149 257.86 374.25 256.688C374.381 254.992 374.381 254.992 374.516 253.262C374.97 250.203 375.719 247.799 377 245Z" fill="#E3E3E1"/>
<path d="M547 233C550.588 234.333 553.836 235.831 557 238C557 238.66 557 239.32 557 240C556.34 240 555.68 240 555 240C555 240.66 555 241.32 555 242C554.01 242 553.02 242 552 242C551.67 241.01 551.34 240.02 551 239C549 237.791 549 237.791 547 237C547 235.68 547 234.36 547 233Z" fill="#410950"/>
<path d="M649 185C649.66 185.33 650.32 185.66 651 186C650.86 187.646 650.713 189.292 650.562 190.938C650.481 191.854 650.4 192.771 650.316 193.715C650 196 650 196 649 197C648.632 199.328 648.298 201.662 648 204C647.34 203.34 646.68 202.68 646 202C646.406 196.208 647.656 190.639 649 185Z" fill="#470D59"/>
<path d="M284 378C286 384 286 384 284.687 386.938C284.131 387.948 283.574 388.959 283 390C282.329 391.331 281.661 392.664 281 394C280.627 383.327 280.627 383.327 283 379C283.33 378.67 283.66 378.34 284 378Z" fill="#DEDFDE"/>
<path d="M244 288C244.66 288 245.32 288 246 288C245.462 293.691 244.86 299.349 244 305C241.836 301.754 241.624 300.757 242 297C242.66 296.01 243.32 295.02 244 294C243.34 294 242.68 294 242 294C242.66 292.02 243.32 290.04 244 288Z" fill="#DCDEDC"/>
<path d="M424 257C431.251 259.273 431.251 259.273 434.062 262C435 264 435 264 434 267C433.67 266.01 433.34 265.02 433 264C431.108 263.319 431.108 263.319 429 263C428.01 262.67 427.02 262.34 426 262C424.812 259.438 424.812 259.438 424 257Z" fill="#501561"/>
<path d="M456 403C456.99 403.33 457.98 403.66 459 404C459.054 406.104 459.093 408.208 459.125 410.312C459.148 411.484 459.171 412.656 459.195 413.863C459 417 459 417 457 420C456.67 414.39 456.34 408.78 456 403Z" fill="#510666"/>
<path d="M286 454C289.024 454.588 292.018 455.227 295 456C294.67 456.99 294.34 457.98 294 459C291.36 459 288.72 459 286 459C286 457.35 286 455.7 286 454Z" fill="#92249D"/>
<path d="M238 339C240 341 240 341 240.125 343.938C240.084 344.948 240.043 345.959 240 347C240 347.99 240 348.98 240 350C238 351.688 238 351.688 236 353C236.141 351.041 236.288 349.083 236.438 347.125C236.519 346.034 236.6 344.944 236.684 343.82C237 341 237 341 238 339Z" fill="#CECECE"/>
<path d="M432 196C432.33 196 432.66 196 433 196C433.307 205.205 432.362 214.354 429 223C428.67 223 428.34 223 428 223C427.825 218.721 428.111 215.249 429.422 211.176C430.739 206.22 431.283 201.071 432 196Z" fill="#540568"/>
<path d="M476 483C478.31 483 480.62 483 483 483C483 483.66 483 484.32 483 485C484.32 485.33 485.64 485.66 487 486C486 487 486 487 483.715 487.098C482.34 487.08 482.34 487.08 480.938 487.062C480.018 487.053 479.099 487.044 478.152 487.035C477.442 487.024 476.732 487.012 476 487C476 485.68 476 484.36 476 483Z" fill="#CAC9CB"/>
<path d="M612 388C612.33 388 612.66 388 613 388C613.177 392.602 613.108 394.784 611 399C606.05 399 601.1 399 596 399C596 398.67 596 398.34 596 398C597.373 397.961 597.373 397.961 598.773 397.922C599.962 397.865 601.15 397.808 602.375 397.75C603.558 397.704 604.742 397.657 605.961 397.609C609.074 397.34 609.074 397.34 610.375 395.125C611.069 392.765 611.596 390.427 612 388Z" fill="#62057A"/>
<path d="M153 358C154.401 362.202 153.766 365.333 151.938 369.312C151.628 369.869 151.319 370.426 151 371C150.67 371 150.34 371 150 371C149.848 361.88 149.848 361.88 151 359C151.66 358.67 152.32 358.34 153 358Z" fill="#B5AEB5"/>
<path d="M169 275C169.33 275 169.66 275 170 275C170.484 282.897 168.677 290.335 167 298C166.34 297.67 165.68 297.34 165 297C165.133 296.357 165.266 295.714 165.402 295.051C166.175 291.105 166.869 287.148 167.562 283.188C167.701 282.399 167.84 281.611 167.982 280.799C168.322 278.866 168.661 276.933 169 275Z" fill="#C9C8C7"/>
<path d="M300 241C300.66 241.66 301.32 242.32 302 243C301.609 246.004 301.609 246.004 300.75 249.562C300.477 250.739 300.203 251.916 299.922 253.129C299.618 254.076 299.313 255.024 299 256C298.01 256.495 298.01 256.495 297 257C297.114 254.895 297.242 252.791 297.375 250.688C297.445 249.516 297.514 248.344 297.586 247.137C298 244 298 244 300 241Z" fill="#BDBCBD"/>
<path d="M167 222C167.66 222 168.32 222 169 222C169.33 223.32 169.66 224.64 170 226C171.32 226.33 172.64 226.66 174 227C174.33 229.64 174.66 232.28 175 235C174.01 235.33 173.02 235.66 172 236C172 233.36 172 230.72 172 228C170.35 227.67 168.7 227.34 167 227C167 225.35 167 223.7 167 222Z" fill="#CBCCCC"/>
<path d="M433 171C435 173 435 173 435.266 175.242C435.26 176.111 435.255 176.98 435.25 177.875C435.255 178.739 435.26 179.602 435.266 180.492C434.989 183.105 434.319 184.75 433 187C432.67 187 432.34 187 432 187C432.33 181.72 432.66 176.44 433 171Z" fill="#4F0E5E"/>
<path d="M466 458C473.429 457.857 473.429 457.857 477 459C477.381 460.991 477.713 462.993 478 465C477 466 477 466 474.438 466.063C473.633 466.042 472.829 466.021 472 466C473.32 465.67 474.64 465.34 476 465C476 464.01 476 463.02 476 462C475.34 462 474.68 462 474 462C474 461.34 474 460.68 474 460C471.36 459.67 468.72 459.34 466 459C466 458.67 466 458.34 466 458Z" fill="#B2B0AF"/>
<path d="M158 327C159.125 328.688 159.125 328.688 160 331C159.312 333.688 159.312 333.688 158 336C157.01 336.33 156.02 336.66 155 337C154.707 330.945 154.707 330.945 155 329C155.99 328.34 156.98 327.68 158 327Z" fill="#BEB3BD"/>
<path d="M167 199C168.481 202.851 167.383 205.235 166 209C165.639 210.661 165.295 212.326 165 214C164.67 214 164.34 214 164 214C161.571 206.571 161.571 206.571 163 203C163.66 203.33 164.32 203.66 165 204C165.66 202.35 166.32 200.7 167 199Z" fill="#BBB6BB"/>
<path d="M231 452C231.99 452 232.98 452 234 452C234 454.97 234 457.94 234 461C232.35 461.33 230.7 461.66 229 462C229.33 460.68 229.66 459.36 230 458C230.66 458 231.32 458 232 458C231.67 456.02 231.34 454.04 231 452Z" fill="#602562"/>
<path d="M371 314C371.33 314 371.66 314 372 314C372.66 316.97 373.32 319.94 374 323C372.35 323 370.7 323 369 323C368.67 323.99 368.34 324.98 368 326C368.115 324.562 368.242 323.124 368.375 321.688C368.445 320.887 368.514 320.086 368.586 319.262C369 317 369 317 371 314Z" fill="#CCCACC"/>
<path d="M378 275C378.66 275 379.32 275 380 275C380.125 277.875 380.125 277.875 380 281C377.861 283.139 376.867 283.427 374 284C374.645 280.517 375.982 277.906 378 275Z" fill="#BEBDBE"/>
<path d="M250 255C250.33 255 250.66 255 251 255C251 258.63 251 262.26 251 266C250.34 266 249.68 266 249 266C249.33 266.99 249.66 267.98 250 269C249.722 271.341 249.395 273.676 249 276C248.67 276 248.34 276 248 276C247.34 273.36 246.68 270.72 246 268C246.66 268 247.32 268 248 268C248.738 263.676 249.392 259.345 250 255Z" fill="#D8D9D8"/>
<path d="M565 245C565.66 245 566.32 245 567 245C567 245.66 567 246.32 567 247C567.897 247.217 567.897 247.217 568.812 247.438C570.562 247.887 572.287 248.429 574 249C573.34 250.32 572.68 251.64 572 253C569.625 252.375 569.625 252.375 567 251C565.688 247.875 565.688 247.875 565 245Z" fill="#3B0B49"/>
<path d="M176 236C178.36 238.36 178.491 239.779 179 243C177.515 243.99 177.515 243.99 176 245C176 242.03 176 239.06 176 236ZM175 245C175.33 245 175.66 245 176 245C176.054 246.604 176.093 248.208 176.125 249.812C176.148 250.706 176.171 251.599 176.195 252.52C176 255 176 255 174 258C173.973 256.021 173.954 254.042 173.938 252.062C173.926 250.96 173.914 249.858 173.902 248.723C174 246 174 246 175 245Z" fill="#D6D7D5"/>
<path d="M202 470C202.562 470.321 203.123 470.643 203.702 470.974C206.219 472.098 208.023 472.309 210.766 472.414C212.1 472.472 212.1 472.472 213.461 472.531C214.381 472.562 215.302 472.593 216.25 472.625C217.654 472.683 217.654 472.683 219.086 472.742C221.39 472.836 223.695 472.922 226 473C226 473.33 226 473.66 226 474C222.563 474.029 219.125 474.047 215.688 474.062C214.223 474.075 214.223 474.075 212.729 474.088C211.791 474.091 210.853 474.094 209.887 474.098C209.023 474.103 208.159 474.108 207.268 474.114C205 474 205 474 202 473C202 472.01 202 471.02 202 470Z" fill="#671F69"/>
<path d="M390 204C390.66 204.66 391.32 205.32 392 206C391.758 209.039 391.758 209.039 391.125 212.625C390.921 213.814 390.718 215.002 390.508 216.227C390.34 217.142 390.173 218.057 390 219C389.67 219 389.34 219 389 219C389 217.02 389 215.04 389 213C388.01 212.67 387.02 212.34 386 212C387.32 209.36 388.64 206.72 390 204Z" fill="#B3B0B1"/>
<path d="M390 178C390.33 179.32 390.66 180.64 391 182C391.99 182 392.98 182 394 182C394 181.34 394 180.68 394 180C394.66 180 395.32 180 396 180C395.75 181.875 395.75 181.875 395 184C393.062 185.125 393.062 185.125 391 186C390.34 186.66 389.68 187.32 389 188C388.875 181.375 388.875 181.375 390 178Z" fill="#C9C9C9"/>
<path d="M486 423C486.99 423.33 487.98 423.66 489 424C489 424.66 489 425.32 489 426C484.38 426 479.76 426 475 426C475 425.34 475 424.68 475 424C475.71 424.012 476.421 424.023 477.152 424.035C478.071 424.044 478.991 424.053 479.938 424.062C481.312 424.08 481.312 424.08 482.715 424.098C484.966 424.259 484.966 424.259 486 423Z" fill="#6C1C81"/>
<path d="M259 234C259.33 234 259.66 234 260 234C259.913 235.959 259.805 237.917 259.688 239.875C259.629 240.966 259.571 242.056 259.512 243.18C259.343 244.11 259.174 245.041 259 246C257.515 246.99 257.515 246.99 256 248C256 245.607 256.115 243.371 256.375 241C256.445 240.319 256.514 239.639 256.586 238.938C257 237 257 237 259 234Z" fill="#BEB8BF"/>
<path d="M644 205C644.33 205 644.66 205 645 205C644.65 213.35 644.65 213.35 641.938 216.062C641.298 216.372 640.659 216.681 640 217C640 214.69 640 212.38 640 210C640.66 210 641.32 210 642 210C642.66 208.35 643.32 206.7 644 205Z" fill="#5D0471"/>
<path d="M651 159C653.331 162.496 653.703 164.841 654 169C653.01 170.485 653.01 170.485 652 172C652 171.01 652 170.02 652 169C651.34 169 650.68 169 650 169C650.33 165.7 650.66 162.4 651 159Z" fill="#4F0A5E"/>
<path d="M453 483C454.98 483 456.96 483 459 483C459 484.32 459 485.64 459 487C456.36 487 453.72 487 451 487C451 486.34 451 485.68 451 485C451.66 485 452.32 485 453 485C453 484.34 453 483.68 453 483Z" fill="#C6C6C7"/>
<path d="M279 463C279.66 463 280.32 463 281 463C283.473 465.473 283.983 466.708 284.188 470.25C284.126 471.158 284.064 472.065 284 473C283.01 473.33 282.02 473.66 281 474C281.33 472.35 281.66 470.7 282 469C281.34 469 280.68 469 280 469C279.67 467.02 279.34 465.04 279 463Z" fill="#2F0439"/>
<path d="M544 423C544.99 423.66 545.98 424.32 547 425C546 426 546 426 542.402 426.098C540.914 426.091 539.426 426.079 537.938 426.062C537.179 426.058 536.42 426.053 535.639 426.049C533.759 426.037 531.88 426.019 530 426C530.33 425.34 530.66 424.68 531 424C531.687 424.012 532.374 424.023 533.082 424.035C533.983 424.044 534.884 424.053 535.812 424.062C537.152 424.08 537.152 424.08 538.52 424.098C541.134 424.11 541.134 424.11 544 423Z" fill="#590562"/>
<path d="M360 387C360.99 387.99 361.98 388.98 363 390C361.68 392.64 360.36 395.28 359 398C358.01 397.67 357.02 397.34 356 397C356 396.34 356 395.68 356 395C356.66 395 357.32 395 358 395C358 393.68 358 392.36 358 391C358.66 391 359.32 391 360 391C360 389.68 360 388.36 360 387Z" fill="#CCB5CF"/>
<path d="M516 315C518.475 315.495 518.475 315.495 521 316C521 316.99 521 317.98 521 319C522.32 319.33 523.64 319.66 525 320C525 320.66 525 321.32 525 322C523.35 322 521.7 322 520 322C520 321.34 520 320.68 520 320C519.34 320 518.68 320 518 320C517.34 318.35 516.68 316.7 516 315Z" fill="#600A79"/>
<path d="M160 304C160.99 304 161.98 304 163 304C164.108 307.325 163.845 309.622 163 313C161.68 312.67 160.36 312.34 159 312C159.33 309.36 159.66 306.72 160 304Z" fill="#BBB6BA"/>
<path d="M426 221C426.66 221 427.32 221 428 221C427.913 222.626 427.805 224.251 427.688 225.875C427.629 226.78 427.571 227.685 427.512 228.617C427 231 427 231 424 233C424.14 231.187 424.287 229.375 424.438 227.562C424.519 226.553 424.6 225.544 424.684 224.504C425 222 425 222 426 221Z" fill="#420A59"/>
<path d="M588 128C589.458 127.973 590.917 127.954 592.375 127.938C593.187 127.926 593.999 127.914 594.836 127.902C597 128 597 128 599 129C598.67 129.99 598.34 130.98 598 132C594.37 131.34 590.74 130.68 587 130C587.33 129.34 587.66 128.68 588 128Z" fill="#3B0F46"/>
<path d="M204 479C204.99 479.33 205.98 479.66 207 480C206.01 481.65 205.02 483.3 204 485C204.928 484.794 205.856 484.588 206.812 484.375C210 484 210 484 213 486C209.37 486 205.74 486 202 486C201.67 485.34 201.34 484.68 201 484C202.438 481.375 202.438 481.375 204 479Z" fill="#87158B"/>
<path d="M566 467C566.66 467 567.32 467 568 467C568 468.98 568 470.96 568 473C564.37 472.67 560.74 472.34 557 472C557 471.67 557 471.34 557 471C559.64 471 562.28 471 565 471C565.33 469.68 565.66 468.36 566 467Z" fill="#C5C5C7"/>
<path d="M409 333C409.66 333.99 410.32 334.98 411 336C410.382 337.316 409.756 338.628 409.125 339.938C408.777 340.668 408.429 341.399 408.07 342.152C407 344 407 344 405 345C405.281 343.186 405.575 341.374 405.875 339.562C406.037 338.553 406.2 337.544 406.367 336.504C406.576 335.678 406.785 334.851 407 334C407.66 333.67 408.32 333.34 409 333Z" fill="#430A4F"/>
<path d="M167 321C167.66 321.99 168.32 322.98 169 324C167.667 326.667 166.333 329.333 165 332C164.34 331.67 163.68 331.34 163 331C163.565 327.042 164.809 324.334 167 321Z" fill="#E3E4E3"/>
<path d="M169 262C170.089 264.831 169.961 266.165 169.25 269.188C168.838 270.116 168.425 271.044 168 272C167.01 272.33 166.02 272.66 165 273C165.33 270.36 165.66 267.72 166 265C166.66 265 167.32 265 168 265C168.33 264.01 168.66 263.02 169 262Z" fill="#B8B3B8"/>
<path d="M386 213C386.99 213 387.98 213 389 213C389 215.64 389 218.28 389 221C387.68 221.33 386.36 221.66 385 222C385.33 219.03 385.66 216.06 386 213Z" fill="#C4C3C3"/>
<path d="M235 354C236.98 354.99 236.98 354.99 239 356C238.475 360.617 237.925 362.1 235 366C235 362.04 235 358.08 235 354Z" fill="#CACAC9"/>
<path d="M513 309C513.33 310.32 513.66 311.64 514 313C514.66 313 515.32 313 516 313C516 313.66 516 314.32 516 315C513.03 314.67 510.06 314.34 507 314C507 313.01 507 312.02 507 311C508.207 310.783 508.207 310.783 509.438 310.562C511.921 310.259 511.921 310.259 513 309Z" fill="#620A7A"/>
<path d="M630 288C630.99 288 631.98 288 633 288C633 291.63 633 295.26 633 299C632.01 299 631.02 299 630 299C630 295.37 630 291.74 630 288Z" fill="#450B58"/>
<path d="M443 271C449.523 271.615 449.523 271.615 451.938 273.562C452.288 274.037 452.639 274.511 453 275C452.67 275.99 452.34 276.98 452 278C450.242 276.991 448.484 275.982 446.727 274.973C445.502 274.283 444.257 273.629 443 273C443 272.34 443 271.68 443 271Z" fill="#4F145D"/>
<path d="M439 265C441.75 264.688 441.75 264.688 445 265C447.375 267.5 447.375 267.5 449 270C448.67 270.66 448.34 271.32 448 272C447.608 271.526 447.216 271.051 446.812 270.562C444.592 268.648 442.866 268.387 440 268C439.67 267.01 439.34 266.02 439 265Z" fill="#62077B"/>
<path d="M580 255C583.588 256.333 586.836 257.831 590 260C590 260.66 590 261.32 590 262C588.35 262 586.7 262 585 262C584.67 261.01 584.34 260.02 584 259C582 257.791 582 257.791 580 257C580 256.34 580 255.68 580 255Z" fill="#380D45"/>
<path d="M204 452C205.98 452 207.96 452 210 452C210 452.66 210 453.32 210 454C204.375 457 204.375 457 201 457C201.33 456.01 201.66 455.02 202 454C202.66 454 203.32 454 204 454C204 453.34 204 452.68 204 452Z" fill="#7D2784"/>
<path d="M271 397C273 399 273 399 273 402C274.98 402 276.96 402 279 402C279.33 402.66 279.66 403.32 280 404C277.03 404 274.06 404 271 404C271 401.69 271 399.38 271 397Z" fill="#949194"/>
<path d="M273 393C273.66 393 274.32 393 275 393C275.701 396.153 276 398.727 276 402C275.01 402 274.02 402 273 402C272.155 398.622 271.892 396.325 273 393Z" fill="#ACABAF"/>
<path d="M232 385C232.66 385.66 233.32 386.32 234 387C233.639 390.489 231.859 393.09 230 396C228.864 392.591 229.133 391.997 230.437 388.812C230.725 388.097 231.012 387.382 231.309 386.645C231.537 386.102 231.765 385.559 232 385Z" fill="#CBCBCB"/>
<path d="M259 231C259.33 231.99 259.66 232.98 260 234C259.004 235.824 259.004 235.824 257.563 237.688C257.089 238.31 256.616 238.933 256.129 239.574C255.756 240.045 255.384 240.515 255 241C254.066 237.99 253.956 237.133 255 234C257.063 232.312 257.063 232.312 259 231Z" fill="#CECDD0"/>
<path d="M587 228C589.97 228 592.94 228 596 228C596 228.99 596 229.98 596 231C592.7 231 589.4 231 586 231C586.33 230.01 586.66 229.02 587 228Z" fill="#5E0A76"/>
<path d="M305 459C305.99 459 306.98 459 308 459C308 459.66 308 460.32 308 461C307.34 461 306.68 461 306 461C306 464.3 306 467.6 306 471C303.305 466.958 303.768 464.795 304 460C304.33 459.67 304.66 459.34 305 459Z" fill="#771B78"/>
<path d="M315 454C315 455.32 315 456.64 315 458C312.69 458 310.38 458 308 458C308 457.01 308 456.02 308 455C310.491 454.313 312.379 454 315 454Z" fill="#9922A1"/>
<path d="M366 308C368 310 368 310 368.047 312.094C367.949 312.888 367.851 313.682 367.75 314.5C367.662 315.294 367.575 316.088 367.484 316.906C367 319 367 319 365 321C364.973 319.396 364.954 317.792 364.938 316.188C364.926 315.294 364.914 314.401 364.902 313.48C365 311 365 311 366 308Z" fill="#E5E3E4"/>
<path d="M166 272C166.33 272 166.66 272 167 272C167.293 278.055 167.293 278.055 167 280C165.515 280.99 165.515 280.99 164 282C163.805 275.945 163.805 275.945 164 274C164.66 273.34 165.32 272.68 166 272Z" fill="#ACA5AC"/>
<path d="M553 403C553.99 403 554.98 403 556 403C556 404.65 556 406.3 556 408C555.34 408 554.68 408 554 408C553.876 408.804 553.752 409.609 553.625 410.438C553.419 411.283 553.213 412.129 553 413C552.01 413.495 552.01 413.495 551 414C551.66 410.37 552.32 406.74 553 403Z" fill="#541065"/>
<path d="M247 279C249 281 249 281 249.047 283.129C248.9 284.334 248.9 284.334 248.75 285.562C248.662 286.368 248.575 287.174 248.484 288.004C248.325 288.663 248.165 289.321 248 290C247.01 290.495 247.01 290.495 246 291C245.918 286.839 246.018 283.053 247 279Z" fill="#D0CFD1"/>
<path d="M592 145C593.32 145.33 594.64 145.66 596 146C596 147.32 596 148.64 596 150C596.99 150 597.98 150 599 150C599 150.66 599 151.32 599 152C597.35 152 595.7 152 594 152C594 150.68 594 149.36 594 148C593.34 148 592.68 148 592 148C592 147.01 592 146.02 592 145Z" fill="#530E66"/>
<path d="M585 131C587.475 131.495 587.475 131.495 590 132C590 135.63 590 139.26 590 143C589.67 143 589.34 143 589 143C588.856 141.907 588.711 140.814 588.562 139.688C588.117 136.069 588.117 136.069 587 133C586.34 133 585.68 133 585 133C585 132.34 585 131.68 585 131Z" fill="#530167"/>
<path d="M201 477C202.98 477.495 202.98 477.495 205 478C204.01 479.98 203.02 481.96 202 484C201.34 484 200.68 484 200 484C200.33 481.69 200.66 479.38 201 477Z" fill="#742179"/>
<path d="M238 359C240 361 240 361 240.125 364.625C240.084 365.739 240.043 366.852 240 368C238.68 367.34 237.36 366.68 236 366C236.66 363.69 237.32 361.38 238 359Z" fill="#BFBDBF"/>
<path d="M374 310C374.33 310 374.66 310 375 310C374.67 313.63 374.34 317.26 374 321C373.34 320.67 372.68 320.34 372 320C371.75 313.375 371.75 313.375 374 310Z" fill="#BCBABC"/>
<path d="M164 292C164 294.97 164 297.94 164 301C163.01 301 162.02 301 161 301C161 298.36 161 295.72 161 293C163 292 163 292 164 292Z" fill="#B6AFB3"/>
<path d="M438 268C441.312 267.75 441.312 267.75 445 268C446.938 270 446.938 270 448 272C446.519 271.719 445.04 271.425 443.562 271.125C442.739 270.963 441.915 270.8 441.066 270.633C440.384 270.424 439.703 270.215 439 270C438.67 269.34 438.34 268.68 438 268Z" fill="#5A1168"/>
<path d="M255 250C255.99 250 256.98 250 258 250C258.188 252.375 258.188 252.375 258 255C256.515 255.99 256.515 255.99 255 257C254.619 255.009 254.287 253.007 254 251C254.33 250.67 254.66 250.34 255 250Z" fill="#B2ACBF"/>
<path d="M536 226C538.954 227.372 541.44 228.989 544 231C543.67 231.66 543.34 232.32 543 233C541.68 232.34 540.36 231.68 539 231C539 230.34 539 229.68 539 229C538.01 229 537.02 229 536 229C536 228.01 536 227.02 536 226Z" fill="#460D52"/>
<path d="M619 225C622.3 225.33 625.6 225.66 629 226C629 226.99 629 227.98 629 229C625.7 228.34 622.4 227.68 619 227C619 226.34 619 225.68 619 225Z" fill="#6A0684"/>
<path d="M435 177C435.33 177.66 435.66 178.32 436 179C436.66 179 437.32 179 438 179C436.125 184.75 436.125 184.75 435 187C434.34 186.67 433.68 186.34 433 186C433.66 183.03 434.32 180.06 435 177ZM431 187C433 188 433 188 433 188L431 187Z" fill="#540568"/>
<path d="M303 482C303.99 482 304.98 482 306 482C306 482.99 306 483.98 306 485C305.34 485 304.68 485 304 485C304 485.66 304 486.32 304 487C302.02 487 300.04 487 298 487C298 486.34 298 485.68 298 485C299.65 485 301.3 485 303 485C303 484.01 303 483.02 303 482Z" fill="#6E1772"/>
<path d="M482 466C482.66 466 483.32 466 484 466C484.688 467.812 484.688 467.812 485 470C483.562 471.75 483.562 471.75 482 473C481.34 471.68 480.68 470.36 480 469C480.66 468.01 481.32 467.02 482 466Z" fill="#C6C4C6"/>
<path d="M279 389C279.33 389 279.66 389 280 389C280.66 393.29 281.32 397.58 282 402C281.01 402 280.02 402 279 402C279 397.71 279 393.42 279 389Z" fill="#D0CECE"/>
<path d="M152 392C155 394 155 394 155.687 397.125C155.842 398.548 155.842 398.548 156 400C155.01 400.495 155.01 400.495 154 401C152.142 397.865 151.799 395.625 152 392Z" fill="#D1D5CF"/>
<path d="M623 352C623.66 352 624.32 352 625 352C624.34 354.97 623.68 357.94 623 361C621 358 621 358 621.313 355.375C622 353 622 353 623 352Z" fill="#4C0C53"/>
<path d="M499 304C501.97 304 504.94 304 508 304C507.67 305.65 507.34 307.3 507 309C504.36 307.68 501.72 306.36 499 305C499 304.67 499 304.34 499 304Z" fill="#670681"/>
<path d="M423 249C423.66 249.66 424.32 250.32 425 251C424.967 253.729 424.436 256.297 424 259C423.01 258.67 422.02 258.34 421 258C421.875 250.125 421.875 250.125 423 249Z" fill="#4C0C5B"/>
<path d="M543 240C548.373 239.648 548.373 239.648 551 240C553 242 553 242 554 244C552.54 243.718 551.082 243.424 549.625 243.125C548.813 242.963 548.001 242.8 547.164 242.633C545 242 545 242 543 240Z" fill="#5A036E"/>
<path d="M650 169C650.66 169 651.32 169 652 169C652.33 170.65 652.66 172.3 653 174C651.02 174.99 651.02 174.99 649 176C648.375 173.625 648.375 173.625 648 171C648.66 170.34 649.32 169.68 650 169Z" fill="#5D056E"/>
<path d="M502 137C502.33 137 502.66 137 503 137C503.178 141.548 502.998 144.879 501 149C500.67 149 500.34 149 500 149C499.822 144.452 500.002 141.121 502 137Z" fill="#4F0564"/>
<path d="M566 477C567.32 477 568.64 477 570 477C570 479.64 570 482.28 570 485C569.34 485 568.68 485 568 485C568 483.02 568 481.04 568 479C567.34 479 566.68 479 566 479C566 478.34 566 477.68 566 477Z" fill="#B6B6BA"/>
<path d="M294 459C295.98 459.99 295.98 459.99 298 461C298 463.31 298 465.62 298 468C297.01 468.495 297.01 468.495 296 469C295.34 465.7 294.68 462.4 294 459Z" fill="#6C166E"/>
<path d="M308 458C310.31 458 312.62 458 315 458C314.67 458.99 314.34 459.98 314 461C312.02 461 310.04 461 308 461C308 460.01 308 459.02 308 458Z" fill="#7E2A83"/>
<path d="M284 452C285.98 452 287.96 452 290 452C290 452.66 290 453.32 290 454C288.68 454 287.36 454 286 454C286 455.32 286 456.64 286 458C285.34 458 284.68 458 284 458C284 456.02 284 454.04 284 452Z" fill="#803289"/>
<path d="M535 452C536.65 452 538.3 452 540 452C538.63 455.161 538.011 455.993 535 458C535 456.02 535 454.04 535 452Z" fill="#C3C2C3"/>
<path d="M295 268C296.202 271.974 295.637 274.152 294 278C292.375 279.875 292.375 279.875 291 281C291.72 276.391 293.313 272.328 295 268Z" fill="#B6B5B5"/>
<path d="M171 233C172.32 233.66 173.64 234.32 175 235C174.67 236.65 174.34 238.3 174 240C172.68 239.67 171.36 239.34 170 239C170.33 237.02 170.66 235.04 171 233Z" fill="#BBB6BA"/>
<path d="M643 227C644.125 230.75 644.125 230.75 643 233C640.125 233.125 640.125 233.125 637 233C636.34 232.34 635.68 231.68 635 231C637.64 230.67 640.28 230.34 643 230C643 229.01 643 228.02 643 227Z" fill="#43094E"/>
<path d="M390 172C391.188 173.625 391.188 173.625 392 176C390.625 179.25 390.625 179.25 389 182C387.893 178.678 388.149 177.317 389 174C389.33 173.34 389.66 172.68 390 172Z" fill="#DADAD9"/>
<path d="M615 397C615.66 397 616.32 397 617 397C617 398.32 617 399.64 617 401C616.34 401 615.68 401 615 401C615 401.66 615 402.32 615 403C613.68 402.67 612.36 402.34 611 402C611.66 402 612.32 402 613 402C613.217 401.041 613.217 401.041 613.438 400.062C614 398 614 398 615 397Z" fill="#300F38"/>
<path d="M228 388C228.688 389.75 228.688 389.75 229 392C227.562 394.25 227.562 394.25 226 396C225.34 395.67 224.68 395.34 224 395C225.32 392.69 226.64 390.38 228 388Z" fill="#E5E4E5"/>
<path d="M243 319C244.32 319.99 245.64 320.98 247 322C246.67 322.99 246.34 323.98 246 325C245.01 325 244.02 325 243 325C242.618 323.344 242.286 321.675 242 320C242.33 319.67 242.66 319.34 243 319Z" fill="#B8B6B6"/>
<path d="M372 297C373.125 298.625 373.125 298.625 374 301C373.125 304.25 373.125 304.25 372 307C370.875 305.375 370.875 305.375 370 303C370.875 299.75 370.875 299.75 372 297Z" fill="#CDCDCD"/>
<path d="M168 174C169.125 175.75 169.125 175.75 170 178C169.125 180.25 169.125 180.25 168 182C167.34 182 166.68 182 166 182C166.875 175.125 166.875 175.125 168 174Z" fill="#B19EB6"/>
<path d="M537 483C539.31 483 541.62 483 544 483C544 483.66 544 484.32 544 485C541.36 485.66 538.72 486.32 536 487C536.33 485.68 536.66 484.36 537 483Z" fill="#C4C5C4"/>
<path d="M417 312C418.65 312.33 420.3 312.66 422 313C420.812 315 420.812 315 419 317C416.312 317.25 416.312 317.25 414 317C414 316.34 414 315.68 414 315C415.32 314.67 416.64 314.34 418 314C417.67 313.34 417.34 312.68 417 312Z" fill="#410E4E"/>
<path d="M295 294C295.33 294 295.66 294 296 294C296.369 301.508 296.369 301.508 294.5 304C293.757 304.495 293.757 304.495 293 305C294 297.571 294 297.571 295 294Z" fill="#D8D6D7"/>
<path d="M209 459C210.65 459 212.3 459 214 459C212.68 460.65 211.36 462.3 210 464C209.01 463.67 208.02 463.34 207 463C207 462.34 207 461.68 207 461C207.66 461 208.32 461 209 461C209 460.34 209 459.68 209 459Z" fill="#65136A"/>
<path d="M284 381C284.66 381.99 285.32 382.98 286 384C285.01 385.98 284.02 387.96 283 390C282.67 390 282.34 390 282 390C282.875 382.125 282.875 382.125 284 381Z" fill="#E6E6E7"/>
<path d="M361 378C361.99 378 362.98 378 364 378C364 379.32 364 380.64 364 382C362.68 382.33 361.36 382.66 360 383C360.33 381.35 360.66 379.7 361 378Z" fill="#BDC6BE"/>
<path d="M285 362C285.66 362.66 286.32 363.32 287 364C286.75 365.75 286.75 365.75 286 368C285.649 369.072 285.299 370.145 284.937 371.25C284.628 372.158 284.319 373.065 284 374C282.901 370.703 283.129 369.595 283.937 366.312C284.132 365.504 284.327 364.696 284.527 363.863C284.761 362.941 284.761 362.941 285 362Z" fill="#DCDDDF"/>
<path d="M241 340C242.203 342.405 242.101 343.95 242.062 346.625C242.053 347.442 242.044 348.26 242.035 349.102C242.024 349.728 242.012 350.355 242 351C240.375 349.438 240.375 349.438 239 347C239.812 343.25 239.812 343.25 241 340Z" fill="#BEBEBE"/>
<path d="M484 297C484.66 297 485.32 297 486 297C486 297.66 486 298.32 486 299C487.65 299 489.3 299 491 299C490.67 300.32 490.34 301.64 490 303C489.34 302.67 488.68 302.34 488 302C488 301.34 488 300.68 488 300C486.68 299.67 485.36 299.34 484 299C484 298.34 484 297.68 484 297Z" fill="#52165E"/>
<path d="M292 284C293 287 293 287 292.062 289.188C291.537 290.085 291.537 290.085 291 291C290.34 291 289.68 291 289 291C288.812 288.625 288.812 288.625 289 286C289.99 285.34 290.98 284.68 292 284Z" fill="#B1AEB3"/>
<path d="M585 262C586.65 262 588.3 262 590 262C590.33 262.66 590.66 263.32 591 264C591.99 264.66 592.98 265.32 594 266C591.69 265.67 589.38 265.34 587 265C587 264.34 587 263.68 587 263C586.34 262.67 585.68 262.34 585 262Z" fill="#47065C"/>
<path d="M547 233C549.475 233.99 549.475 233.99 552 235C551.67 235.99 551.34 236.98 551 238C549.68 237.67 548.36 237.34 547 237C547 235.68 547 234.36 547 233Z" fill="#37074A"/>
<path d="M169 158C169.66 158 170.32 158 171 158C171 158.66 171 159.32 171 160C171.66 160 172.32 160 173 160C172.67 161.32 172.34 162.64 172 164C171.01 163.67 170.02 163.34 169 163C169 161.35 169 159.7 169 158Z" fill="#AEA4AE"/>
</svg>

     ]]

     local selfPlayer = [[
        <svg width="512" height="512" viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M165.507 276.86C166.326 276.857 167.145 276.854 167.989 276.851C170.713 276.842 173.438 276.84 176.162 276.839C178.124 276.834 180.086 276.829 182.049 276.824C187.37 276.811 192.691 276.804 198.012 276.8C201.347 276.797 204.682 276.793 208.017 276.788C218.481 276.775 228.946 276.765 239.41 276.761C251.432 276.757 263.453 276.739 275.475 276.71C284.801 276.688 294.127 276.678 303.453 276.677C309.006 276.676 314.559 276.67 320.112 276.652C362.328 276.523 409.744 276.416 442.562 307.555C453.87 318.921 461.44 332.591 465.875 347.937C466.066 348.591 466.257 349.245 466.455 349.919C470.694 366.055 470.489 383.059 470.59 399.611C470.613 402.247 470.654 404.884 470.713 407.519C471.06 423.122 471.216 435.939 462 449C461.612 449.551 461.224 450.102 460.825 450.67C454.264 459.886 445.84 466.845 434.678 469.566C431.71 470.047 428.912 470.128 425.905 470.131C424.673 470.135 423.441 470.139 422.171 470.143C420.807 470.142 419.443 470.141 418.078 470.14C416.626 470.143 415.175 470.146 413.723 470.149C409.732 470.157 405.742 470.159 401.752 470.16C397.448 470.162 393.145 470.169 388.841 470.176C379.43 470.19 370.019 470.196 360.607 470.2C354.729 470.203 348.851 470.207 342.973 470.212C326.693 470.224 310.414 470.234 294.135 470.238C293.093 470.238 292.051 470.238 290.977 470.238C289.411 470.239 289.411 470.239 287.813 470.239C285.696 470.239 283.58 470.24 281.464 470.24C279.889 470.241 279.889 470.241 278.283 470.241C261.281 470.245 244.28 470.262 227.278 470.286C209.817 470.309 192.355 470.322 174.894 470.323C165.093 470.324 155.291 470.33 145.49 470.348C137.142 470.363 128.794 470.368 120.446 470.36C116.19 470.356 111.933 470.357 107.677 470.371C103.774 470.384 99.8708 470.383 95.9677 470.37C94.5619 470.369 93.156 470.372 91.7502 470.38C77.4272 470.464 64.6679 468.328 53.8125 458.437C43.5316 447.562 41.6878 434.564 41.6992 420.25C41.6949 419.038 41.6906 417.826 41.6862 416.577C41.6805 414.019 41.6799 411.46 41.6843 408.902C41.6874 405.04 41.664 401.178 41.6386 397.316C41.5544 365.136 48.0279 339.248 71 316C71.6316 315.296 72.2632 314.592 72.914 313.867C95.1185 289.706 133.384 276.822 165.507 276.86Z" fill="white"/>
        <path d="M320.437 63C321.97 64.3201 323.491 65.6534 325 67C326.207 67.9939 326.207 67.9939 327.437 69.0078C347.148 85.7005 360.822 111.152 363 137C364.944 168.211 357.527 194.324 338 219C337.497 219.659 336.995 220.317 336.477 220.996C332.078 226.501 326.553 230.715 321 235C320.218 235.61 319.435 236.219 318.629 236.848C295.785 253.759 267.202 259.665 239.297 255.711C211.316 251.263 186.1 235.929 169.078 213.23C151.596 188.608 145.085 158.235 150.125 128.438C154.107 110.658 161.93 93.7053 174 80C174.675 79.1814 175.351 78.3629 176.047 77.5195C210.962 36.4236 277.991 29.6685 320.437 63Z" fill="white"/>
        </svg>    
     ]]
    
     local foguete = [[
        <svg width="512" height="512" viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M56 198C188.33 198 320.66 198 457 198C457.637 209.469 458.104 220.577 458 232C441.341 232.916 424.68 233.35 408.001 233.707C404.302 233.787 400.603 233.869 396.904 233.951C390.702 234.089 384.501 234.224 378.299 234.357C371.181 234.511 364.063 234.667 356.945 234.826C350.025 234.98 343.106 235.132 336.187 235.282C333.274 235.346 330.361 235.41 327.448 235.475C312.631 235.804 297.821 236.113 283 236C282.832 237.245 282.832 237.245 282.66 238.516C281.406 247.574 279.879 256.559 278.215 265.551C277.951 266.986 277.687 268.421 277.423 269.856C276.877 272.828 276.328 275.8 275.777 278.772C275.071 282.587 274.371 286.402 273.672 290.218C273.132 293.166 272.588 296.112 272.043 299.058C271.783 300.467 271.524 301.876 271.267 303.284C270.91 305.238 270.547 307.19 270.183 309.142C269.978 310.252 269.773 311.362 269.562 312.506C269 315 269 315 268 316C266.508 316.108 265.01 316.147 263.514 316.158C262.545 316.168 261.576 316.178 260.578 316.188C259.506 316.194 258.434 316.199 257.33 316.205C256.208 316.215 255.086 316.225 253.93 316.235C250.202 316.267 246.474 316.292 242.746 316.316C240.169 316.337 237.592 316.358 235.015 316.379C228.913 316.429 222.811 316.474 216.709 316.517C209.763 316.567 202.818 316.622 195.873 316.677C181.582 316.791 167.291 316.898 153 317C152.739 318.186 152.478 319.371 152.209 320.593C149.755 331.748 147.298 342.902 144.838 354.056C143.573 359.79 142.309 365.525 141.048 371.261C139.831 376.792 138.612 382.323 137.391 387.853C136.924 389.967 136.459 392.081 135.995 394.195C135.346 397.148 134.694 400.1 134.041 403.052C133.848 403.933 133.656 404.815 133.457 405.722C132.114 411.772 132.114 411.772 131 414C121.197 414.206 111.482 413.426 101.711 412.723C99.8387 412.59 97.9664 412.458 96.0941 412.326C92.1857 412.05 88.2773 411.772 84.3691 411.491C79.3753 411.133 74.3811 410.78 69.3868 410.429C65.5261 410.157 61.6656 409.883 57.8051 409.608C55.9641 409.477 54.123 409.347 52.2818 409.217C49.7052 409.035 47.1287 408.85 44.5522 408.664C43.4267 408.586 43.4267 408.586 42.2785 408.505C37.4932 408.157 32.7567 407.629 28 407C32.9019 387.737 38.1025 368.567 43.4206 349.415C44.782 344.512 46.1387 339.607 47.4949 334.703C51.494 320.243 55.4999 305.785 59.5284 291.333C61.3246 284.889 63.116 278.443 64.9039 271.997C66.1631 267.457 67.4292 262.92 68.7004 258.384C69.4838 255.582 70.2608 252.779 71.0361 249.975C71.5653 248.068 72.1022 246.164 72.6394 244.259C72.9528 243.121 73.2662 241.982 73.5891 240.809C73.8633 239.826 74.1375 238.843 74.42 237.83C75.3198 233.44 75.5811 230.178 73.5789 226.119C72.9276 225.141 72.2764 224.164 71.6055 223.156C70.8971 222.075 70.1888 220.993 69.459 219.879C68.7024 218.752 67.9453 217.626 67.1875 216.5C65.7175 214.285 64.2552 212.064 62.793 209.844C62.1384 208.866 61.4838 207.888 60.8093 206.881C59.0188 204.03 57.5055 201.011 56 198ZM250.28 235.795C230.141 235.127 215.838 235.995 199.789 249.504C198 251 198 251 195 253C194.506 255.595 194.506 255.595 194.523 258.637C194.492 259.772 194.462 260.907 194.43 262.076C194.412 263.268 194.394 264.46 194.375 265.688C194.059 280.073 194.059 280.073 193 286C191.395 284.564 189.791 283.126 188.188 281.688C187.294 280.887 186.401 280.086 185.48 279.262C184.662 278.515 183.843 277.769 183 277C182.455 276.627 181.911 276.254 181.35 275.869C179.146 272.817 179.751 269.437 179.926 265.832C179.952 265.037 179.979 264.242 180.006 263.424C180.094 260.886 180.203 258.349 180.312 255.812C180.376 254.092 180.438 252.371 180.498 250.65C180.649 246.433 180.82 242.216 181 238C177.37 238 173.74 238 170 238C167.918 243.686 166.689 249.515 165.398 255.418C165.157 256.512 164.916 257.606 164.667 258.734C164.16 261.039 163.654 263.344 163.149 265.65C162.375 269.186 161.594 272.721 160.812 276.256C160.32 278.497 159.828 280.739 159.336 282.98C159.102 284.04 158.867 285.099 158.626 286.191C158.412 287.172 158.198 288.154 157.978 289.165C157.789 290.028 157.599 290.892 157.404 291.781C156.91 294.116 156.91 294.116 157 297C188.35 297 219.7 297 252 297C253.815 287.306 255.63 277.613 257.5 267.625C258.074 264.563 258.649 261.501 259.24 258.346C259.692 255.931 260.143 253.516 260.594 251.102C260.831 249.838 261.069 248.574 261.313 247.272C261.648 245.476 261.648 245.476 261.99 243.643C262.186 242.599 262.381 241.556 262.582 240.48C263.055 238.091 263.055 238.091 263 236C261.508 236.008 261.508 236.008 259.987 236.017C256.745 236.003 253.519 235.918 250.28 235.795Z" fill="white"/>
        <path d="M82.3264 114.886C83.8023 114.887 85.2781 114.892 86.7539 114.902C87.4409 114.903 88.128 114.904 88.8358 114.905C91.4114 114.911 93.9869 114.925 96.5625 114.938C102.317 114.958 108.071 114.979 114 115C114 133.48 114 151.96 114 171C118.62 171 123.24 171 128 171C128 152.52 128 134.04 128 115C134.27 115 140.54 115 147 115C147 133.48 147 151.96 147 171C151.62 171 156.24 171 161 171C161 152.52 161 134.04 161 115C166.61 115 172.22 115 178 115C178 133.48 178 151.96 178 171C182.62 171 187.24 171 192 171C192 152.52 192 134.04 192 115C279.45 115 366.9 115 457 115C457 137.77 457 160.54 457 184C322.69 184 188.38 184 50 184C56.8913 165.623 56.8913 165.623 60.1289 158.109C60.4859 157.273 60.8429 156.436 61.2107 155.574C62.3247 152.964 63.4434 150.357 64.5625 147.75C65.6814 145.134 66.7994 142.518 67.9171 139.902C68.633 138.227 69.3496 136.552 70.067 134.878C72.4629 129.281 74.8087 123.667 77.1052 118.028C78.5412 114.773 78.4869 115.018 82.3264 114.886Z" fill="white"/>
        <path d="M467 131C473.27 131 479.54 131 486 131C486 144.86 486 158.72 486 173C479.73 173 473.46 173 467 173C467 159.14 467 145.28 467 131Z" fill="white"/>
        </svg>        
     ]]
    
    local carro = [[ 
        <svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.56326 0.0197272C8.64872 0.0193492 8.64872 0.0193492 8.7359 0.0189636C8.92641 0.0182294 9.11692 0.0180992 9.30744 0.0179724C9.44421 0.0175797 9.58098 0.0171535 9.71775 0.0166964C10.0891 0.0155849 10.4605 0.0150371 10.8319 0.0146601C11.0642 0.0144113 11.2964 0.0140631 11.5287 0.0136845C12.256 0.012525 12.9833 0.0117051 13.7106 0.0113775C14.5489 0.0109978 15.3872 0.00951089 16.2256 0.00705226C16.8743 0.00521596 17.5231 0.00436336 18.1718 0.00425015C18.559 0.00416146 18.9461 0.00366474 19.3332 0.00214523C19.6976 0.000742363 20.0621 0.000567228 20.4266 0.00130894C20.5598 0.001374 20.6931 0.00100957 20.8264 0.000167567C22.1968 -0.00797918 23.3849 0.278694 24.4035 1.35081C24.8708 1.90674 25.1464 2.52326 25.3973 3.21758C25.4238 3.29017 25.4502 3.36276 25.4774 3.43754C25.8255 4.39917 26.1588 5.36703 26.4917 6.335C26.5855 6.60771 26.6797 6.88027 26.774 7.15279C26.8647 7.41532 26.9551 7.67801 27.0455 7.94068C27.0794 8.03837 27.1132 8.13606 27.148 8.23671C27.1787 8.3263 27.2095 8.4159 27.2411 8.50821C27.2683 8.58709 27.2955 8.66597 27.3235 8.74723C27.3814 8.93652 27.3814 8.93652 27.3814 9.10613C27.4591 9.10347 27.4591 9.10347 27.5384 9.10075C27.7748 9.09367 28.0113 9.08928 28.2478 9.08493C28.3293 9.08209 28.4108 9.07925 28.4948 9.07632C28.9669 9.06981 29.2793 9.07596 29.6398 9.44537C29.9956 9.87799 29.9969 10.2549 29.9854 10.8076C29.9859 10.8827 29.9865 10.9577 29.9871 11.035C29.9819 11.6083 29.8817 11.8958 29.5035 12.3077C29.2221 12.5198 29.04 12.5435 28.7053 12.5833C28.7296 12.6434 28.7539 12.7035 28.779 12.7655C29.9565 15.6926 29.9565 15.6926 29.9633 17.096C29.964 17.1999 29.9646 17.3038 29.9653 17.4108C29.9657 17.5249 29.966 17.6389 29.9663 17.7529C29.967 17.8739 29.9676 17.9948 29.9683 18.1158C29.9703 18.5118 29.9715 18.9077 29.9726 19.3037C29.973 19.4403 29.9734 19.577 29.9739 19.7137C29.9756 20.2822 29.977 20.8507 29.9779 21.4192C29.9792 22.2324 29.9817 23.0455 29.9862 23.8587C29.9892 24.4315 29.9907 25.0042 29.9911 25.577C29.9914 25.9187 29.9923 26.2603 29.9949 26.602C29.9972 26.9235 29.9977 27.2449 29.9968 27.5664C29.9968 27.684 29.9974 27.8016 29.9988 27.9192C30.0062 28.5884 29.9934 29.1187 29.5619 29.6298C29.1447 29.9733 28.7454 29.9831 28.2365 29.9862C28.176 29.9867 28.1155 29.9872 28.0532 29.9877C27.9253 29.9885 27.7975 29.989 27.6697 29.9894C27.4753 29.9902 27.2811 29.9928 27.0868 29.9955C26.9622 29.9961 26.8376 29.9965 26.713 29.9968C26.6267 29.9984 26.6267 29.9984 26.5387 30C26.0384 29.9977 25.6796 29.8725 25.2933 29.5079C25.0092 29.1454 24.9477 28.9136 24.952 28.4358C24.9525 28.3374 24.953 28.239 24.9535 28.1377C24.9548 28.0353 24.9561 27.933 24.9575 27.8276C24.9582 27.7239 24.9589 27.6203 24.9596 27.5135C24.9614 27.2578 24.9642 27.002 24.9672 26.7463C25.3784 26.7463 25.7896 26.7463 26.2132 26.7463C26.2132 26.2985 26.2132 25.8507 26.2132 25.3893C18.8118 25.3893 11.4104 25.3893 3.78468 25.3893C3.78468 25.8371 3.78468 26.2849 3.78468 26.7463C4.19587 26.7463 4.60706 26.7463 5.03071 26.7463C5.04126 27.0997 5.04896 27.4528 5.05504 27.8064C5.05831 27.9059 5.06157 28.0054 5.06493 28.1079C5.07287 28.7233 5.03153 29.1629 4.64132 29.6298C4.22408 29.9733 3.82484 29.9831 3.31589 29.9862C3.2554 29.9867 3.19491 29.9872 3.13258 29.9877C3.00474 29.9885 2.8769 29.989 2.74906 29.9894C2.55473 29.9902 2.36046 29.9928 2.16615 29.9955C2.04157 29.9961 1.917 29.9965 1.79243 29.9968C1.73489 29.9979 1.67736 29.9989 1.61808 30C1.11777 29.9977 0.759021 29.8725 0.372696 29.5079C0.0942167 29.1526 0.0271455 28.92 0.0252358 28.4524C0.024459 28.3503 0.0236821 28.2483 0.0228818 28.1431C0.02283 28.0313 0.0227782 27.9196 0.0227249 27.8044C0.0221312 27.6853 0.0214748 27.5661 0.0207606 27.447C0.0190507 27.1231 0.018366 26.7992 0.0179705 26.4753C0.0176863 26.2722 0.0172003 26.069 0.0166467 25.8659C0.0147371 25.1551 0.0137225 24.4442 0.0134466 23.7334C0.0131652 23.0748 0.0108499 22.4163 0.00757459 21.7578C0.00485107 21.19 0.0036691 20.6221 0.00361515 20.0542C0.003554 19.7162 0.00290106 19.3783 0.00065567 19.0403C-0.0114934 17.0906 0.140034 15.3715 0.88863 13.5745C0.927731 13.4773 0.966833 13.3802 1.00712 13.2801C1.10108 13.0472 1.19621 12.815 1.29262 12.5833C1.20699 12.5713 1.12135 12.5592 1.03313 12.5468C0.735048 12.4964 0.590729 12.4495 0.358094 12.244C0.0423167 11.7578 -0.00196934 11.3848 0.00764767 10.797C0.00644301 10.723 0.00523835 10.6491 0.00399719 10.5729C0.0066248 10.1004 0.058869 9.81087 0.358094 9.44537C0.718648 9.07596 1.03103 9.06981 1.50313 9.07632C1.58464 9.07916 1.66616 9.082 1.75014 9.08493C1.83347 9.08646 1.91679 9.08799 2.00263 9.08957C2.20734 9.09355 2.41188 9.09942 2.61652 9.10613C2.62837 9.05973 2.64022 9.01333 2.65243 8.96553C2.83092 8.2912 3.05528 7.63682 3.28243 6.98062C3.32463 6.85837 3.36683 6.73612 3.40902 6.61387C3.49712 6.3589 3.58546 6.10403 3.67393 5.84921C3.78641 5.52503 3.89795 5.20048 4.00926 4.87582C4.09595 4.62357 4.18331 4.37159 4.27086 4.11969C4.31225 4.00025 4.35338 3.8807 4.39425 3.76105C4.87909 2.34349 5.47529 1.17743 6.744 0.45568C7.35495 0.168043 7.89636 0.0213782 8.56326 0.0197272ZM8.06791 3.93282C7.92978 4.16558 7.84648 4.35535 7.7564 4.61129C7.72168 4.70727 7.68697 4.80326 7.6512 4.90215C7.52298 5.26119 7.40001 5.62229 7.27697 5.98346C7.23105 6.11738 7.1851 6.25128 7.13912 6.38517C7.0186 6.73634 6.89847 7.08767 6.77845 7.43905C6.5865 8.00072 6.39392 8.56213 6.20141 9.12357C6.1347 9.31828 6.06814 9.51305 6.00161 9.70782C5.96014 9.82904 5.91866 9.95025 5.87716 10.0715C5.85765 10.1285 5.83814 10.1856 5.81804 10.2444C5.68402 10.6346 5.54275 11.0207 5.3935 11.4042C5.32948 11.5772 5.32948 11.5772 5.34222 11.82C11.7157 11.82 18.0891 11.82 24.6557 11.82C24.596 11.4952 24.5292 11.2298 24.4241 10.9235C24.3923 10.8305 24.3605 10.7374 24.3277 10.6416C24.2931 10.5412 24.2585 10.4409 24.2228 10.3375C24.1863 10.2312 24.1499 10.1249 24.1135 10.0186C24.0367 9.79477 23.9598 9.571 23.8827 9.34729C23.7864 9.06775 23.6904 8.78808 23.5945 8.50836C23.4076 7.96299 23.2196 7.41806 23.0307 6.87351C22.9014 6.50038 22.7745 6.12636 22.6482 5.75202C22.5799 5.55231 22.5116 5.35262 22.4432 5.15294C22.3976 5.01565 22.3976 5.01565 22.3511 4.87559C22.1913 4.41311 22.0641 4.06414 21.6964 3.76321C21.4224 3.65902 21.1543 3.66727 20.8662 3.66649C20.7881 3.66611 20.7881 3.66611 20.7085 3.66572C20.5343 3.66499 20.36 3.66486 20.1857 3.66473C20.0607 3.66434 19.9358 3.66391 19.8108 3.66346C19.4712 3.66235 19.1317 3.6618 18.7922 3.66142C18.5801 3.66117 18.3679 3.66082 18.1557 3.66045C17.4917 3.65929 16.8277 3.65847 16.1637 3.65814C15.3975 3.65776 14.6313 3.65627 13.8651 3.65381C13.2726 3.65198 12.6802 3.65112 12.0877 3.65101C11.7339 3.65092 11.3802 3.65042 11.0264 3.64891C10.6936 3.64751 10.3608 3.64733 10.0279 3.64807C9.90598 3.64813 9.78402 3.64777 9.66206 3.64693C9.49514 3.64585 9.32829 3.64635 9.16137 3.64723C9.0681 3.64711 8.97482 3.64698 8.87872 3.64686C8.55682 3.68507 8.35444 3.76884 8.06791 3.93282ZM2.61652 16.3148C2.51985 16.3901 2.51985 16.3901 2.42122 16.4669C2.03629 16.8381 1.80921 17.3704 1.71942 17.9189C1.69317 18.6706 1.94324 19.2835 2.4054 19.8341C2.82896 20.2395 3.35988 20.4194 3.91883 20.4092C4.49775 20.3324 5.04122 20.0193 5.42009 19.5376C5.76448 18.935 5.87282 18.3786 5.80948 17.6718C5.61936 16.9724 5.2786 16.5211 4.7116 16.1466C4.07837 15.7784 3.19221 15.8604 2.61652 16.3148ZM24.5316 17.3302C24.1833 17.8769 24.1162 18.3792 24.1884 19.0287C24.3432 19.7179 24.6575 20.2016 25.206 20.5821C25.7263 20.873 26.2461 20.9055 26.811 20.7537C27.3555 20.5459 27.7432 20.2293 28.029 19.6797C28.3013 19.0217 28.3352 18.4228 28.1163 17.7407C27.8612 17.1218 27.4575 16.7035 26.8764 16.456C25.9343 16.1851 25.1284 16.5071 24.5316 17.3302ZM10.8715 21.8274C10.8715 22.555 10.8715 23.2827 10.8715 24.0324C13.5956 24.0324 16.3197 24.0324 19.1264 24.0324C19.1264 23.3048 19.1264 22.5771 19.1264 21.8274C16.4023 21.8274 13.6782 21.8274 10.8715 21.8274Z" fill="white"/>
    </svg>
    ]]
    
    local players = [[
        <svg width="43" height="56" viewBox="0 0 43 56" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M28.6387 35.6562C28.7333 35.744 28.7333 35.744 28.8299 35.8336C29.2352 36.2452 29.3114 36.5333 29.5625 37.1875C29.5625 39.2087 29.5625 41.23 29.5625 43.3125C24.2412 43.3125 18.92 43.3125 13.4375 43.3125C13.4375 36.9995 13.4375 36.9995 13.9081 36.1903C14.2791 35.7209 14.6714 35.3753 15.1224 35.0478C15.1931 34.9959 15.2638 34.944 15.3366 34.8905C19.5106 31.8691 24.7017 32.0037 28.6387 35.6562Z" fill="white"/>
    <path d="M35.4414 25.1562C35.5681 25.1962 35.6949 25.2361 35.8216 25.2759C37.3231 25.7735 39.2762 26.7733 40.1445 28.5469C40.2908 28.9535 40.3331 29.2704 40.3316 29.7181C40.3315 29.902 40.3315 29.902 40.3315 30.0896C40.3307 30.2207 40.3298 30.3519 40.3289 30.487C40.3287 30.6222 40.3284 30.7573 40.3282 30.8966C40.3274 31.2546 40.3259 31.6126 40.324 31.9706C40.3223 32.3365 40.3216 32.7023 40.3207 33.0682C40.3189 33.7851 40.316 34.5019 40.3125 35.2187C39.0371 35.2341 37.7618 35.2456 36.4864 35.2527C35.8942 35.2561 35.302 35.2607 34.7099 35.2683C34.1386 35.2755 33.5674 35.2793 32.9962 35.281C32.778 35.2822 32.5598 35.2846 32.3416 35.2881C32.0365 35.2929 31.7316 35.2936 31.4265 35.2932C31.3358 35.2956 31.2451 35.298 31.1517 35.3004C30.9189 35.2979 30.7125 35.2907 30.4863 35.2187C30.2725 34.9013 30.2725 34.9013 30.1504 34.5625C28.926 33.1076 27.2627 32.1473 25.6992 31.5C25.8075 31.1012 25.9346 30.8221 26.1454 30.5019C26.9424 29.2007 27.155 27.6386 27.2949 26.0312C27.9485 25.6707 28.6036 25.3385 29.2843 25.0742C29.3663 25.0417 29.3663 25.0417 29.45 25.0086C31.4197 24.2669 33.4836 24.4862 35.4414 25.1562Z" fill="white"/>
    <path d="M15.2852 25.7031C15.3636 25.7233 15.4421 25.7435 15.523 25.7642C15.7051 25.9219 15.7051 25.9219 15.7543 26.1229C15.7892 26.3974 15.8114 26.6702 15.8311 26.9473C15.9642 28.3716 16.3369 29.9382 17.1509 30.9702C17.3008 31.1719 17.3008 31.1719 17.3008 31.5C17.2194 31.5372 17.138 31.5744 17.0541 31.6128C14.4037 32.8198 14.4037 32.8198 12.4297 35.2188C9.21477 35.2188 5.99984 35.2188 2.6875 35.2188C2.6875 28.7579 2.6875 28.7579 3.16188 27.9966C3.68348 27.4187 4.26654 26.9894 4.87109 26.5781C4.92491 26.5413 4.97873 26.5045 5.03418 26.4665C6.03109 25.7947 7.06647 25.329 8.14648 24.9375C8.20386 24.9162 8.26124 24.8949 8.32036 24.8729C10.6061 24.0586 13.1003 24.6957 15.2852 25.7031Z" fill="white"/>
    <path d="M34.8535 13.7812C35.3411 14.2961 35.6597 14.9181 35.9453 15.6406C35.9803 15.7266 36.0152 15.8126 36.0513 15.9012C36.4442 17.0467 36.4232 18.5741 36.1448 19.7627C35.892 20.5861 35.5272 21.2807 35.0215 21.875C34.9804 21.9276 34.9394 21.9802 34.8971 22.0344C34.1312 22.9702 33.0927 23.3597 32.0564 23.3238C31.0263 23.2013 30.0514 22.7304 29.3105 21.7656C28.3338 20.2322 28.106 18.7892 28.2187 16.8437C28.2867 16.4024 28.3934 16.0374 28.5547 15.6406C28.611 15.4981 28.611 15.4981 28.6685 15.3527C29.2107 14.0843 30.0273 13.2498 31.0952 12.8037C32.4241 12.4047 33.7493 12.7269 34.8535 13.7812Z" fill="white"/>
    <path d="M13.3535 13.7812C13.8411 14.2961 14.1597 14.9181 14.4453 15.6406C14.4803 15.7266 14.5152 15.8126 14.5513 15.9012C14.9442 17.0467 14.9232 18.5741 14.6448 19.7627C14.392 20.5861 14.0272 21.2807 13.5215 21.875C13.4804 21.9276 13.4394 21.9802 13.3971 22.0344C12.6312 22.9702 11.5927 23.3597 10.5564 23.3238C9.52625 23.2013 8.55138 22.7304 7.81054 21.7656C6.83381 20.2322 6.60605 18.7892 6.71874 16.8437C6.78667 16.4024 6.89337 16.0374 7.05468 15.6406C7.11103 15.4981 7.11103 15.4981 7.16851 15.3527C7.71071 14.0843 8.52728 13.2498 9.5952 12.8037C10.9241 12.4047 12.2493 12.7269 13.3535 13.7812Z" fill="white"/>
    <path d="M24.4532 22.433C25.3585 23.6827 25.5835 25.0223 25.5572 26.6913C25.5072 28.1237 24.9597 29.2709 24.1704 30.2396C23.2054 31.3052 22.0912 31.5308 20.8611 31.4202C19.7444 31.2558 18.9176 30.438 18.2069 29.3557C17.4589 28.052 17.3717 26.6181 17.4687 25.0469C17.656 23.6928 18.3215 22.4897 19.1747 21.6938C19.6477 21.3011 20.1127 21.0475 20.6601 20.8906C20.7184 20.8737 20.7766 20.8568 20.8366 20.8394C22.2175 20.543 23.479 21.2008 24.4532 22.433Z" fill="white"/>
    </svg>
    ]]
    
    local bomba = [[
        <svg width="36" height="40" viewBox="0 0 36 40" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M28.0547 7.57812C28.1329 7.65201 28.211 7.726 28.2891 7.80003C28.3544 7.86181 28.3544 7.86181 28.421 7.92485C28.586 8.0848 28.7404 8.25443 28.894 8.42773C28.9755 8.51928 28.9755 8.51928 29.0586 8.61267C29.1185 8.68065 29.1185 8.68065 29.1797 8.75C28.8545 9.18394 28.508 9.58479 28.1475 9.9826C28.0618 10.0777 28.0618 10.0777 27.9744 10.1747C27.7933 10.3754 27.612 10.5759 27.4307 10.7764C27.3072 10.9131 27.1838 11.0499 27.0604 11.1867C26.7592 11.5205 26.4578 11.8541 26.1563 12.1875C26.2762 12.4726 26.4174 12.6469 26.6237 12.8647C26.7211 12.9694 26.7211 12.9694 26.8204 13.0763C26.9229 13.1859 27.0257 13.2952 27.1291 13.4038C27.6093 13.9098 28.0491 14.3911 28.0855 15.1611C28.0109 15.9064 27.7148 16.2861 27.2631 16.8082C27.0483 17.0567 26.848 17.3145 26.6484 17.5781C26.688 17.6805 26.688 17.6805 26.7284 17.785C28.0477 21.2748 27.9999 25.2158 26.7173 28.7111C26.1165 30.2751 25.2442 31.806 24.1172 32.9688C24.0592 33.0332 24.0012 33.0977 23.9414 33.1641C23.8834 33.2285 23.8254 33.293 23.7656 33.3594C23.733 33.3983 23.7004 33.4373 23.6668 33.4775C21.6295 35.8576 18.4374 37.102 15.536 37.2034C11.8834 37.2654 8.63401 35.7653 6.02051 32.959C3.63525 30.2118 2.45506 26.535 2.51368 22.7472C2.61399 19.2174 3.91271 15.8835 6.15784 13.3926C6.26063 13.2782 6.36221 13.1624 6.46134 13.0441C8.56461 10.5739 11.7382 9.3507 14.7371 9.22987C16.371 9.18256 17.9352 9.47144 19.4766 10.0781C19.5606 10.111 19.6446 10.1438 19.7312 10.1776C19.9048 10.2469 20.0775 10.3181 20.25 10.3906C20.2903 10.344 20.2903 10.344 20.3314 10.2964C20.4561 10.153 20.5815 10.0106 20.707 9.86816C20.7493 9.81927 20.7915 9.77038 20.835 9.72C21.2638 9.23596 21.6825 8.86194 22.3066 8.80859C23.2005 8.8748 23.7331 9.63907 24.3281 10.3076C24.4098 10.3989 24.4098 10.3989 24.4932 10.4921C24.6258 10.6404 24.7583 10.7889 24.8906 10.9375C25.1299 10.8226 25.2853 10.6743 25.4684 10.4695C25.555 10.3733 25.555 10.3733 25.6433 10.2752C25.7049 10.2059 25.7665 10.1367 25.83 10.0653C25.9253 9.95899 25.9253 9.95899 26.0227 9.85053C26.1913 9.66259 26.3595 9.47418 26.5276 9.28567C26.6993 9.0932 26.8715 8.90117 27.0437 8.70911C27.3811 8.33252 27.718 7.95549 28.0547 7.57812ZM8.92969 16.7188C7.93041 17.9885 7.42801 19.4564 7.41578 21.131C7.45958 21.4538 7.55079 21.6228 7.73438 21.875C8.01922 22.0814 8.23949 22.1642 8.57813 22.1094C8.8162 21.959 9.03895 21.801 9.21094 21.5625C9.25969 21.3479 9.25969 21.3479 9.28126 21.1035C9.43897 19.839 9.7309 18.6953 10.6172 17.8125C10.8644 17.6051 11.1186 17.4298 11.3906 17.2656C11.4422 17.2343 11.4938 17.203 11.5469 17.1707C12.0089 16.9308 12.503 16.8724 13.0048 16.8067C13.3333 16.761 13.5824 16.7164 13.8516 16.4844C14.0386 16.2098 14.1204 15.9695 14.1328 15.625C14.0194 15.2191 13.8883 15.0012 13.5703 14.7656C12.1513 13.9773 9.85339 15.6552 8.92969 16.7188Z" fill="white"/>
    <path d="M32.0625 4.0625C32.2612 4.19496 32.3216 4.28999 32.3855 4.53552C32.435 4.85011 32.4486 5.00758 32.3069 5.29694C32.1007 5.61435 31.8474 5.88371 31.5967 6.15723C31.5488 6.21035 31.5009 6.26347 31.4516 6.31821C31.0068 6.80807 31.0068 6.80807 30.6343 6.82129C30.3866 6.81907 30.3121 6.80207 30.0937 6.65039C29.8668 6.38243 29.845 6.1733 29.8507 5.81421C29.9123 5.45155 30.1432 5.24783 30.375 5C30.4393 4.92588 30.5037 4.85176 30.57 4.77539C31.3595 3.8701 31.3595 3.8701 32.0625 4.0625Z" fill="white"/>
    <path d="M31.1924 8.81347C31.2955 8.92182 31.398 9.03099 31.5 9.14061C31.5736 9.21407 31.6473 9.2874 31.7211 9.36065C32.3886 10.0395 32.3886 10.0395 32.4492 10.459C32.4398 10.7967 32.35 11.0086 32.1328 11.25C31.8436 11.4127 31.6523 11.4342 31.3401 11.3278C31.0093 11.1577 30.7778 10.875 30.5288 10.5859C30.4819 10.5331 30.435 10.4802 30.3867 10.4257C29.8627 9.82995 29.8627 9.82995 29.8521 9.4287C29.8572 9.15959 29.8905 9.00151 30.041 8.78905C30.4215 8.40477 30.8022 8.44382 31.1924 8.81347Z" fill="white"/>
    <path d="M26.9297 4.0625C27.1942 4.26695 27.4103 4.51265 27.6328 4.77051C27.6931 4.83571 27.7534 4.90092 27.8155 4.96811C28.2948 5.50953 28.2948 5.50953 28.3455 5.89416C28.3324 6.27248 28.2325 6.43417 28.0063 6.7041C27.7614 6.84384 27.5456 6.86047 27.2812 6.79687C26.7259 6.48644 26.1453 5.8021 25.8047 5.23437C25.7663 4.96945 25.7663 4.71806 25.8047 4.45312C26.1307 3.98608 26.4289 3.88425 26.9297 4.0625Z" fill="white"/>
    <path d="M31.83 6.84764C31.9289 6.84635 32.0279 6.84422 32.1268 6.84123C32.2699 6.83694 32.4129 6.83524 32.556 6.8341C32.6417 6.83255 32.7273 6.831 32.8155 6.82941C33.1105 6.88754 33.2113 7.01215 33.3984 7.26562C33.4822 7.45183 33.4765 7.55228 33.4643 7.75878C33.4621 7.8181 33.4598 7.87742 33.4575 7.93853C33.3879 8.15806 33.2968 8.29682 33.13 8.43877C32.7759 8.61609 32.3681 8.56417 31.9878 8.55468C31.8987 8.55488 31.8097 8.55508 31.7179 8.55529C30.987 8.54671 30.987 8.54671 30.6562 8.28124C30.4916 8.04608 30.4866 7.79082 30.4925 7.49755C30.529 7.25443 30.6411 7.12103 30.7968 6.95312C31.0983 6.78562 31.4954 6.85084 31.83 6.84764Z" fill="white"/>
    <path d="M29.3203 2.81249C29.7126 3.0592 29.7126 3.0592 29.8125 3.28124C29.8306 3.61153 29.8316 3.94211 29.8333 4.27293C29.8345 4.43706 29.8376 4.60106 29.8407 4.76516C29.8414 4.86999 29.842 4.97482 29.8424 5.07964C29.8435 5.17479 29.8445 5.26994 29.8455 5.36798C29.8064 5.6725 29.7237 5.79896 29.5313 6.01562C29.3067 6.14038 29.0724 6.12292 28.8281 6.09374C28.6288 5.99743 28.5167 5.92827 28.3985 5.72536C28.2605 5.3319 28.3069 4.87954 28.3052 4.46288C28.3029 4.36389 28.3006 4.26489 28.2982 4.1629C28.2939 3.34935 28.2939 3.34935 28.5005 3.06091C28.7705 2.81508 28.9777 2.77517 29.3203 2.81249Z" fill="white"/>
    </svg>
    ]]
    
    local olho = [[
        <svg width="34" height="33" viewBox="0 0 34 33" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M22.1133 4.82731C22.2459 4.90691 22.3787 4.98612 22.5117 5.06472C22.6002 5.11748 22.6888 5.17024 22.7773 5.223C22.7773 5.27523 22.7773 5.32746 22.7773 5.38127C22.839 5.40412 22.9006 5.42697 22.9641 5.45051C23.1758 5.53954 23.1758 5.53954 23.375 5.69782C23.375 5.75005 23.375 5.80228 23.375 5.85609C23.4107 5.86201 23.4464 5.86792 23.4831 5.87402C23.6999 5.95829 23.8588 6.11457 24.0349 6.28145C24.0728 6.31694 24.1107 6.35242 24.1497 6.38899C24.2683 6.50076 24.3862 6.61353 24.5039 6.72659C24.5393 6.76031 24.5747 6.79402 24.6112 6.82876C25.5049 7.68426 26.3287 8.64981 27.0273 9.73379C27.0837 9.81856 27.1402 9.90326 27.1967 9.98789C27.4888 10.4284 27.7609 10.8722 27.9954 11.3604C28.097 11.5686 28.2069 11.7683 28.3181 11.9694C28.5406 12.3836 28.726 12.8124 28.9054 13.2551C28.9807 13.4379 29.0595 13.6188 29.1419 13.7973C29.1984 13.9208 29.1984 13.9208 29.2561 14.0467C29.2904 14.1194 29.3247 14.192 29.3601 14.2668C29.4382 14.5575 29.3867 14.6791 29.2851 14.9568C29.2684 15.0036 29.2517 15.0505 29.2344 15.0987C28.7976 16.2985 28.2383 17.4015 27.625 18.4833C27.5875 18.5498 27.55 18.6163 27.5114 18.6848C27.4588 18.7762 27.4588 18.7762 27.405 18.8694C27.3581 18.9511 27.3581 18.9511 27.3103 19.0344C27.2827 19.0729 27.255 19.1114 27.2265 19.1511C27.1827 19.1511 27.1389 19.1511 27.0937 19.1511C27.0718 19.2555 27.0499 19.36 27.0273 19.4676C26.9835 19.4676 26.9397 19.4676 26.8945 19.4676C26.8797 19.5104 26.8649 19.5533 26.8496 19.5974C26.7338 19.8435 26.5789 20.0357 26.4172 20.2392C26.3505 20.3241 26.2838 20.4091 26.2172 20.4942C26.1689 20.5559 26.1689 20.5559 26.1196 20.6188C26.0084 20.7635 25.9037 20.914 25.7988 21.0652C25.5652 21.3879 25.2927 21.6446 25.0118 21.9069C24.8325 22.0767 24.8325 22.0767 24.6702 22.2773C23.626 23.5177 22.0995 24.5081 20.7187 25.0863C20.6064 25.14 20.4944 25.1944 20.3825 25.2495C18.7774 26.011 17.0623 26.3556 15.3398 26.4316C15.233 26.4365 15.233 26.4365 15.124 26.4415C12.2127 26.507 9.18667 25.5807 6.73191 23.6965C6.55188 23.5584 6.37342 23.4234 6.18666 23.2986C6.13923 23.2618 6.09181 23.225 6.04295 23.187C6.04295 23.1348 6.04295 23.0826 6.04295 23.0287C5.99912 23.0124 5.95529 22.9961 5.91014 22.9793C5.63974 22.8316 5.39961 22.635 5.17967 22.3957C5.17967 22.3434 5.17967 22.2912 5.17967 22.2374C5.14269 22.2178 5.10571 22.1982 5.06761 22.178C4.88588 22.061 4.73631 21.926 4.58201 21.7626C4.58201 21.7103 4.58201 21.6581 4.58201 21.6043C4.52924 21.5801 4.52924 21.5801 4.4754 21.5554C4.24732 21.3985 4.08042 21.1848 3.8972 20.9613C3.85861 20.9146 3.82003 20.868 3.78027 20.8199C3.3181 20.2576 2.9092 19.6694 2.51797 19.0354C2.39664 18.8344 2.39664 18.8344 2.25779 18.6762C2.25779 18.5979 2.25779 18.5195 2.25779 18.4388C2.21397 18.4388 2.17014 18.4388 2.12498 18.4388C1.84406 18.0304 1.63888 17.5472 1.43187 17.0827C1.32708 16.8539 1.21412 16.6332 1.09983 16.4109C0.377664 14.9243 0.377664 14.9243 0.409832 14.3614C0.478744 14.1734 0.567401 14.0189 0.664044 13.8489C0.73097 13.6957 0.793936 13.5405 0.856923 13.3849C1.14484 12.675 1.45211 11.9873 1.82486 11.3351C1.88975 11.2214 1.95365 11.1068 2.01629 10.9913C2.47233 10.1524 2.9933 9.3321 3.58592 8.62587C3.65962 8.52405 3.73292 8.42179 3.80589 8.31922C4.36093 7.55667 4.36093 7.55667 4.72235 7.36401C4.85758 7.29265 4.85758 7.29265 4.90858 7.13041C4.98718 6.94842 5.05648 6.87154 5.19316 6.7504C5.2359 6.7122 5.27865 6.67401 5.3227 6.63467C5.3916 6.57489 5.3916 6.57489 5.4619 6.51391C5.53298 6.45139 5.53298 6.45139 5.60551 6.3876C6.0489 6.00151 6.50581 5.64629 6.97264 5.30213C7.05238 5.24062 7.05238 5.24062 7.13372 5.17786C8.23386 4.34912 9.45386 3.8535 10.6914 3.40285C10.7675 3.37485 10.7675 3.37485 10.8451 3.34628C11.1448 3.2386 11.4466 3.15605 11.7539 3.08631C11.8451 3.06505 11.8451 3.06505 11.9382 3.04337C15.3845 2.27198 19.0116 2.86629 22.1133 4.82731ZM10.0937 6.80573C10.0055 6.84444 10.0055 6.84444 9.91552 6.88394C8.66812 7.43803 7.55865 8.37063 6.52024 9.34305C6.47893 9.38121 6.43761 9.41938 6.39504 9.4587C6.14485 9.69583 5.93587 9.94529 5.73556 10.2424C5.64248 10.3697 5.54532 10.4676 5.43284 10.5697C4.59759 11.3929 4.0049 12.68 3.45311 13.7698C3.40727 13.8548 3.40727 13.8548 3.3605 13.9416C3.20087 14.2455 3.16299 14.4431 3.18748 14.7985C3.25744 15.0144 3.25744 15.0144 3.3618 15.2189C3.39801 15.2939 3.43422 15.3689 3.47152 15.4462C3.60598 15.7081 3.7454 15.9647 3.89175 16.2174C3.95709 16.333 4.01907 16.4514 4.07852 16.5714C4.40653 17.2132 4.81569 17.7897 5.24244 18.3405C5.36009 18.4935 5.47171 18.6496 5.58226 18.8098C6.02571 19.427 6.59724 19.9028 7.13364 20.3985C7.22714 20.486 7.31895 20.576 7.4105 20.6664C7.57501 20.8172 7.73925 20.9309 7.92308 21.0454C8.13837 21.1817 8.34686 21.3198 8.54979 21.4806C8.951 21.7862 9.39522 22.004 9.82811 22.2374C9.88546 22.2695 9.94281 22.3017 10.0019 22.3348C10.356 22.5307 10.7136 22.6687 11.0898 22.7913C11.1699 22.8176 11.2499 22.8438 11.3324 22.8708C14.71 23.9637 18.1584 23.4692 21.25 21.5252C21.4584 21.3794 21.6524 21.2196 21.8476 21.0503C21.9843 20.941 22.1213 20.8322 22.2585 20.7239C22.3225 20.6731 22.3864 20.6223 22.4523 20.5699C22.5828 20.4662 22.7145 20.3645 22.8471 20.2645C23.0479 20.0965 23.205 19.9152 23.375 19.705C23.5031 19.5641 23.6317 19.424 23.761 19.2846C23.8982 19.1349 24.0351 18.9848 24.1719 18.8345C24.2202 18.7814 24.2686 18.7282 24.3184 18.6734C24.5945 18.3578 24.8339 18.0167 25.0683 17.6573C25.1128 17.5894 25.1128 17.5894 25.1581 17.5201C25.3174 17.2928 25.3174 17.2928 25.3672 17.0144C25.411 17.0144 25.4548 17.0144 25.5 17.0144C25.589 16.8843 25.589 16.8843 25.6756 16.7133C25.7266 16.6169 25.7266 16.6169 25.7787 16.5185C25.8318 16.4163 25.8318 16.4163 25.886 16.312C25.9206 16.2469 25.9552 16.1819 25.9909 16.1148C26.4376 15.3421 26.4376 15.3421 26.6312 14.4653C26.4834 13.9907 26.2528 13.5664 26.0312 13.1367C25.9704 13.0185 25.9704 13.0185 25.9083 12.898C25.5581 12.2482 25.1509 11.6552 24.736 11.0634C24.6702 10.969 24.6053 10.8737 24.5413 10.7776C24.4653 10.6643 24.3853 10.5547 24.3047 10.446C24.2608 10.446 24.217 10.446 24.1719 10.446C24.1545 10.3988 24.1371 10.3516 24.1192 10.3029C24.0338 10.1182 23.9541 10.0219 23.8191 9.88711C23.7482 9.81596 23.7482 9.81596 23.6759 9.74337C23.6204 9.68798 23.5649 9.63258 23.5078 9.57551C23.4406 9.50568 23.3735 9.43571 23.3065 9.36562C22.916 8.95999 22.5263 8.59323 22.0816 8.27285C21.9289 8.16184 21.7855 8.04268 21.6401 7.91859C21.2285 7.58866 20.7708 7.35857 20.3203 7.11532C20.2049 7.0526 20.0902 6.98806 19.9756 6.9232C19.5877 6.70494 19.2058 6.5456 18.7929 6.41005C18.7076 6.37889 18.6222 6.34755 18.5369 6.31607C17.7461 6.03086 16.9569 5.88422 16.1367 5.77695C16.0577 5.76645 15.9787 5.75594 15.8973 5.74511C13.9149 5.5173 11.9303 5.92486 10.0937 6.80573Z" fill="white"/>
    <path d="M14.8501 7.95325C14.9251 7.95365 15.0001 7.95404 15.0774 7.95445C16.4329 7.98772 17.6577 8.60158 18.6519 9.7091C18.6984 9.76949 18.745 9.82988 18.793 9.8921C18.8505 9.96065 18.908 10.0292 18.9673 10.0998C19.0194 10.1619 19.0714 10.2239 19.125 10.2878C19.1647 10.3302 19.2045 10.3727 19.2454 10.4164C19.3242 10.5252 19.3242 10.5252 19.3242 10.7626C19.3681 10.7626 19.4119 10.7626 19.4571 10.7626C20.3 12.2026 20.5979 13.9735 20.3678 15.6997C20.0981 17.3241 19.4079 18.855 18.2822 19.8655C16.9384 20.9309 15.4791 21.5036 13.8603 21.1357C13.0604 20.9279 12.3559 20.5958 11.6875 20.0216C11.6457 19.988 11.6038 19.9545 11.5607 19.9199C11.4454 19.8262 11.3337 19.7265 11.2227 19.6259C11.2227 19.5737 11.2227 19.5215 11.2227 19.4676C11.1842 19.4482 11.1456 19.4287 11.1059 19.4086C10.2482 18.837 9.75014 17.3684 9.49612 16.3022C9.1207 14.5428 9.37447 12.7081 10.114 11.1425C10.4398 10.5011 10.7908 9.95683 11.2891 9.49642C11.3329 9.4551 11.3767 9.41379 11.4219 9.37122C11.5527 9.25094 11.6855 9.13538 11.8203 9.0216C11.8603 8.98742 11.9003 8.95325 11.9415 8.91804C12.7915 8.23636 13.838 7.94616 14.8501 7.95325ZM15.5391 11.7914C15.2367 12.2913 15.2083 12.8519 15.2735 13.4533C15.5058 14.1478 15.8985 14.5822 16.4688 14.8777C17.0067 14.9757 17.471 14.9303 17.9214 14.5525C18.3144 14.1359 18.5185 13.6656 18.5901 13.0449C18.5981 12.5525 18.4964 12.071 18.241 11.6776C17.8519 11.2355 17.4813 10.9979 16.9419 10.9753C16.3388 10.9947 15.9526 11.2771 15.5391 11.7914Z" fill="white"/>
    </svg>
    ]]
    
    local seringa = [[
        <svg width="32" height="34" viewBox="0 0 32 34" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_1_685)">
    <path d="M17.5 4.0508C17.8552 4.27479 18.152 4.59162 18.4413 4.90125C18.4827 4.94507 18.5242 4.98888 18.5668 5.03402C18.7044 5.1796 18.8414 5.32564 18.9785 5.47169C19.0775 5.57668 19.1765 5.68164 19.2755 5.78658C19.5435 6.07067 19.811 6.35519 20.0785 6.6398C20.3586 6.93775 20.639 7.23537 20.9194 7.53305C21.4199 8.06462 21.9201 8.59653 22.4202 9.12856C22.8737 9.6109 23.3274 10.0929 23.7814 10.5746C24.3091 11.1347 24.8367 11.6949 25.3639 12.2555C25.6428 12.5521 25.9218 12.8485 26.201 13.1447C26.4633 13.423 26.7252 13.7015 26.9868 13.9803C27.083 14.0827 27.1793 14.1849 27.2757 14.2871C27.4071 14.4263 27.538 14.5658 27.6688 14.7055C27.7073 14.7461 27.7457 14.7866 27.7853 14.8284C27.8203 14.8659 27.8553 14.9034 27.8914 14.9421C27.9216 14.9743 27.9519 15.0064 27.983 15.0396C28.1911 15.3042 28.2157 15.5297 28.1875 15.8711C28.1091 16.0586 28.0448 16.1675 27.8906 16.2903C27.6855 16.3569 27.5261 16.3594 27.3125 16.336C27.0389 16.1651 26.8225 15.9639 26.6001 15.7248C26.5551 15.6767 26.5551 15.6767 26.5092 15.6277C26.4147 15.5265 26.3206 15.4249 26.2266 15.3233C26.1621 15.2541 26.0975 15.1849 26.033 15.1157C25.8758 14.9473 25.719 14.7785 25.5625 14.6094C25.2121 14.9192 24.8888 15.25 24.5676 15.5935C24.5129 15.6516 24.4582 15.7098 24.4019 15.7698C24.2511 15.9303 24.1004 16.0909 23.9499 16.2516C23.7871 16.4253 23.6241 16.5988 23.4611 16.7723C23.179 17.0726 22.897 17.3731 22.6151 17.6736C22.1694 18.1488 21.7234 18.6235 21.2773 19.0983C21.1245 19.2609 20.9717 19.4234 20.819 19.586C20.7808 19.6266 20.7426 19.6673 20.7033 19.7091C20.2694 20.171 19.8355 20.6329 19.4016 21.0949C19.3422 21.1582 19.3422 21.1582 19.2815 21.2228C18.6386 21.9073 17.996 22.5921 17.3534 23.2769C16.6932 23.9806 16.0326 24.6838 15.3717 25.3868C14.9643 25.8201 14.5572 26.2538 14.1505 26.6878C13.8718 26.9851 13.5928 27.2821 13.3136 27.5788C13.1525 27.7499 12.9916 27.9212 12.8312 28.0929C12.6571 28.2791 12.4823 28.4646 12.3074 28.65C12.257 28.7043 12.2065 28.7585 12.1545 28.8144C11.78 29.2095 11.4297 29.5301 10.8812 29.5674C10.4985 29.5622 10.1433 29.456 9.77539 29.3521C9.70122 29.3318 9.62705 29.3115 9.55063 29.2905C9.31483 29.2258 9.07929 29.1601 8.84375 29.0943C8.60816 29.0292 8.37252 28.9643 8.13686 28.8994C7.99066 28.8591 7.8445 28.8186 7.6984 28.7779C7.63144 28.7593 7.56447 28.7407 7.49548 28.7215C7.4083 28.6972 7.4083 28.6972 7.31936 28.6724C7.25522 28.6555 7.19108 28.6385 7.125 28.6211C7.08233 28.6036 7.03966 28.5861 6.99569 28.5681C6.84238 28.5135 6.7245 28.4841 6.5625 28.4883C6.3463 28.6122 6.19212 28.7907 6.02443 28.9792C5.94871 29.0598 5.94871 29.0598 5.87146 29.142C5.70504 29.32 5.54117 29.5005 5.37719 29.681C5.26215 29.805 5.14695 29.9287 5.03159 30.0523C4.75923 30.3447 4.48861 30.6387 4.21863 30.9336C3.82182 31.3667 3.42249 31.7972 3.02308 32.2277C2.73658 32.5365 2.4505 32.8457 2.16565 33.1563C2.11333 33.2131 2.06101 33.2699 2.0071 33.3284C1.90898 33.4349 1.81111 33.5417 1.71351 33.6488C1.649 33.7186 1.649 33.7186 1.58318 33.7899C1.54577 33.8307 1.50837 33.8715 1.46982 33.9136C1.375 34 1.375 34 1.25 34C0.913955 31.6346 0.913955 31.6346 1.51212 30.7441C1.97115 30.139 2.52879 29.6269 3.08256 29.1227C3.46478 28.7718 3.83542 28.4072 4.20639 28.0431C4.33598 27.9181 4.46819 27.7971 4.60133 27.6764C5.00803 27.3235 5.00803 27.3235 5.21831 26.8365C5.18784 26.6413 5.13348 26.4796 5.0625 26.2969C5.03188 26.1738 5.00264 26.0504 4.97471 25.9266C4.94168 25.7977 4.90835 25.6688 4.87475 25.54C4.85704 25.471 4.83933 25.4021 4.82109 25.3311C4.76511 25.1134 4.70875 24.8958 4.65234 24.6782C4.59578 24.4592 4.53929 24.2402 4.48292 24.0211C4.44799 23.8855 4.41294 23.7498 4.37775 23.6143C4.36189 23.5528 4.34603 23.4914 4.32969 23.4281C4.31578 23.3744 4.30186 23.3207 4.28752 23.2654C4.15575 22.7175 4.11406 22.2273 4.375 21.7149C4.54271 21.4903 4.73205 21.2921 4.92429 21.0913C4.98111 21.0307 5.03793 20.97 5.09647 20.9075C5.25355 20.7399 5.41158 20.5733 5.56979 20.4069C5.74048 20.2269 5.91025 20.0461 6.08014 19.8653C6.37439 19.5525 6.66921 19.2403 6.96441 18.9285C7.39123 18.4777 7.81718 18.026 8.24293 17.5741C8.93374 16.8408 9.62524 16.1083 10.3172 15.3762C10.9892 14.6652 11.661 13.9539 12.3323 13.242C12.3737 13.1981 12.415 13.1542 12.4577 13.109C12.6654 12.8888 12.873 12.6686 13.0807 12.4484C14.8028 10.6221 16.526 8.79698 18.25 6.97268C18.14 6.72175 18.0039 6.56493 17.8164 6.37087C17.7864 6.33945 17.7563 6.30803 17.7254 6.27565C17.6297 6.17564 17.5337 6.07606 17.4375 5.97658C17.3108 5.84554 17.1846 5.71406 17.0586 5.5823C17.0024 5.52417 16.9463 5.46605 16.8884 5.40616C16.699 5.18712 16.6336 5.05061 16.5977 4.75637C16.6339 4.43693 16.7259 4.34206 16.9375 4.11721C17.1384 4.01046 17.2769 4.02404 17.5 4.0508ZM19.1568 7.9938C19.1179 8.03553 19.0789 8.07726 19.0388 8.12026C18.9967 8.1652 18.9546 8.21014 18.9113 8.25644C18.8671 8.30395 18.8229 8.35146 18.7773 8.40041C18.7329 8.44792 18.6885 8.49543 18.6427 8.54438C18.5325 8.66226 18.4224 8.78029 18.3125 8.89846C18.5542 9.20639 18.8055 9.49669 19.0752 9.77704C19.1475 9.853 19.2197 9.92896 19.292 10.0049C19.4043 10.1226 19.5168 10.2403 19.6294 10.3577C19.7392 10.4724 19.8486 10.5874 19.958 10.7026C20.0086 10.755 20.0086 10.755 20.0602 10.8085C20.3005 11.0621 20.4221 11.2269 20.4648 11.5838C20.4375 11.8203 20.4375 11.8203 20.2969 12.0113C20.1345 12.1446 20.0703 12.1888 19.875 12.2188C19.4383 12.1466 19.1602 11.914 18.8633 11.5835C18.824 11.5414 18.7847 11.4992 18.7442 11.4558C18.6202 11.3223 18.4976 11.1874 18.375 11.0525C18.2909 10.9617 18.2066 10.8709 18.1223 10.7803C17.5134 10.1222 17.5134 10.1222 17.4375 9.96096C17.1932 10.0662 17.0298 10.2443 16.8486 10.4408C16.8171 10.4746 16.7855 10.5083 16.753 10.543C16.6528 10.6503 16.5529 10.758 16.4531 10.8657C16.385 10.9388 16.3169 11.0117 16.2488 11.0847C16.0822 11.2631 15.916 11.442 15.75 11.6211C16.0701 12.0302 16.4178 12.3999 16.7769 12.7701C16.8199 12.8151 16.8629 12.8601 16.9072 12.9064C16.9461 12.9466 16.9849 12.9868 17.025 13.0281C17.1812 13.2161 17.2456 13.359 17.2656 13.6092C17.2495 13.8193 17.2235 13.9614 17.125 14.1446C17.0234 14.1985 17.0234 14.1985 16.875 14.211C16.7977 14.2219 16.7203 14.2329 16.6406 14.2442C16.4104 14.2406 16.3096 14.1758 16.1416 14.0115C16.0983 13.9693 16.055 13.9271 16.0104 13.8837C15.7848 13.6545 15.5631 13.4217 15.3437 13.1858C15.2983 13.1372 15.2529 13.0887 15.2061 13.0386C15.0956 12.9204 14.9852 12.8021 14.875 12.6836C14.6307 12.7888 14.4673 12.9669 14.2861 13.1635C14.2546 13.1972 14.223 13.2309 14.1905 13.2657C14.0903 13.3729 13.9904 13.4807 13.8906 13.5884C13.8225 13.6614 13.7544 13.7344 13.6863 13.8073C13.5197 13.9858 13.3535 14.1647 13.1875 14.3438C13.4342 14.6582 13.6917 14.9543 13.9661 15.2416C14.0028 15.2804 14.0396 15.3192 14.0775 15.3592C14.1934 15.4816 14.3096 15.6037 14.4258 15.7259C14.58 15.888 14.734 16.0503 14.8879 16.2127C14.9411 16.2684 14.9411 16.2684 14.9952 16.3251C15.2163 16.5585 15.305 16.6531 15.3359 16.9876C15.3317 17.2099 15.3112 17.2678 15.1914 17.4649C14.9739 17.6158 14.8453 17.6579 14.5886 17.6347C14.0362 17.4995 13.4873 16.6617 13.0937 16.2405C13.0178 16.1594 12.9417 16.0784 12.8657 15.9973C12.6811 15.8005 12.4968 15.6034 12.3125 15.4063C12.0682 15.5115 11.9048 15.6896 11.7236 15.8862C11.6763 15.9367 11.6763 15.9367 11.628 15.9883C11.5278 16.0956 11.4279 16.2033 11.3281 16.3111C11.26 16.3841 11.1919 16.457 11.1238 16.53C10.9572 16.7085 10.791 16.8873 10.625 17.0664C10.8087 17.2622 10.9933 17.4568 11.1802 17.6493C11.2686 17.7414 11.3569 17.8335 11.4453 17.9256C11.49 17.9714 11.5347 18.0172 11.5808 18.0645C11.8653 18.3625 12.1022 18.6224 12.1445 19.0628C12.1241 19.2669 12.096 19.4113 12 19.5899C11.8984 19.6438 11.8984 19.6438 11.75 19.6563C11.6727 19.6672 11.5953 19.6782 11.5156 19.6895C11.2854 19.6859 11.1846 19.6212 11.0166 19.4568C10.9733 19.4146 10.93 19.3725 10.8854 19.329C10.6598 19.0998 10.4381 18.867 10.2187 18.6311C10.1733 18.5825 10.1279 18.534 10.0811 18.4839C9.97055 18.3657 9.86021 18.2474 9.75 18.1289C9.50572 18.2341 9.34227 18.4122 9.16113 18.6088C9.1138 18.6594 9.1138 18.6594 9.06551 18.711C8.96525 18.8182 8.86543 18.926 8.76562 19.0337C8.69754 19.1067 8.62942 19.1797 8.56128 19.2526C8.39468 19.4311 8.22849 19.61 8.0625 19.7891C8.26243 20.0019 8.46313 20.2139 8.66448 20.4253C8.81411 20.5825 8.9634 20.74 9.11268 20.8976C9.19143 20.9806 9.27029 21.0635 9.34926 21.1462C9.46384 21.2664 9.57803 21.387 9.69214 21.5076C9.72742 21.5444 9.76271 21.5812 9.79906 21.6191C10.0585 21.8947 10.1744 22.0544 10.2148 22.4412C10.2079 22.6588 10.1839 22.7168 10.0664 22.9102C9.8489 23.0611 9.72034 23.1032 9.46364 23.08C8.91123 22.9448 8.36233 22.107 7.96875 21.6858C7.89275 21.6047 7.81674 21.5237 7.74072 21.4426C7.55614 21.2458 7.37177 21.0487 7.1875 20.8516C6.84061 21.0068 6.59232 21.3138 6.32774 21.5894C6.26294 21.6564 6.19752 21.7227 6.13151 21.7884C6.03572 21.8837 5.94194 21.9808 5.84839 22.0785C5.79204 22.1361 5.7357 22.1937 5.67766 22.253C5.54976 22.4666 5.54389 22.5695 5.589 22.8148C5.60088 22.8682 5.61276 22.9216 5.625 22.9766C5.63818 23.0422 5.65136 23.1079 5.66494 23.1755C5.76106 23.6408 5.86934 24.1031 5.97918 24.5649C6.03476 24.7988 6.08892 25.0328 6.13989 25.2678C6.18955 25.4967 6.24262 25.7243 6.29816 25.9517C6.32848 26.0795 6.35532 26.2083 6.38208 26.337C6.44192 26.5734 6.49799 26.7566 6.625 26.961C6.88438 27.1193 7.14529 27.1706 7.4375 27.2266C7.56251 27.2619 7.68725 27.2983 7.81164 27.336C7.93753 27.3713 8.06346 27.4064 8.18945 27.4414C8.25692 27.4602 8.32439 27.4789 8.39391 27.4983C8.53484 27.5374 8.67579 27.5765 8.81677 27.6155C9.03258 27.6752 9.24822 27.7356 9.46386 27.796C9.60155 27.8341 9.73925 27.8723 9.87695 27.9104C9.94114 27.9284 10.0053 27.9465 10.0715 27.9651C10.1314 27.9815 10.1913 27.9979 10.253 28.0148C10.3054 28.0294 10.3578 28.0439 10.4117 28.0589C10.5763 28.0927 10.7076 28.1065 10.875 28.0899C11.0078 27.998 11.0078 27.998 11.1272 27.8627C11.1997 27.7868 11.1997 27.7868 11.2736 27.7092C11.3259 27.6526 11.3783 27.5961 11.4322 27.5378C11.5164 27.4487 11.5164 27.4487 11.6024 27.3578C11.7585 27.1927 11.9135 27.0266 12.0684 26.8604C12.2356 26.6813 12.4037 26.5032 12.5716 26.325C12.8626 26.0161 13.1529 25.7065 13.4429 25.3966C13.8622 24.9484 14.2823 24.5012 14.7026 24.0541C15.3845 23.3289 16.0657 22.6029 16.7465 21.8764C17.4079 21.1707 18.0696 20.4653 18.7317 19.7603C18.7929 19.6952 18.7929 19.6952 18.8554 19.6287C19.0601 19.4108 19.2648 19.1929 19.4695 18.9749C21.1681 17.1667 22.8657 15.3572 24.5625 13.5469C24.3668 13.3013 24.172 13.0573 23.9577 12.8295C23.9163 12.7853 23.8749 12.7411 23.8322 12.6955C23.788 12.6487 23.7439 12.602 23.6984 12.5538C23.6509 12.5032 23.6034 12.4526 23.5545 12.4005C23.3987 12.2347 23.2427 12.0691 23.0867 11.9036C22.978 11.7881 22.8694 11.6727 22.7608 11.5572C22.5339 11.316 22.3069 11.075 22.0798 10.834C21.788 10.5243 21.4965 10.2144 21.2051 9.90432C20.9812 9.66626 20.7572 9.42835 20.5332 9.19049C20.4256 9.07618 20.318 8.96182 20.2105 8.84741C20.0609 8.68827 19.911 8.52934 19.7612 8.37047C19.7164 8.32276 19.6716 8.27506 19.6255 8.22591C19.5849 8.183 19.5444 8.14009 19.5026 8.09588C19.4672 8.05828 19.4318 8.02069 19.3953 7.98196C19.2772 7.86841 19.2751 7.87774 19.1568 7.9938Z" fill="white"/>
    <path d="M24.5625 -1.62574e-05C24.8193 0.167026 25.0325 0.34987 25.2451 0.575599C25.2737 0.605739 25.3023 0.635879 25.3317 0.666932C25.4264 0.76704 25.5207 0.867611 25.6149 0.968192C25.6831 1.04045 25.7513 1.11268 25.8195 1.18488C26.0041 1.38035 26.1882 1.57624 26.3723 1.77223C26.5651 1.97748 26.7583 2.1824 26.9514 2.38737C27.2755 2.73145 27.5993 3.07581 27.9229 3.42033C28.2971 3.81861 28.6717 4.21642 29.0466 4.61398C29.3687 4.95556 29.6905 5.29739 30.0121 5.63945C30.2041 5.84365 30.3961 6.04776 30.5884 6.25164C30.7691 6.4432 30.9494 6.63509 31.1296 6.82722C31.1957 6.89769 31.262 6.96804 31.3284 7.03827C31.4189 7.13411 31.509 7.2304 31.5991 7.32671C31.6497 7.38048 31.7002 7.43425 31.7523 7.48964C31.9701 7.75071 32.028 7.94852 32.0205 8.30284C31.9881 8.50949 31.8884 8.62288 31.75 8.76561C31.5219 8.8868 31.3098 8.89298 31.0625 8.83201C30.8254 8.66277 30.6353 8.45213 30.4375 8.23436C30.3782 8.17167 30.3187 8.10916 30.259 8.04681C30.109 7.88918 29.9603 7.73032 29.8125 7.5703C29.564 7.67659 29.3975 7.86059 29.2128 8.05956C29.1787 8.09585 29.1445 8.13214 29.1093 8.16953C28.9967 8.28922 28.8846 8.40938 28.7725 8.52955C28.6944 8.61277 28.6163 8.69595 28.5381 8.77911C28.3328 8.99782 28.1278 9.21691 27.9229 9.4361C27.7136 9.65979 27.504 9.8831 27.2944 10.1064C26.8834 10.5445 26.4728 10.9831 26.0625 11.4219C25.9927 11.3587 25.923 11.2956 25.8533 11.2323C25.8144 11.1972 25.7756 11.162 25.7356 11.1257C25.6003 11.0006 25.4733 10.8687 25.3477 10.7329C25.284 10.6643 25.284 10.6643 25.219 10.5944C25.188 10.5606 25.157 10.5269 25.125 10.4922C25.225 10.2282 25.3982 10.0512 25.5855 9.85502C25.6196 9.81871 25.6538 9.7824 25.689 9.74499C25.8016 9.62539 25.9147 9.50626 26.0278 9.38713C26.1062 9.30416 26.1844 9.22117 26.2627 9.13814C26.4685 8.91995 26.6748 8.70215 26.8811 8.48444C27.0916 8.26211 27.3018 8.0394 27.512 7.81673C27.9243 7.38005 28.337 6.94379 28.75 6.5078C28.453 6.12815 28.1346 5.77886 27.8052 5.43103C27.7516 5.3742 27.698 5.31738 27.6428 5.25883C27.473 5.07872 27.3029 4.89885 27.1328 4.71898C27.0171 4.59634 26.9014 4.47369 26.7856 4.35102C26.5031 4.05154 26.2204 3.75225 25.9375 3.45311C25.5139 3.82222 25.1323 4.2338 24.7463 4.64583C24.6741 4.72269 24.6019 4.79954 24.5296 4.87638C24.3407 5.07732 24.152 5.27846 23.9634 5.47964C23.7703 5.68543 23.5771 5.89103 23.3839 6.09665C23.0058 6.49914 22.6278 6.90184 22.25 7.30467C22.0753 7.2152 21.9475 7.13221 21.8115 6.98457C21.762 6.93129 21.762 6.93129 21.7114 6.87692C21.6777 6.84003 21.6441 6.80313 21.6094 6.76512C21.5747 6.72771 21.5401 6.6903 21.5044 6.65176C21.4193 6.5598 21.3346 6.46743 21.25 6.37498C21.5974 5.92494 21.9848 5.51944 22.3726 5.10937C22.4449 5.03263 22.5172 4.95588 22.5895 4.87911C22.7787 4.67842 22.968 4.47793 23.1573 4.27748C23.351 4.07238 23.5445 3.86708 23.738 3.6618C24.1169 3.26002 24.4959 2.85845 24.875 2.45701C24.7797 2.24413 24.6808 2.10284 24.5212 1.9377C24.4768 1.89122 24.4324 1.84473 24.3866 1.79684C24.3402 1.74899 24.2939 1.70114 24.2461 1.65184C24.1541 1.55636 24.0622 1.46073 23.9705 1.36494C23.9297 1.32282 23.8889 1.28069 23.8469 1.23729C23.6569 1.02474 23.6671 0.82978 23.6692 0.548614C23.696 0.328414 23.7881 0.215812 23.9375 0.06639C24.1354 -0.0387475 24.3484 -0.0427648 24.5625 -1.62574e-05Z" fill="white"/>
    </g>
    <defs>
    <clipPath id="clip0_1_685">
    <rect width="32" height="34" fill="white"/>
    </clipPath>
    </defs>
    </svg>
    ]]
    
    local settings = [[
        <svg width="34" height="29" viewBox="0 0 34 29" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M16.0657 1.78794C16.1395 1.78764 16.2133 1.78735 16.2893 1.78704C16.4446 1.78668 16.5999 1.78675 16.7551 1.78723C16.9906 1.78772 17.226 1.78608 17.4615 1.78429C17.6132 1.7842 17.765 1.78423 17.9167 1.7844C17.9861 1.78376 18.0554 1.78313 18.1268 1.78247C19.053 1.78982 19.7655 2.09212 20.4365 2.62317C21.0941 3.21581 21.2569 3.85579 21.2941 4.64193C21.3203 5.18539 21.3961 5.64039 21.7149 6.11719C21.7436 6.176 21.7436 6.176 21.773 6.236C21.8667 6.37124 21.9453 6.39655 22.1133 6.45703C22.2639 6.5296 22.4138 6.60301 22.5636 6.67673C22.9757 6.85434 23.4934 6.85678 23.9358 6.76214C24.1988 6.67583 24.4473 6.56627 24.6987 6.45836C24.7453 6.43839 24.7918 6.41842 24.8398 6.39784C24.9319 6.35801 25.0237 6.31769 25.1151 6.27682C25.8957 5.93318 26.7846 5.8923 27.6292 6.09595C28.0004 6.20855 28.3115 6.36401 28.6211 6.57031C28.7033 6.62233 28.7033 6.62233 28.7871 6.67541C29.6849 7.3323 30.7451 8.91032 30.8789 9.91211C30.9493 10.7445 30.7242 11.4724 30.1236 12.1388C29.8341 12.3915 29.5168 12.5819 29.1614 12.7623C28.4739 13.1124 28.0469 13.387 27.7578 14.0469C27.6638 14.6458 27.7412 15.1303 28.1563 15.6328C28.4397 15.9294 28.8671 16.1062 29.2516 16.2936C30.0586 16.6906 30.5206 17.2586 30.8125 18.0117C31.1001 19.1933 30.5009 20.0864 29.8247 21.0774C29.7866 21.1344 29.7485 21.1914 29.7093 21.2502C29.1624 22.0533 28.5584 22.6552 27.4922 22.9395C26.3742 23.1853 25.3944 22.8932 24.4232 22.4346C24.3773 22.4129 24.3313 22.3912 24.284 22.3688C24.2431 22.3492 24.2023 22.3296 24.1602 22.3094C23.747 22.1401 23.2234 22.1471 22.7885 22.2458C22.4767 22.3475 22.2332 22.4676 21.9805 22.6562C21.9367 22.6562 21.8928 22.6562 21.8477 22.6562C21.8285 22.6895 21.8093 22.7227 21.7896 22.7569C21.7445 22.8329 21.6979 22.9082 21.6485 22.9822C21.3659 23.4181 21.3177 23.8619 21.2975 24.3523C21.2591 25.2582 20.9724 25.9505 20.1834 26.5875C19.5043 27.0639 18.7994 27.2141 17.9344 27.2121C17.8236 27.2125 17.8236 27.2125 17.7107 27.213C17.5554 27.2133 17.4002 27.2132 17.2449 27.2128C17.0094 27.2123 16.774 27.2139 16.5385 27.2157C16.3868 27.2158 16.235 27.2158 16.0833 27.2156C16.014 27.2162 15.9446 27.2169 15.8732 27.2175C14.947 27.2102 14.2346 26.9079 13.5635 26.3768C12.9059 25.7842 12.7431 25.1442 12.7059 24.3581C12.6797 23.8146 12.6039 23.3596 12.2852 22.8828C12.266 22.8436 12.2468 22.8044 12.2271 22.764C12.1333 22.6288 12.0547 22.6034 11.8867 22.543C11.7362 22.4704 11.5862 22.397 11.4364 22.3233C11.0243 22.1457 10.5066 22.1432 10.0642 22.2379C9.80121 22.3242 9.55273 22.4337 9.3013 22.5416C9.25475 22.5616 9.20821 22.5816 9.16025 22.6022C9.06816 22.642 8.97636 22.6823 8.8849 22.7232C8.1117 23.0636 7.22767 23.1058 6.38747 22.9147C5.207 22.5511 4.66745 21.7925 4.07155 20.8968C4.02922 20.8342 3.98689 20.7715 3.94328 20.7069C3.33793 19.8048 2.92256 19.0679 3.19582 18.0046C3.48623 17.1243 4.09843 16.5953 5.00202 16.1461C5.64139 15.8277 5.98275 15.5491 6.2422 14.9531C6.33625 14.3543 6.259 13.8695 5.84377 13.3672C5.56652 13.0784 5.17056 12.9244 4.79461 12.7455C3.97389 12.35 3.4629 11.7599 3.18752 10.9883C2.9073 9.80279 3.49619 8.91798 4.17531 7.92261C4.2134 7.86558 4.25149 7.80856 4.29074 7.74981C4.86484 6.90678 5.50537 6.30166 6.63276 6.0305C7.71062 5.82677 8.64912 6.12741 9.57682 6.56543C9.62277 6.58712 9.66873 6.60881 9.71608 6.63115C9.75691 6.65077 9.79774 6.67039 9.83981 6.6906C10.253 6.85989 10.7766 6.85293 11.2115 6.75417C11.5233 6.6525 11.7668 6.53239 12.0195 6.34375C12.0634 6.34375 12.1072 6.34375 12.1524 6.34375C12.1715 6.31053 12.1907 6.27731 12.2105 6.24308C12.2555 6.16713 12.3021 6.09179 12.3516 6.01784C12.6342 5.58193 12.6823 5.13809 12.7025 4.64768C12.7409 3.74182 13.0277 3.04946 13.8167 2.41253C14.4958 1.93607 15.2006 1.78587 16.0657 1.78794ZM13.1485 11.3848C12.0739 12.3386 11.7161 13.5458 11.736 14.8341C11.7697 15.7582 12.2431 16.6874 12.9492 17.3887C12.9822 17.4248 13.0151 17.461 13.0491 17.4982C13.9243 18.4209 15.2699 18.8932 16.6223 19.0206C18.0618 19.0917 19.4643 18.67 20.5479 17.8648C21.5416 17.0883 22.2038 16.0165 22.2666 14.8617C22.3077 13.6584 21.9885 12.5427 21.0508 11.6113C21.0178 11.5752 20.9849 11.539 20.9509 11.5018C20.0758 10.5791 18.7302 10.1068 17.3777 9.97937C15.7596 9.89946 14.2965 10.4375 13.1485 11.3848Z" fill="white"/>
    </svg>
    ]]
    
    local user = [[
        <svg width="503" height="522" viewBox="0 0 503 522" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_177_410)">
        <path d="M251.193 0.00413894C252.143 0.00599506 253.092 0.00785118 254.07 0.00976355C268.133 0.0560217 281.817 0.574207 295.654 3.37716C296.975 3.62303 296.975 3.62303 298.322 3.87387C357.008 14.8942 413.441 49.5743 449.704 99.0947C450.113 99.6449 450.522 100.195 450.943 100.762C458.482 110.939 465.098 121.59 471.291 132.698C471.678 133.387 472.064 134.077 472.463 134.787C485.398 158.125 493.841 184.167 499.071 210.468C499.216 211.192 499.361 211.916 499.51 212.661C502.439 228.589 503.057 244.511 502.996 260.682C502.993 262.159 502.993 262.159 502.991 263.667C502.946 278.262 502.447 292.462 499.746 306.822C499.588 307.736 499.43 308.649 499.267 309.59C488.648 370.493 455.23 429.058 407.512 466.691C406.982 467.115 406.452 467.54 405.906 467.977C396.099 475.8 385.835 482.666 375.132 489.093C374.468 489.494 373.803 489.896 373.119 490.31C350.631 503.733 325.536 512.495 300.192 517.923C299.495 518.073 298.798 518.223 298.079 518.378C282.731 521.418 267.389 522.059 251.807 521.996C250.857 521.994 249.908 521.992 248.93 521.99C234.867 521.944 221.183 521.426 207.346 518.623C206.465 518.459 205.585 518.295 204.678 518.126C145.992 507.106 89.5589 472.426 53.2959 422.905C52.887 422.355 52.4782 421.805 52.0569 421.238C44.518 411.06 37.9023 400.409 31.7093 389.302C31.3224 388.613 30.9355 387.923 30.5369 387.213C17.6023 363.875 9.15856 337.833 3.92882 311.532C3.78416 310.808 3.63949 310.084 3.49044 309.339C0.561179 293.41 -0.0571506 277.489 0.00398829 261.318C0.00577685 260.333 0.00756541 259.348 0.00940817 258.333C0.0539826 243.738 0.553307 229.538 3.25424 215.178C3.49116 213.808 3.49116 213.808 3.73287 212.41C14.3521 151.507 47.7699 92.9419 95.4878 55.309C96.018 54.8847 96.5481 54.4604 97.0943 54.0233C106.901 46.1996 117.165 39.334 127.868 32.9071C128.532 32.5056 129.197 32.1041 129.881 31.6904C152.369 18.2672 177.464 9.50451 202.808 4.07723C203.505 3.9271 204.202 3.77697 204.921 3.62229C220.269 0.582377 235.611 -0.0593094 251.193 0.00413894Z" fill="#191919"/>
        <path d="M323.026 48.8211C343.919 66.844 358.005 92.6401 360.214 120.384C361.94 153.062 352.472 181.857 330.593 206.313C324.153 213.061 317.148 218.504 309.214 223.384C308.647 223.736 308.08 224.087 307.496 224.45C283.873 238.824 254.706 242.893 227.82 236.845C199.068 229.721 174.877 212.743 159.214 187.384C153.042 176.945 149.065 166.14 146.214 154.384C145.967 153.405 145.721 152.427 145.468 151.419C139.748 123.927 146.719 94.9449 161.214 71.3836C163.675 67.8356 166.341 64.6028 169.214 61.3836C169.876 60.5793 170.539 59.7749 171.221 58.9461C187.033 40.2751 211.338 26.429 235.805 23.5828C268.84 20.8506 297.426 27.4713 323.026 48.8211ZM193.526 81.6336C179.117 100.066 173.699 120.495 176.486 143.647C179.914 164.453 192.173 182.149 209.038 194.442C226.528 206.051 247.212 209.919 267.839 206.259C280.165 203.469 290.47 198.381 300.214 190.384C301.09 189.671 301.967 188.958 302.87 188.223C317.231 175.961 326.752 157.758 328.437 138.884C329.635 118.717 325.45 99.429 312.206 83.5946C311.548 82.865 310.891 82.1353 310.214 81.3836C309.412 80.489 308.61 79.5944 307.784 78.6727C293.93 64.0159 276.22 55.982 256.214 54.3836C255.146 54.2947 255.146 54.2947 254.057 54.2039C231.199 53.3322 208.202 64.3791 193.526 81.6336Z" fill="white"/>
        <path d="M362.434 301.714C363.445 302.6 363.445 302.6 364.476 303.503C383.965 321.595 397.001 348.53 397.97 374.89C398.003 377.577 398.005 380.262 397.994 382.95C397.994 383.961 397.995 384.973 397.995 386.015C397.994 389.329 397.986 392.643 397.978 395.957C397.976 398.266 397.975 400.575 397.974 402.885C397.97 408.941 397.96 414.997 397.949 421.053C397.939 427.242 397.934 433.431 397.929 439.62C397.918 451.746 397.9 463.873 397.879 476C387.185 476 376.491 476 365.472 476C365.463 472.91 365.453 469.821 365.444 466.638C365.409 456.382 365.353 446.126 365.286 435.871C365.246 429.658 365.214 423.446 365.198 417.233C365.183 411.227 365.147 405.222 365.099 399.217C365.084 396.936 365.076 394.655 365.076 392.374C365.064 376.586 364.257 362.372 356.548 348.149C356.025 347.154 356.025 347.154 355.492 346.14C352.617 340.815 349.251 336.135 345.218 331.591C344.744 330.996 344.27 330.4 343.782 329.786C326.941 309.003 295.609 296.983 269.3 293.992C252.972 292.833 236.622 293.003 220.654 296.734C219.601 296.975 219.601 296.975 218.526 297.22C200.582 301.47 184.467 309.412 170.018 320.636C169.266 321.193 168.514 321.751 167.739 322.325C158.444 329.66 151.334 339.582 146.219 350.078C145.901 350.723 145.583 351.367 145.256 352.031C138.808 366.103 139.16 380.447 139.118 395.568C139.101 397.894 139.082 400.22 139.063 402.546C139.015 408.628 138.985 414.71 138.958 420.793C138.928 427.015 138.881 433.238 138.835 439.46C138.748 451.64 138.681 463.82 138.623 476C127.929 476 117.235 476 106.216 476C106.171 462.736 106.133 449.472 106.111 436.209C106.101 430.048 106.087 423.888 106.064 417.728C106.041 411.775 106.029 405.821 106.024 399.867C106.021 397.605 106.013 395.342 106.002 393.08C105.839 358.172 114.433 329.326 139.537 303.772C196.304 247.667 297.81 246.528 362.434 301.714Z" fill="white"/>
        <path d="M258.214 344.384C259.153 344.616 260.092 344.848 261.059 345.087C264.495 345.971 267.908 346.916 271.323 347.876C272.567 348.222 273.812 348.569 275.094 348.926C277.714 349.657 280.333 350.392 282.95 351.13C286.299 352.074 289.651 353.004 293.004 353.931C296.217 354.821 299.426 355.724 302.635 356.626C303.837 356.957 305.038 357.288 306.275 357.63C307.39 357.947 308.505 358.264 309.654 358.59C310.634 358.865 311.613 359.139 312.622 359.422C315.306 360.418 317.113 361.447 319.214 363.384C326.814 390.201 322.995 430.129 310.651 455.071C297.941 476.46 277.121 490.868 253.776 498.509C235.734 497.876 216.737 482.569 204.776 469.884C187.085 449.409 182.798 423.761 182.953 397.474C182.964 395.318 182.953 393.163 182.94 391.007C182.931 383.974 183.184 377.004 183.979 370.012C184.116 368.808 184.253 367.603 184.394 366.362C185.378 362.786 186.123 362.294 189.214 360.384C191.957 359.371 191.957 359.371 195.14 358.467C196.336 358.123 197.531 357.78 198.762 357.426C200.063 357.062 201.365 356.699 202.667 356.337C204.01 355.958 205.352 355.579 206.695 355.199C209.508 354.406 212.322 353.621 215.138 352.839C218.731 351.841 222.318 350.821 225.904 349.796C228.675 349.006 231.451 348.231 234.227 347.459C235.551 347.089 236.873 346.714 238.193 346.334C251.376 342.556 251.376 342.556 258.214 344.384ZM252.214 376.384C252.214 390.904 252.214 405.424 252.214 420.384C264.094 420.384 275.974 420.384 288.214 420.384C288.848 415.305 289.336 410.929 289.311 405.915C289.308 404.768 289.305 403.62 289.302 402.438C289.293 401.265 289.285 400.092 289.276 398.884C289.272 397.68 289.267 396.476 289.262 395.235C289.251 392.285 289.234 389.334 289.214 386.384C284.267 384.956 279.319 383.532 274.37 382.111C272.686 381.627 271.002 381.142 269.318 380.656C266.901 379.959 264.483 379.264 262.065 378.571C261.31 378.352 260.555 378.134 259.777 377.908C256.055 376.782 256.055 376.782 252.214 376.384ZM217.214 421.384C218.527 431.893 221.254 439.409 228.214 447.384C228.85 448.114 229.487 448.845 230.143 449.598C236.017 455.891 242.62 460.385 250.214 464.384C250.874 464.384 251.534 464.384 252.214 464.384C252.214 450.194 252.214 436.004 252.214 421.384C240.664 421.384 229.114 421.384 217.214 421.384Z" fill="white"/>
        </g>
        <defs>
        <clipPath id="clip0_177_410">
        <rect width="503" height="522" fill="white"/>
        </clipPath>
        </defs>
        </svg>        
    ]]
    
    local computador = [[
    <svg width="512" height="512" viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_196_6)">
    <path d="M45.8835 41.4988C47.7767 41.4949 49.67 41.4892 51.5632 41.482C56.7366 41.4673 61.9096 41.4774 67.083 41.4917C72.6733 41.5029 78.2636 41.4909 83.854 41.4819C94.7931 41.468 105.732 41.4755 116.671 41.4906C129.414 41.5075 142.157 41.5042 154.9 41.5005C178.323 41.4944 201.746 41.5102 225.17 41.5357C246.54 41.5588 267.911 41.5642 289.281 41.5539C294.756 41.5513 300.23 41.5488 305.705 41.5463C306.379 41.546 307.053 41.5457 307.747 41.5454C325.622 41.5378 343.496 41.5443 361.371 41.555C363.933 41.5566 366.496 41.5581 369.058 41.5596C370.949 41.5607 370.949 41.5607 372.878 41.5619C381.759 41.5666 390.64 41.5648 399.52 41.5605C410.342 41.5556 421.163 41.5616 431.984 41.5814C437.505 41.5913 443.025 41.5964 448.545 41.5885C453.6 41.5815 458.654 41.5883 463.709 41.6061C465.536 41.6102 467.363 41.6092 469.19 41.6026C482.105 41.5601 493.864 42.0266 504 51C508.814 56.8454 512.242 62.7737 512.263 70.4699C512.271 71.5628 512.278 72.6557 512.286 73.7816C512.284 74.9767 512.283 76.1719 512.281 77.4032C512.29 79.3141 512.29 79.3141 512.299 81.2637C512.315 84.7979 512.319 88.3321 512.32 91.8664C512.324 95.6791 512.339 99.4918 512.352 103.305C512.38 111.642 512.392 119.979 512.4 128.316C512.406 133.524 512.414 138.732 512.423 143.94C512.448 158.366 512.468 172.793 512.475 187.219C512.476 188.142 512.476 189.066 512.476 190.017C512.477 190.942 512.477 191.867 512.478 192.821C512.479 194.696 512.48 196.571 512.48 198.446C512.481 199.376 512.481 200.306 512.482 201.264C512.49 216.326 512.525 231.388 512.571 246.45C512.619 261.922 512.644 277.395 512.646 292.867C512.648 301.551 512.659 310.234 512.696 318.918C512.726 326.314 512.737 333.71 512.72 341.107C512.712 344.877 512.714 348.648 512.742 352.418C512.772 356.515 512.756 360.611 512.735 364.708C512.751 365.887 512.767 367.067 512.784 368.282C512.659 378.796 509.213 387.142 501.688 394.562C493.029 402.231 482.077 401.417 471.281 401.341C469.595 401.34 467.909 401.34 466.223 401.342C461.668 401.343 457.113 401.325 452.558 401.304C447.789 401.285 443.02 401.284 438.252 401.28C429.232 401.271 420.212 401.246 411.191 401.216C400.918 401.182 390.645 401.166 380.372 401.151C359.248 401.12 338.124 401.065 317 401C317 414.53 317 428.06 317 442C328.623 441.881 328.623 441.881 340.245 441.73C341.709 441.721 343.173 441.713 344.637 441.707C345.764 441.684 345.764 441.684 346.915 441.661C352.915 441.658 356.015 443.07 360.25 447.187C362.452 450.727 363.196 453.884 363 458C361.431 463.23 359.535 465.977 355 469C351.953 470.524 348.778 470.148 345.435 470.147C344.645 470.151 343.856 470.155 343.042 470.158C340.381 470.169 337.72 470.173 335.06 470.177C333.158 470.183 331.256 470.19 329.354 470.197C324.176 470.214 318.998 470.225 313.821 470.233C310.587 470.238 307.354 470.244 304.121 470.251C294.009 470.27 283.897 470.284 273.786 470.292C262.105 470.302 250.424 470.328 238.743 470.369C229.721 470.399 220.698 470.414 211.676 470.417C206.284 470.419 200.893 470.428 195.501 470.453C190.429 470.477 185.357 470.481 180.284 470.471C178.422 470.47 176.561 470.477 174.699 470.49C172.157 470.508 169.615 470.501 167.073 470.488C166.337 470.499 165.601 470.51 164.843 470.521C158.879 470.446 155.458 468.288 151.188 464.312C148.965 459.984 148.282 455.455 149.66 450.742C151.689 446.291 153.502 444.161 158 442C160.865 441.748 163.506 441.649 166.363 441.707C167.417 441.712 167.417 441.712 168.493 441.716C171.099 441.732 173.706 441.774 176.312 441.812C182.149 441.874 187.986 441.936 194 442C194 428.47 194 414.94 194 401C188.908 401.021 183.816 401.042 178.569 401.063C161.737 401.13 144.906 401.174 128.074 401.207C117.87 401.228 107.666 401.256 97.4617 401.302C88.5646 401.342 79.6677 401.367 70.7706 401.376C66.0624 401.382 61.3544 401.394 56.6463 401.423C52.2083 401.45 47.7706 401.458 43.3324 401.452C41.71 401.454 40.0875 401.461 38.4651 401.477C27.3196 401.578 17.1946 401.143 8.5625 393.25C3.19277 387.363 -0.115365 380.8 -0.139805 372.776C-0.145496 371.687 -0.151187 370.598 -0.157051 369.477C-0.158231 368.276 -0.15941 367.075 -0.160625 365.837C-0.165713 364.565 -0.170802 363.293 -0.176044 361.982C-0.18996 358.443 -0.197537 354.905 -0.204018 351.366C-0.210387 348.332 -0.220455 345.298 -0.230576 342.265C-0.263911 332.268 -0.285426 322.271 -0.303776 312.274C-0.308571 309.67 -0.313554 307.066 -0.318581 304.462C-0.349557 288.29 -0.376242 272.117 -0.393002 255.945C-0.396951 252.198 -0.400953 248.452 -0.405025 244.705C-0.406034 243.774 -0.407042 242.842 -0.408081 241.883C-0.425077 226.808 -0.466172 211.733 -0.517048 196.658C-0.568865 181.177 -0.597949 165.696 -0.605198 150.214C-0.609856 141.524 -0.624555 132.834 -0.66494 124.143C-0.699304 116.74 -0.713154 109.336 -0.700516 101.932C-0.694703 98.1575 -0.698453 94.3833 -0.728687 90.6086C-0.761268 86.5071 -0.746849 82.4071 -0.728252 78.3055C-0.745047 77.1247 -0.76184 75.9438 -0.779144 74.7272C-0.667386 64.8319 2.43098 56.0887 9.5625 49C20.0506 40.9005 33.3297 41.4269 45.8835 41.4988ZM28 71C27.9794 120.479 27.9588 169.959 27.9375 220.937C27.9284 236.59 27.9193 252.243 27.9099 268.371C27.9066 282.339 27.9066 282.339 27.9046 296.307C27.9036 302.554 27.8999 308.801 27.8944 315.047C27.8881 322.242 27.8852 329.437 27.8866 336.632C27.8872 340.317 27.8862 344.001 27.8808 347.686C27.8751 351.621 27.877 355.556 27.8797 359.491C27.8768 360.655 27.8739 361.819 27.8709 363.018C27.8729 364.065 27.8749 365.113 27.877 366.192C27.8766 367.103 27.8762 368.014 27.8758 368.952C27.7725 370.993 27.7725 370.993 29 372C31.4129 372.1 33.7971 372.134 36.2105 372.126C37.3616 372.128 37.3616 372.128 38.5359 372.13C41.1403 372.134 43.7447 372.13 46.3491 372.127C48.2219 372.128 50.0947 372.13 51.9676 372.132C57.1397 372.136 62.3118 372.134 67.4839 372.131C73.0518 372.128 78.6197 372.132 84.1876 372.135C95.1052 372.139 106.023 372.138 116.941 372.135C125.809 372.133 134.678 372.133 143.547 372.134C144.806 372.134 146.066 372.134 147.364 372.134C149.922 372.135 152.48 372.135 155.039 372.135C178.374 372.138 201.71 372.135 225.046 372.13C246.367 372.125 267.688 372.126 289.01 372.13C312.942 372.136 336.874 372.138 360.806 372.135C363.355 372.134 365.904 372.134 368.453 372.134C369.708 372.134 370.962 372.133 372.255 372.133C381.119 372.132 389.982 372.134 398.846 372.136C409.64 372.139 420.433 372.138 431.227 372.133C436.74 372.13 442.253 372.129 447.766 372.133C452.804 372.136 457.842 372.134 462.88 372.129C464.711 372.128 466.542 372.128 468.373 372.131C470.845 372.134 473.317 372.131 475.789 372.126C476.515 372.128 477.24 372.131 477.988 372.133C481.276 372.404 481.276 372.404 484 371C484.097 369.4 484.124 367.795 484.123 366.192C484.125 365.144 484.127 364.097 484.129 363.018C484.126 361.854 484.123 360.69 484.12 359.491C484.121 358.268 484.122 357.045 484.123 355.785C484.124 352.368 484.121 348.951 484.116 345.534C484.112 341.801 484.113 338.069 484.114 334.336C484.114 327.081 484.11 319.826 484.103 312.57C484.096 304.183 484.095 295.796 484.095 287.409C484.089 265.252 484.075 243.095 484.062 220.937C484.042 171.458 484.021 121.979 484 71C333.52 71 183.04 71 28 71Z" fill="white"/>
    </g>
    <defs>
    <clipPath id="clip0_196_6">
    <rect width="512" height="512" fill="white"/>
    </clipPath>
    </defs>
    </svg>

    ]]
    
    local fogo = [[
    <svg width="296" height="385" viewBox="0 0 296 385" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M189 0C188.608 1.13437 188.216 2.26875 187.812 3.4375C187.202 5.28957 186.599 7.14415 186 9C185.802 9.6115 185.604 10.223 185.399 10.853C175.987 40.2288 176.979 69.278 190.312 97.25C197.852 111.725 208.195 123.056 221 133C221.69 133.539 222.38 134.077 223.091 134.632C225.414 136.444 227.738 138.254 230.062 140.062C230.85 140.675 231.637 141.288 232.448 141.919C235.57 144.346 238.693 146.769 241.852 149.148C247.257 153.289 252.105 157.903 256.938 162.688C257.589 163.33 258.241 163.973 258.913 164.635C262.154 167.898 264.79 170.927 267 175C267.858 176.138 268.733 177.264 269.625 178.375C290.034 205.469 298.44 238.641 294.28 272.245C289.234 306.406 270.647 337.369 243 358C238.776 360.88 234.456 363.494 230 366C228.946 366.596 227.891 367.191 226.805 367.805C203.045 380.443 177.784 384.331 151.188 384.438C150.376 384.444 149.565 384.45 148.73 384.457C107.929 384.656 71.795 369.796 42.75 341.125C32.0582 330.278 23.906 318.561 17 305C16.6843 304.384 16.3687 303.767 16.0435 303.132C-2.14221 266.799 -4.1423 223.181 8.51514 184.805C17.2684 159.714 30.9454 137.649 51 120C51.66 120 52.32 120 53 120C52.8299 120.548 52.6597 121.096 52.4844 121.66C51.6363 124.434 50.8165 127.216 50 130C49.6636 131.124 49.3271 132.248 48.9805 133.406C40.9767 161.464 43.0603 190.336 56.7656 216.352C58.4405 219.286 60.1806 222.153 62 225C62.455 225.723 62.9101 226.446 63.3789 227.191C65.7959 230.821 67.91 233.383 72 235C76.6421 235.589 79.5966 235.735 83.4375 232.938C86.5964 229.316 86.8299 227.777 87 223C86.2122 219.526 85.0154 216.225 83.8125 212.875C78.9165 198.411 75.4506 183.322 75 168C74.9693 167.041 74.9693 167.041 74.938 166.063C73.6298 119.164 89.9113 74.6761 121.903 40.2402C137.17 24.1357 165.281 0 189 0ZM158 172C151.002 192.62 154.321 211.176 159 232C162.977 249.794 161.812 265.359 151.973 281.215C143.433 293.272 131.571 299.86 118 305C125.086 314.812 139.356 321.438 151 324C168.59 325.731 183.478 321.894 197.586 311.004C208.881 301.49 217.428 286.887 219 272C220.13 251.781 215.214 237.142 201.719 221.926C199.02 219.022 196.278 216.393 193.23 213.867C179.163 202.091 169.413 189.871 160.297 174.043C159.869 173.369 159.441 172.695 159 172C158.67 172 158.34 172 158 172Z" fill="white"/>
    </svg>

    ]]
    
     local background1
     local x,y = guiGetScreenSize()
     background1 = svgCreate(500,500, background)
    
     local background2
     local x,y = guiGetScreenSize()
     background2 = svgCreate(500,500, selfPlayer)
     
     local background3
     local x,y = guiGetScreenSize()
     background3 = svgCreate(500,500, foguete)
    
     local background4
     local x,y = guiGetScreenSize()
     background4 = svgCreate(500,500, carro)
    
     local background5
     local x,y = guiGetScreenSize()
     background5 = svgCreate(500,500, players)
    
     local background6
     local x,y = guiGetScreenSize()
     background6 = svgCreate(500,500, bomba)
     
     local background7
     local x,y = guiGetScreenSize()
     background7 = svgCreate(500,500, olho)
    
     local background8
     local x,y = guiGetScreenSize()
     background8 = svgCreate(500,500, seringa)
    
     local background9
     local x,y = guiGetScreenSize()
     background9 = svgCreate(500,500, settings)
    
     local background10
     local x,y = guiGetScreenSize()
     background10 = svgCreate(500,500, user)
     
     local background11
     local x,y = guiGetScreenSize()
     background11 = svgCreate(500,500, computador)
    
     local background12
     local x,y = guiGetScreenSize()
     background12 = svgCreate(500,500, fogo)
    
    local SharkMenu = false
    local toggleKey = "delete"
    local selectedTab = 1
    local IsTab1Visible = 1
    local IsTab1Visible2 = 1
    local x,y = guiGetScreenSize() 
    
    local tabAreas = {
        {x = 742, y = 227, width = 68, height = 47},  -- Área da primeira aba
        {x = 742, y = 284, width = 68, height = 47},  -- Área da segunda aba
        {x = 742, y = 341, width = 68, height = 47},  -- Área da terça aba
        {x = 742, y = 398, width = 68, height = 47},  -- Área da quarta aba
        {x = 742, y = 455, width = 68, height = 47},  -- Área da quinta aba
        {x = 742, y = 512, width = 68, height = 47},  -- Área da sexta aba
        {x = 742, y = 569, width = 68, height = 47},  -- Área da setima aba
        {x = 742, y = 626, width = 68, height = 47},  -- Área da oitava aba
    }
    
    local switches = {
        { id = 1, x = 1365, y = 234, width = 50, height = 20, selectedTab = 1, state = false },
        { id = 2, x = 1365, y = 291, width = 50, height = 20, selectedTab = 1, state = false },
        { id = 3, x = 1365, y = 348, width = 50, height = 20, selectedTab = 1, state = false },
        { id = 4, x = 1365, y = 408, width = 50, height = 20, selectedTab = 1, state = false },
        { id = 5, x = 1365, y = 468, width = 50, height = 20, selectedTab = 1, state = false },
    }
    
    -- Função para desenhar um retângulo com cantos arredondados
    function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI)
        dxDrawRectangle(x, y, width, height, color, postGUI)  -- Desenha o retângulo principal
    end
    
    -- Função para desenhar os switches
    function drawSwitch(x, y, width, height, state)
        -- Desenha a borda do switch
        dxDrawRoundedRectangle(x - 1, y - 1, width + 2, height + 2, 9, tocolor(44, 44, 44, 255), false)
    
        -- Desenha o fundo do switch
        dxDrawRoundedRectangle(x, y, width, height, 9, tocolor(16, 16, 16, 255), false)
    
        -- Calcula a posição x da bolinha (handle) com base no estado do switch
        local handleX
        if state then
            handleX = x + width - 19 -- Posição para ligado
        else
            handleX = x + 4 -- Posição para desligado
        end
    
        -- Determina a cor da bolinha baseada no estado do switch
        local handleColor
        if state then
            handleColor = tocolor(0, 149, 249, 255) -- Cor azul quando ligado
        else
            handleColor = tocolor(169, 169, 169, 255) -- Cor cinza quando desligado
        end
    
        dxDrawRoundedRectangle(handleX, y + 4, 15, 14, 6, handleColor, false) -- Bolinha com a cor baseada no estado
    end
    
    function checkSwitchClick(cursorX, cursorY)
        for i, switch in ipairs(switches) do
            -- Ajusta a posição e as dimensões usando calculatePosition
            local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
        
            -- Verifica se o clique ocorreu sobre este switch na aba correta
            if cursorX >= switchX and cursorX <= switchX + switchWidth and
               cursorY >= switchY and cursorY <= switchY + switchHeight and
               switch.selectedTab == selectedTab then
                -- Alterna o estado para o oposto
                switch.state = not switch.state
                playSoundFrontEnd(37)
                
                -- Envia uma notificação para ativação/desativação do switch
                notifySwitchState(switch.id, switch.state)
            end
        end
    end
    

    function notifySwitchState(switchId, state)
        local message
        local color
    
        -- Define a mensagem e a cor com base no ID do switch e seu estado
        if switchId == 1 then
            message = state and "GodMode ativado." or "GodMode desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 2 then
            message = state and "Anti Fogo ativado." or "Anti Fogo desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 3 then
            message = state and "Noragdoll ativado." or "Noragdoll desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 4 then
            message = state and "Invisivel ativado." or "Invisivel desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 5 then
            message = state and "Stamina Infinita ativado." or "Stamina Infinita desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 6 then
            message = state and "Aimbot ativado." or "Aimbot desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 7 then
            message = state and "Fov ativado." or "Fov desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 8 then
            message = state and "Incluir peds ativado." or "Incluir peds desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 9 then
            message = state and "Verificar visibilidade ativado." or "Verificar visibilidade desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 10 then
            message = state and "Fast reload ativado." or "Fast reload desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 11 then
            message = state and "Bullet tracer ativado." or "Bullet tracer desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 12 then
            message = state and "Esp ativado." or "Esp desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 13 then
            message = state and "Esp Names ativado." or "Esp Names desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 14 then
            message = state and "Esp Healthbar ativado." or "Esp Healthbar desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 15 then
            message = state and "Esp Skeleton ativado." or "Esp Skeleton desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 16 then
            message = state and "Esp Lines ativado." or "Esp Lines desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 17 then
            message = state and "Esp Box ativado." or "Esp Box desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 21 then
            message = state and "Esp Corner ativado." or "Esp Corner desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 18 then
            message = state and "Esp Skeleton ADM ativado." or "Esp Skeleton ADM desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 19 then
            message = state and "Esp Lines ADM ativado." or "Esp Lines ADM desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        elseif switchId == 20 then
            message = state and "Mostrar lista ADM ativado." or "Mostrar lista ADM desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        else
            message = state and "Switch desconhecido ativado." or "Switch desconhecido desativado."
            color = state and {0, 149, 249} or {0, 149, 249}
        end
    
        -- Exibe a notificação
        addNotification(message, color)
    end

    -- Função para desenhar todos os switches
    function drawAllSwitches0()
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 1 then
            for _, switch in ipairs(switches) do
                -- Ajusta a posição e as dimensões usando calculatePosition
                local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
            
                -- Desenha o switch
                drawSwitch(switchX, switchY, switchWidth, switchHeight, switch.state)
            end
        end
    end
    
    -- Adiciona o evento para verificar o clique do mouse
    addEventHandler("onClientClick", root, function(button, state, cursorX, cursorY)
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 1 and button == "left" and state == "down" then
            checkSwitchClick(cursorX, cursorY)
        end
    end)
    
    -- Exemplo de como você pode atualizar a aba selecionada (pode ser feito conforme sua lógica de interface)
    function setSelectedTab(tab)
        selectedTab = tab
    end
    
    local switches2 = {
        { id = 6, x = 1365, y = 234, width = 50, height = 20, selectedTab = 2, state = false },
        { id = 7, x = 1365, y = 348, width = 50, height = 20, selectedTab = 2, state = false },
        { id = 8, x = 1365, y = 408, width = 50, height = 20, selectedTab = 2, state = false },
        { id = 9, x = 1365, y = 528, width = 50, height = 20, selectedTab = 2, state = false },
    }
    
    -- Função para desenhar um retângulo com cantos arredondados
    function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI)
        dxDrawRectangle(x, y, width, height, color, postGUI)  -- Desenha o retângulo principal
    end
    
    -- Função para desenhar os switches
    function drawSwitch2(x, y, width, height, state)
        -- Desenha a borda do switch
        dxDrawRoundedRectangle(x - 1, y - 1, width + 2, height + 2, 9, tocolor(44, 44, 44, 255), false)
    
        -- Desenha o fundo do switch
        dxDrawRoundedRectangle(x, y, width, height, 9, tocolor(16, 16, 16, 255), false)
    
        -- Calcula a posição x da bolinha (handle) com base no estado do switch
        local handleX
        if state then
            handleX = x + width - 19 -- Posição para ligado
        else
            handleX = x + 4 -- Posição para desligado
        end
    
        -- Determina a cor da bolinha baseada no estado do switch
        local handleColor
        if state then
            handleColor = tocolor(0, 149, 249, 255) -- Cor azul quando ligado
        else
            handleColor = tocolor(169, 169, 169, 255) -- Cor cinza quando desligado
        end
    
        dxDrawRoundedRectangle(handleX, y + 4, 15, 14, 6, handleColor, false) -- Bolinha com a cor baseada no estado
    end
    
    -- Função para verificar o clique nos switches
    function checkSwitchClick2(cursorX, cursorY)
        for i, switch in ipairs(switches2) do
            -- Ajusta a posição e as dimensões usando calculatePosition
            local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
    
            -- Verifica se o clique ocorreu sobre este switch na aba correta
            if cursorX >= switchX and cursorX <= switchX + switchWidth and
               cursorY >= switchY and cursorY <= switchY + switchHeight and
               switch.selectedTab == selectedTab then
                -- Alterna o estado para o oposto
                switch.state = not switch.state
                playSoundFrontEnd(37)

                notifySwitchState(switch.id, switch.state)
            end
        end
    end
    
    -- Função para desenhar todos os switches
    function drawAllSwitches2()
        if SharkMenu and selectedTab == 2 and IsTab1Visible2 == 1 then
            for _, switch in ipairs(switches2) do
                -- Ajusta a posição e as dimensões usando calculatePosition
                local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
    
                -- Desenha o switch
                drawSwitch2(switchX, switchY, switchWidth, switchHeight, switch.state)
            end
        end
    end
    
    -- Adiciona o evento para verificar o clique do mouse
    addEventHandler("onClientClick", root, function(button, state, cursorX, cursorY)
        if SharkMenu and selectedTab == 2 and IsTab1Visible2 == 1 and button == "left" and state == "down" then
            checkSwitchClick2(cursorX, cursorY)
        end
    end)
    
    -- Adiciona o evento para desenhar os switches
    addEventHandler("onClientRender", root, function()
        drawAllSwitches2()
    end)    
    
    
    local switches4 = {
        { id = 12, x = 1079, y = 263, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 18, x = 1079, y = 578, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 19, x = 1079, y = 613, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 20, x = 1079, y = 645, width = 46, height = 18, selectedTab = 6, state = false },
    }
    
    -- Função para desenhar um retângulo com cantos arredondados
    function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI)
        dxDrawRectangle(x, y, width, height, color, postGUI)  -- Desenha o retângulo principal
    end
    
    -- Função para desenhar os switches
    function drawSwitch4(x, y, width, height, state)
        -- Desenha a borda do switch
        dxDrawRoundedRectangle(x - 1, y - 1, width + 2, height + 2, 9, tocolor(44, 44, 44, 255), false)
    
        -- Desenha o fundo do switch
        dxDrawRoundedRectangle(x, y, width, height, 9, tocolor(16, 16, 16, 255), false)
    
        -- Calcula a posição x da bolinha (handle) com base no estado do switch
        local handleX
        if state then
            handleX = x + width - 19 -- Posição para ligado
        else
            handleX = x + 4 -- Posição para desligado
        end
    
        -- Determina a cor da bolinha baseada no estado do switch
        local handleColor
        if state then
            handleColor = tocolor(0, 149, 249, 255) -- Cor azul quando ligado
        else
            handleColor = tocolor(169, 169, 169, 255) -- Cor cinza quando desligado
        end
    
        dxDrawRoundedRectangle(handleX, y + 4, 15, 14, 6, handleColor, false) -- Bolinha com a cor baseada no estado
    end
    
    -- Função para verificar o clique nos switches
    function checkSwitchClick4(cursorX, cursorY)
        for i, switch in ipairs(switches4) do
            -- Ajusta a posição e as dimensões usando calculatePosition
            local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
    
            -- Verifica se o clique ocorreu sobre este switch na aba correta
            if cursorX >= switchX and cursorX <= switchX + switchWidth and
               cursorY >= switchY and cursorY <= switchY + switchHeight and
               switch.selectedTab == selectedTab then
                -- Alterna o estado para o oposto
                switch.state = not switch.state
                playSoundFrontEnd(37)

                notifySwitchState(switch.id, switch.state)
            end
        end
    end
    
    -- Função para desenhar todos os switches
    function drawAllSwitches4()
        if SharkMenu and selectedTab == 6 then
            for _, switch in ipairs(switches4) do
                -- Ajusta a posição e as dimensões usando calculatePosition
                local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
    
                -- Desenha o switch
                drawSwitch4(switchX, switchY, switchWidth, switchHeight, switch.state)
            end
        end
    end
    
    -- Adiciona o evento para verificar o clique do mouse
    addEventHandler("onClientClick", root, function(button, state, cursorX, cursorY)
        if SharkMenu and selectedTab == 6 and button == "left" and state == "down" then
            checkSwitchClick4(cursorX, cursorY)
        end
    end)
    

    local switches00 = {
        { id = 13, x = 1079, y = 298, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 14, x = 1079, y = 333, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 15, x = 1079, y = 369, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 16, x = 1079, y = 407, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 17, x = 1079, y = 446, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 21, x = 1079, y = 484, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 22, x = 1374, y = 299, width = 46, height = 18, selectedTab = 6, state = false },
        { id = 23, x = 1374, y = 334, width = 46, height = 18, selectedTab = 6, state = false },
    }
    
    -- Função para desenhar um retângulo com cantos arredondados
    function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI)
        dxDrawRectangle(x, y, width, height, color, postGUI)  -- Desenha o retângulo principal
    end
    
    -- Função para desenhar os switches
    function drawSwitchEsp(x, y, width, height, state)
        -- Desenha a borda do switch
        dxDrawRoundedRectangle(x - 1, y - 1, width + 2, height + 2, 9, tocolor(44, 44, 44, 255), false)
    
        -- Desenha o fundo do switch
        dxDrawRoundedRectangle(x, y, width, height, 9, tocolor(16, 16, 16, 255), false)
    
        -- Calcula a posição x da bolinha (handle) com base no estado do switch
        local handleX
        if state then
            handleX = x + width - 19 -- Posição para ligado
        else
            handleX = x + 4 -- Posição para desligado
        end
    
        -- Determina a cor da bolinha baseada no estado do switch
        local handleColor
        if state then
            handleColor = tocolor(0, 149, 249, 255) -- Cor azul quando ligado
        else
            handleColor = tocolor(169, 169, 169, 255) -- Cor cinza quando desligado
        end
    
        dxDrawRoundedRectangle(handleX, y + 4, 15, 14, 6, handleColor, false) -- Bolinha com a cor baseada no estado
    end
    
    -- Função para verificar o clique nos switches
    function checkSwitchClickEsp(cursorX, cursorY)
        for i, switch in ipairs(switches00) do
            -- Ajusta a posição e as dimensões usando calculatePosition
            local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
        
            -- Verifica se o clique ocorreu sobre este switch na aba correta
            if cursorX >= switchX and cursorX <= switchX + switchWidth and
               cursorY >= switchY and cursorY <= switchY + switchHeight and
               switch.selectedTab == selectedTab then
                -- Alterna o estado para o oposto
                switch.state = not switch.state
                playSoundFrontEnd(37)

                notifySwitchState(switch.id, switch.state)
                
                -- Atualiza a variável espBox com base no estado do switch 15
                if switch.id == 15 then
                    espBox = switch.state
                end
            end
        end
    end
    
    -- Função para desenhar todos os switches
    function drawAllSwitches()
        if SharkMenu and selectedTab == 6 then
            for _, switch in ipairs(switches00) do
                -- Ajusta a posição e as dimensões usando calculatePosition
                local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
    
                -- Desenha o switch
                drawSwitchEsp(switchX, switchY, switchWidth, switchHeight, switch.state)
            end
        end
    end
    
    -- Adiciona o evento para verificar o clique do mouse
    addEventHandler("onClientClick", root, function(button, state, cursorX, cursorY)
        if selectedTab == 6 and button == "left" and state == "down" then
            checkSwitchClickEsp(cursorX, cursorY)
        end
    end)
    
    -- Adiciona o evento para desenhar os switches
    addEventHandler("onClientRender", root, function()
        if selectedTab == 6 then
            drawAllSwitches()
        end
    end)
    

    local switches3 = {
        { id = 10, x = 1365, y = 234, width = 50, height = 20, selectedTab = 2, state = false },
        { id = 11, x = 1365, y = 291, width = 50, height = 20, selectedTab = 2, state = false },
    }
    
    -- Função para desenhar um retângulo com cantos arredondados
    function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI)
        dxDrawRectangle(x, y, width, height, color, postGUI)  -- Desenha o retângulo principal
    end
    
    -- Função para desenhar os switches
    function drawSwitch3(x, y, width, height, state)
        -- Desenha a borda do switch
        dxDrawRoundedRectangle(x - 1, y - 1, width + 2, height + 2, 9, tocolor(44, 44, 44, 255), false)
    
        -- Desenha o fundo do switch
        dxDrawRoundedRectangle(x, y, width, height, 9, tocolor(16, 16, 16, 255), false)
    
        -- Calcula a posição x da bolinha (handle) com base no estado do switch
        local handleX
        if state then
            handleX = x + width - 19 -- Posição para ligado
        else
            handleX = x + 4 -- Posição para desligado
        end
    
        -- Determina a cor da bolinha baseada no estado do switch
        local handleColor
        if state then
            handleColor = tocolor(0, 149, 249, 255) -- Cor azul quando ligado
        else
            handleColor = tocolor(169, 169, 169, 255) -- Cor cinza quando desligado
        end
    
        dxDrawRoundedRectangle(handleX, y + 4, 15, 14, 6, handleColor, false) -- Bolinha com a cor baseada no estado
    end
    
    -- Função para calcular a posição ajustada dos switches
    function calculatePosition(x, y, width, height)
        local adjustedX = x
        local adjustedY = y
        local adjustedWidth = width
        local adjustedHeight = height
        -- Aqui você pode adicionar qualquer lógica de ajuste específica
        return adjustedX, adjustedY, adjustedWidth, adjustedHeight
    end
    
    -- Função para verificar o clique nos switches
    function checkSwitchClick3(cursorX, cursorY)
        for i, switch in ipairs(switches3) do
            -- Ajusta a posição e as dimensões usando calculatePosition
            local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
        
            -- Verifica se o clique ocorreu sobre este switch na aba correta
            if cursorX >= switchX and cursorX <= switchX + switchWidth and
               cursorY >= switchY and cursorY <= switchY + switchHeight and
               switch.selectedTab == selectedTab then
                -- Alterna o estado para o oposto
                switch.state = not switch.state
                playSoundFrontEnd(37)

                notifySwitchState(switch.id, switch.state)
            end
        end
    end
    
    -- Função para desenhar todos os switches
    function drawAllSwitches3()
        if SharkMenu and selectedTab == 2 and IsTab1Visible2 == 2 then
            for _, switch in ipairs(switches3) do
                -- Ajusta a posição e as dimensões usando calculatePosition
                local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
        
                -- Desenha o switch
                drawSwitch3(switchX, switchY, switchWidth, switchHeight, switch.state)
            end
        end
    end
    
    -- Adiciona o evento para verificar o clique do mouse
    addEventHandler("onClientClick", root, function(button, state, cursorX, cursorY)
        if SharkMenu and selectedTab == 2 and IsTab1Visible2 == 2 and button == "left" and state == "down" then
            checkSwitchClick3(cursorX, cursorY)
        end
    end)
    
    -- Adiciona o evento para desenhar os switches
    addEventHandler("onClientRender", root, function()
        if selectedTab == 2 then
            drawAllSwitches3()
        end
    end)
    
    local switches7 = {
        { id = 24, x = 1365, y = 348, width = 50, height = 20, selectedTab = 1, state = false },
    }
    
    -- Função para desenhar um retângulo com cantos arredondados
    function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI)
        dxDrawRectangle(x, y, width, height, color, postGUI)  -- Desenha o retângulo principal
    end
    
    -- Função para desenhar os switches
    function drawSwitch7(x, y, width, height, state)
        -- Desenha a borda do switch
        dxDrawRoundedRectangle(x - 1, y - 1, width + 2, height + 2, 9, tocolor(44, 44, 44, 255), false)
    
        -- Desenha o fundo do switch
        dxDrawRoundedRectangle(x, y, width, height, 9, tocolor(16, 16, 16, 255), false)
    
        -- Calcula a posição x da bolinha (handle) com base no estado do switch
        local handleX
        if state then
            handleX = x + width - 19 -- Posição para ligado
        else
            handleX = x + 4 -- Posição para desligado
        end
    
        -- Determina a cor da bolinha baseada no estado do switch
        local handleColor
        if state then
            handleColor = tocolor(0, 149, 249, 255) -- Cor azul quando ligado
        else
            handleColor = tocolor(169, 169, 169, 255) -- Cor cinza quando desligado
        end
    
        dxDrawRoundedRectangle(handleX, y + 4, 15, 14, 6, handleColor, false) -- Bolinha com a cor baseada no estado
    end
    
    -- Função para calcular a posição ajustada dos switches
    function calculatePosition(x, y, width, height)
        local adjustedX = x
        local adjustedY = y
        local adjustedWidth = width
        local adjustedHeight = height
        -- Aqui você pode adicionar qualquer lógica de ajuste específica
        return adjustedX, adjustedY, adjustedWidth, adjustedHeight
    end
    
    -- Função para verificar o clique nos switches
    function checkSwitchClick7(cursorX, cursorY)
        for i, switch in ipairs(switches7) do
            -- Ajusta a posição e as dimensões usando calculatePosition
            local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
        
            -- Verifica se o clique ocorreu sobre este switch na aba correta
            if cursorX >= switchX and cursorX <= switchX + switchWidth and
               cursorY >= switchY and cursorY <= switchY + switchHeight and
               switch.selectedTab == selectedTab then
                -- Alterna o estado para o oposto
                switch.state = not switch.state
                playSoundFrontEnd(37)

                notifySwitchState(switch.id, switch.state)
            end
        end
    end
    
    -- Função para desenhar todos os switches
    function drawAllSwitches7()
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 2 then
            for _, switch in ipairs(switches7) do
                -- Ajusta a posição e as dimensões usando calculatePosition
                local switchX, switchY, switchWidth, switchHeight = calculatePosition(switch.x, switch.y, switch.width, switch.height)
        
                -- Desenha o switch
                drawSwitch7(switchX, switchY, switchWidth, switchHeight, switch.state)
            end
        end
    end
    
    -- Adiciona o evento para verificar o clique do mouse
    addEventHandler("onClientClick", root, function(button, state, cursorX, cursorY)
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 2 and button == "left" and state == "down" then
            checkSwitchClick7(cursorX, cursorY)
        end
    end)
    
    function isCursorOver(x, y, width, height)
        local mouseX, mouseY = getCursorPosition()
        if mouseX and mouseY then
            local screenX, screenY = guiGetScreenSize()
            local mouseX, mouseY = mouseX * screenX, mouseY * screenY
            return (mouseX >= x and mouseX <= x + width and mouseY >= y and mouseY <= y + height)
        end
        return false
    end
    
    function dxDrawRoundedRectangle(x, y, width, height, radius, color, postGUI, subPixelPositioning)
        local radius2 = radius * 2
        local x2, y2 = x + width, y + height
        dxDrawRectangle(x + radius, y, width - radius2, height, color, postGUI, subPixelPositioning) 
        dxDrawRectangle(x, y + radius, radius, height - radius2, color, postGUI, subPixelPositioning) 
        dxDrawRectangle(x2 - radius, y + radius, radius, height - radius2, color, postGUI, subPixelPositioning) 
        dxDrawRectangle(x + radius, y2 - radius, width - radius2, radius, color, postGUI, subPixelPositioning) 
        dxDrawCircle(x + radius, y + radius, radius, 180, 270, color, color, 16, 1, postGUI) 
        dxDrawCircle(x2 - radius, y + radius, radius, 270, 360, color, color, 16, 1, postGUI) 
        dxDrawCircle(x + radius, y2 - radius, radius, 90, 180, color, color, 16, 1, postGUI) 
        dxDrawCircle(x2 - radius, y2 - radius, radius, 0, 90, color, color, 16, 1, postGUI) 
    end
    
    function onClick(button, state, absoluteX, absoluteY)
        if button == "left" and state == "down" and SharkMenu then
            for i, area in ipairs(tabAreas) do
                -- Calculando a posição e o tamanho proporcional para a área clicável
                local areaX, areaY, areaWidth, areaHeight = calculatePosition(area.x, area.y, area.width, area.height)
                
                -- Verificando se o clique está dentro da área
                if absoluteX >= areaX and absoluteX <= areaX + areaWidth and absoluteY >= areaY and absoluteY <= areaY + areaHeight then
                    selectedTab = i
                    break
                end
            end
        end
    end
    
    addEventHandler("onClientClick", root, onClick)
    
    local scrollValue = 0
    local scrollMin = 0
    local scrollMax = 100
    
    local scrollbarX, scrollbarY, scrollbarWidth, scrollbarHeight = calculatePosition(1160, 592, 236, 20)
    local thumbWidth = 7
    local thumbHeight = scrollbarHeight
    
    local isDragging = false
    local dragOffset = 0
    
    -- Função para desenhar a scrollbar
    function drawScrollbar()
        -- Desenhar o fundo da scrollbar
        local scrollbarX, scrollbarY, scrollbarWidth, scrollbarHeight = calculatePosition(1160, 592, 236, 20)
        dxDrawRectangle(scrollbarX, scrollbarY, scrollbarWidth, scrollbarHeight, tocolor(58, 58, 58, 255), false)
        -- Calcular a posição do thumb
        local thumbX = scrollbarX + ((scrollValue - scrollMin) / (scrollMax - scrollMin)) * (scrollbarWidth - thumbWidth)
        -- Desenhar o thumb
        dxDrawRoundedRectangle(thumbX, scrollbarY, thumbWidth, thumbHeight, 5,tocolor(0, 149, 249, 255), false)
        -- Desenhar o valor atual
        dxDrawText(tostring(scrollValue), scrollbarX, scrollbarY, scrollbarX + scrollbarWidth, scrollbarY + scrollbarHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
    end
    
    -- Função para atualizar o valor da scrollbar
    function updateScrollbarValue(absoluteX)
        local scrollbarX, scrollbarY, scrollbarWidth, scrollbarHeight = calculatePosition(1160, 592, 236, 20)
        local thumbX = absoluteX - (thumbWidth / 2)
        thumbX = math.max(scrollbarX, math.min(scrollbarX + scrollbarWidth - thumbWidth, thumbX))
        return math.floor((thumbX - scrollbarX) / (scrollbarWidth - thumbWidth) * (scrollMax - scrollMin) + scrollMin)
    end
    
    -- Função para verificar o clique na scrollbar
    function onClientClick(button, state, absoluteX, absoluteY)
        if selectedTab == 1 and IsTab1Visible == 1 and button == "left" and state == "down" then
            -- Verificar se o clique está dentro do thumb
            local scrollbarX, scrollbarY, scrollbarWidth, scrollbarHeight = calculatePosition(1160, 592, 236, 20)
            local thumbX = scrollbarX + ((scrollValue - scrollMin) / (scrollMax - scrollMin)) * (scrollbarWidth - thumbWidth)
            if absoluteX >= thumbX and absoluteX <= thumbX + thumbWidth and absoluteY >= scrollbarY and absoluteY <= scrollbarY + thumbHeight then
                isDragging = true
                dragOffset = absoluteX - thumbX
            -- Verificar se o clique está dentro da scrollbar, mas fora do thumb
            elseif absoluteX >= scrollbarX and absoluteX <= scrollbarX + scrollbarWidth and absoluteY >= scrollbarY and absoluteY <= scrollbarY + scrollbarHeight then
                dragOffset = thumbWidth / 2
                scrollValue = updateScrollbarValue(absoluteX)
                isDragging = true
                setPedArmor(localPlayer, scrollValue) 
            end
        elseif button == "left" and state == "up" then
            isDragging = false
        end
    end
    
    -- Função para mover o cursor
    function onClientCursorMove(_, _, absoluteX, absoluteY)
        if isDragging then
            scrollValue = updateScrollbarValue(absoluteX)
            setPedArmor(localPlayer, scrollValue) 
        end
    end
    
    addEventHandler("onClientClick", root, onClientClick)
    addEventHandler("onClientCursorMove", root, onClientCursorMove)
    
    local scrollValue4 = 60
    local scrollMin4 = 60
    local scrollMax4 = 300
    
    local scrollbarX4, scrollbarY4, scrollbarWidth4, scrollbarHeight4 = calculatePosition(1160, 297, 236, 20)
    local thumbWidth4 = 7
    local thumbHeight4 = scrollbarHeight4
    
    local isDragging4 = false
    local dragOffset4 = 0
    
    -- Função para desenhar a scrollbar
    function drawScrollbar4()
        local scrollbarX4, scrollbarY4, scrollbarWidth4, scrollbarHeight4 = calculatePosition(1160, 297, 236, 20)
        -- Desenhar o fundo da scrollbar
        dxDrawRectangle(scrollbarX4, scrollbarY4, scrollbarWidth4, scrollbarHeight4, tocolor(58, 58, 58, 255), false)
        
        -- Calcular a posição do thumb
        local thumbX4 = scrollbarX4 + ((scrollValue4 - scrollMin4) / (scrollMax4 - scrollMin4)) * (scrollbarWidth4 - thumbWidth4)
        
        -- Desenhar o thumb
        dxDrawRoundedRectangle(thumbX4, scrollbarY4, thumbWidth4, thumbHeight4, 5, tocolor(0, 149, 249, 255), false)
        
        -- Desenhar o valor atual
        dxDrawText(tostring(scrollValue4), scrollbarX4, scrollbarY4, scrollbarX4 + scrollbarWidth4, scrollbarY4 + scrollbarHeight4, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
    end
    
    -- Função para atualizar o valor da scrollbar
    function updateScrollbarValue4(absoluteX4)
        local scrollbarX4, scrollbarY4, scrollbarWidth4, scrollbarHeight4 = calculatePosition(1160, 297, 236, 20)
        local thumbX4 = absoluteX4 - (thumbWidth4 / 2)
        thumbX4 = math.max(scrollbarX4, math.min(scrollbarX4 + scrollbarWidth4 - thumbWidth4, thumbX4))
        return math.floor((thumbX4 - scrollbarX4) / (scrollbarWidth4 - thumbWidth4) * (scrollMax4 - scrollMin4) + scrollMin4)
    end
    
    -- Função para verificar o clique na scrollbar
    function onClientClick4(button, state, absoluteX4, absoluteY4)
        if selectedTab == 2 and IsTab1Visible2 == 1 and button == "left" and state == "down" then
            local scrollbarX4, scrollbarY4, scrollbarWidth4, scrollbarHeight4 = calculatePosition(1160, 297, 236, 20)
            -- Verificar se o clique está dentro do thumb
            local thumbX4 = scrollbarX4 + ((scrollValue4 - scrollMin4) / (scrollMax4 - scrollMin4)) * (scrollbarWidth4 - thumbWidth4)
            if absoluteX4 >= thumbX4 and absoluteX4 <= thumbX4 + thumbWidth4 and absoluteY4 >= scrollbarY4 and absoluteY4 <= scrollbarY4 + thumbHeight4 then
                isDragging4 = true
                dragOffset4 = absoluteX4 - thumbX4
            -- Verificar se o clique está dentro da scrollbar, mas fora do thumb
            elseif absoluteX4 >= scrollbarX4 and absoluteX4 <= scrollbarX4 + scrollbarWidth4 and absoluteY4 >= scrollbarY4 and absoluteY4 <= scrollbarY4 + scrollbarHeight4 then
                scrollValue4 = updateScrollbarValue4(absoluteX4)
                isDragging4 = true
            end
        elseif button == "left" and state == "up" then
            isDragging4 = false
        end
    end
    
    -- Função para mover o cursor
    function onClientCursorMove4(_, _, absoluteX4, absoluteY4)
        if isDragging4 then
            scrollValue4 = updateScrollbarValue4(absoluteX4)
        end
    end
    
    addEventHandler("onClientClick", root, onClientClick4)
    addEventHandler("onClientCursorMove", root, onClientCursorMove4)
    
    local scrollValue2 = 1
    local scrollMin2 = 0
    local scrollMax2 = 10
    
    local scrollbarX2, scrollbarY2, scrollbarWidth2, scrollbarHeight2 = calculatePosition(1160, 295, 255, 20)
    local thumbWidth2 = 7
    local thumbHeight2 = scrollbarHeight2
    
    local isDragging2 = false
    local dragOffset2 = 0
    
    -- Função para desenhar a scrollbar
    function drawScrollbar2()
        local scrollbarX2, scrollbarY2, scrollbarWidth2, scrollbarHeight2 = calculatePosition(1160, 295, 255, 20)
        -- Desenhar o fundo da scrollbar
        dxDrawRectangle(scrollbarX2, scrollbarY2, scrollbarWidth2, scrollbarHeight2, tocolor(58, 58, 58, 255), false)
        -- Calcular a posição do thumb
        local thumbX2 = scrollbarX2 + ((scrollValue2 - scrollMin2) / (scrollMax2 - scrollMin2)) * (scrollbarWidth2 - thumbWidth2)
        -- Desenhar o thumb
        dxDrawRoundedRectangle(thumbX2, scrollbarY2, thumbWidth2, thumbHeight2, 5,tocolor(0, 149, 249, 255), false)
        -- Desenhar o valor atual
        dxDrawText(tostring(scrollValue2), scrollbarX2, scrollbarY2, scrollbarX2 + scrollbarWidth2, scrollbarY2 + scrollbarHeight2, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
    end
    
    -- Função para atualizar o valor da scrollbar
    function updateScrollbarValue2(absoluteX2)
        local scrollbarX2, scrollbarY2, scrollbarWidth2, scrollbarHeight2 = calculatePosition(1160, 295, 255, 20)
        local thumbX2 = absoluteX2 - (thumbWidth2 / 2)
        thumbX2 = math.max(scrollbarX2, math.min(scrollbarX2 + scrollbarWidth2 - thumbWidth2, thumbX2))
        return math.floor((thumbX2 - scrollbarX2) / (scrollbarWidth2 - thumbWidth2) * (scrollMax2 - scrollMin2) + scrollMin2)
    end
    
    -- Função para verificar o clique na scrollbar
    function onClientClick2(button, state, absoluteX2, absoluteY2)
        if selectedTab == 1 and IsTab1Visible == 2 and button == "left" and state == "down" then
            -- Verificar se o clique está dentro do thumb
            local scrollbarX2, scrollbarY2, scrollbarWidth2, scrollbarHeight2 = calculatePosition(1160, 295, 255, 20)
            local thumbX2 = scrollbarX2 + ((scrollValue2 - scrollMin2) / (scrollMax2 - scrollMin2)) * (scrollbarWidth2 - thumbWidth2)
            if absoluteX2 >= thumbX2 and absoluteX2 <= thumbX2 + thumbWidth2 and absoluteY2 >= scrollbarY2 and absoluteY2 <= scrollbarY2 + thumbHeight2 then
                isDragging2 = true
                dragOffset2 = absoluteX2 - thumbX2
            -- Verificar se o clique está dentro da scrollbar, mas fora do thumb
            elseif absoluteX2 >= scrollbarX2 and absoluteX2 <= scrollbarX2 + scrollbarWidth2 and absoluteY2 >= scrollbarY2 and absoluteY2 <= scrollbarY2 + scrollbarHeight2 then
                dragOffset2 = thumbWidth2 / 2
                scrollValue2 = updateScrollbarValue2(absoluteX2)
                isDragging2 = true
            end
        elseif button == "left" and state == "up" then
            isDragging2 = false
        end
    end
    
    -- Função para mover o cursor
    function onClientCursorMove2(_, _, absoluteX2, absoluteY2)
        if isDragging2 then
            scrollValue2 = updateScrollbarValue2(absoluteX2)
        end
    end
    
    addEventHandler("onClientClick", root, onClientClick2)
    addEventHandler("onClientCursorMove", root, onClientCursorMove2)
    
    -- Parâmetros e estados para a scrollbar
    local scrollbar1 = {
        x = 1204,
        y = 245,
        width = 209,
        height = 19,
        scrollValue = 0,
        scrollMin = 0,
        scrollMax = 312,
        isDragging = false,
        dragOffset = 0
    }
    
    local thumbWidth1 = 7
    local thumbHeight1 = scrollbar1.height
    
    -- Função para desenhar a scrollbar
    function drawScrollbar1()
        local scrollbarX1, scrollbarY1, scrollbarWidth1, scrollbarHeight1 = calculatePosition(scrollbar1.x, scrollbar1.y, scrollbar1.width, scrollbar1.height)
        
        -- Desenhar o fundo da scrollbar
        dxDrawRectangle(scrollbarX1, scrollbarY1, scrollbarWidth1, scrollbarHeight1, tocolor(58, 58, 58, 255), false)
        
        -- Calcular a posição do thumb
        local thumbX1 = scrollbarX1 + ((scrollbar1.scrollValue - scrollbar1.scrollMin) / (scrollbar1.scrollMax - scrollbar1.scrollMin)) * (scrollbarWidth1 - thumbWidth1)
        
        -- Desenhar o thumb
        dxDrawRectangle(thumbX1, scrollbarY1, thumbWidth1, thumbHeight1, tocolor(0, 149, 249, 255), false)
        
        -- Desenhar o valor atual
        dxDrawText(tostring(scrollbar1.scrollValue), scrollbarX1, scrollbarY1 - 25, scrollbarX1 + scrollbarWidth1, scrollbarY1, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
    end
    
    -- Função para atualizar o valor da scrollbar
    function updateScrollbarValue1(absoluteX1)
        local scrollbarX1, scrollbarY1, scrollbarWidth1, scrollbarHeight1 = calculatePosition(scrollbar1.x, scrollbar1.y, scrollbar1.width, scrollbar1.height)
        local thumbX1 = absoluteX1 - (thumbWidth1 / 2)
        thumbX1 = math.max(scrollbarX1, math.min(scrollbarX1 + scrollbarWidth1 - thumbWidth1, thumbX1))
        return math.floor((thumbX1 - scrollbarX1) / (scrollbarWidth1 - thumbWidth1) * (scrollbar1.scrollMax - scrollbar1.scrollMin) + scrollbar1.scrollMin)
    end
    
    -- Função para verificar o clique na scrollbar
    function onClientClick1(button, state, absoluteX1, absoluteY1)
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 3 and button == "left" and state == "down" then
            local scrollbarX1, scrollbarY1, scrollbarWidth1, scrollbarHeight1 = calculatePosition(scrollbar1.x, scrollbar1.y, scrollbar1.width, scrollbar1.height)
            -- Verificar se o clique está dentro do thumb
            local thumbX1 = scrollbarX1 + ((scrollbar1.scrollValue - scrollbar1.scrollMin) / (scrollbar1.scrollMax - scrollbar1.scrollMin)) * (scrollbarWidth1 - thumbWidth1)
            if absoluteX1 >= thumbX1 and absoluteX1 <= thumbX1 + thumbWidth1 and absoluteY1 >= scrollbarY1 and absoluteY1 <= scrollbarY1 + thumbHeight1 then
                scrollbar1.isDragging = true
                scrollbar1.dragOffset = absoluteX1 - thumbX1
            -- Verificar se o clique está dentro da scrollbar, mas fora do thumb
            elseif absoluteX1 >= scrollbarX1 and absoluteX1 <= scrollbarX1 + scrollbarWidth1 and absoluteY1 >= scrollbarY1 and absoluteY1 <= scrollbarY1 + scrollbarHeight1 then
                scrollbar1.dragOffset = thumbWidth1 / 2
                scrollbar1.scrollValue = updateScrollbarValue1(absoluteX1)
                scrollbar1.isDragging = true
                updatePlayerSkin(scrollbar1.scrollValue) -- Atualiza a skin do jogador
            end
        elseif button == "left" and state == "up" then
            scrollbar1.isDragging = false
        end
    end
    
    -- Função para mover o cursor
    function onClientCursorMove1(_, _, absoluteX1, absoluteY1)
        if scrollbar1.isDragging then
            scrollbar1.scrollValue = updateScrollbarValue1(absoluteX1)
            updatePlayerSkin(scrollbar1.scrollValue) -- Atualiza a skin do jogador
            refreshPlayersList(scrollbar1.scrollValue)
        end
    end
    
    -- Função para atualizar a skin do jogador com base no valor da scrollbar
    function updatePlayerSkin(skinID)
        if skinID >= 0 and skinID <= 312 then
            setPedSkin(localPlayer, skinID)
        end
    end
    
    -- Adicionar handlers de eventos
    addEventHandler("onClientClick", root, onClientClick1)
    addEventHandler("onClientCursorMove", root, onClientCursorMove1)
    
    local scrollValue5 = 10
    local scrollMin5 = 10
    local scrollMax5 = 400
    
    local scrollbarX5, scrollbarY5, scrollbarWidth5, scrollbarHeight5 = calculatePosition(1250, 264, 180, 20)
    local thumbWidth5 = 7
    local thumbHeight5 = scrollbarHeight5
    
    local isDragging5 = false
    local dragOffset5 = 0
    
    -- Variáveis para a segunda scrollbar
    local scrollValue6 = 1
    local scrollMin6 = 1
    local scrollMax6 = 10
    
    local scrollbarX6, scrollbarY6, scrollbarWidth6, scrollbarHeight6 = calculatePosition(1250, 372, 180, 17)
    local thumbWidth6 = 7
    local thumbHeight6 = scrollbarHeight6
    
    local isDragging6 = false
    local dragOffset6 = 0
    
    -- Função para desenhar as scrollbars
    function drawScrollbars()
        -- Calcular posição e tamanho do thumb para a primeira scrollbar
        local scrollbarX5, scrollbarY5, scrollbarWidth5, scrollbarHeight5 = calculatePosition(1250, 264, 180, 20)
        local thumbX5 = scrollbarX5 + ((scrollValue5 - scrollMin5) / (scrollMax5 - scrollMin5)) * (scrollbarWidth5 - thumbWidth5)
        dxDrawRectangle(scrollbarX5, scrollbarY5, scrollbarWidth5, scrollbarHeight5, tocolor(58, 58, 58, 255), false)
        dxDrawRoundedRectangle(thumbX5, scrollbarY5, thumbWidth5, thumbHeight5, 5, tocolor(0, 149, 249, 255), false)
        dxDrawText(tostring(scrollValue5), scrollbarX5, scrollbarY5, scrollbarX5 + scrollbarWidth5, scrollbarY5 + scrollbarHeight5, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
    
        -- Calcular posição e tamanho do thumb para a segunda scrollbar
        local scrollbarX6, scrollbarY6, scrollbarWidth6, scrollbarHeight6 = calculatePosition(1250, 372, 180, 17)
        local thumbX6 = scrollbarX6 + ((scrollValue6 - scrollMin6) / (scrollMax6 - scrollMin6)) * (scrollbarWidth6 - thumbWidth6)
        dxDrawRectangle(scrollbarX6, scrollbarY6, scrollbarWidth6, scrollbarHeight6, tocolor(58, 58, 58, 255), false)
        dxDrawRoundedRectangle(thumbX6, scrollbarY6, thumbWidth6, thumbHeight6, 5, tocolor(0, 149, 249, 255), false)
        dxDrawText(tostring(scrollValue6), scrollbarX6, scrollbarY6, scrollbarX6 + scrollbarWidth6, scrollbarY6 + scrollbarHeight6, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
    end
    
    -- Função para atualizar o valor da scrollbar
    function updateScrollbarValue5(absoluteX5)
        local scrollbarX5, scrollbarY5, scrollbarWidth5, scrollbarHeight5 = calculatePosition(1250, 264, 180, 20)
        local thumbX5 = absoluteX5 - (thumbWidth5 / 2)
        thumbX5 = math.max(scrollbarX5, math.min(scrollbarX5 + scrollbarWidth5 - thumbWidth5, thumbX5))
        return math.floor((thumbX5 - scrollbarX5) / (scrollbarWidth5 - thumbWidth5) * (scrollMax5 - scrollMin5) + scrollMin5)
    end
    
    function updateScrollbarValue6(absoluteX6)
        local scrollbarX6, scrollbarY6, scrollbarWidth6, scrollbarHeight6 = calculatePosition(1250, 372, 180, 17)
        local thumbX6 = absoluteX6 - (thumbWidth6 / 2)
        thumbX6 = math.max(scrollbarX6, math.min(scrollbarX6 + scrollbarWidth6 - thumbWidth6, thumbX6))
        return math.floor((thumbX6 - scrollbarX6) / (scrollbarWidth6 - thumbWidth6) * (scrollMax6 - scrollMin6) + scrollMin6)
    end
    
    -- Função para verificar o clique nas scrollbars
    function onClientClick(button, state, absoluteX, absoluteY)
        if selectedTab == 6 and button == "left" and state == "down" then
            -- Verificar clique na primeira scrollbar
            local scrollbarX5, scrollbarY5, scrollbarWidth5, scrollbarHeight5 = calculatePosition(1250, 264, 180, 20)
            local thumbX5 = scrollbarX5 + ((scrollValue5 - scrollMin5) / (scrollMax5 - scrollMin5)) * (scrollbarWidth5 - thumbWidth5)
            if absoluteX >= thumbX5 and absoluteX <= thumbX5 + thumbWidth5 and absoluteY >= scrollbarY5 and absoluteY <= scrollbarY5 + scrollbarHeight5 then
                isDragging5 = true
                dragOffset5 = absoluteX - thumbX5
            elseif absoluteX >= scrollbarX5 and absoluteX <= scrollbarX5 + scrollbarWidth5 and absoluteY >= scrollbarY5 and absoluteY <= scrollbarY5 + scrollbarHeight5 then
                scrollValue5 = updateScrollbarValue5(absoluteX)
                isDragging5 = true
            end
    
            -- Verificar clique na segunda scrollbar
            local scrollbarX6, scrollbarY6, scrollbarWidth6, scrollbarHeight6 = calculatePosition(1250, 372, 180, 17)
            local thumbX6 = scrollbarX6 + ((scrollValue6 - scrollMin6) / (scrollMax6 - scrollMin6)) * (scrollbarWidth6 - thumbWidth6)
            if absoluteX >= thumbX6 and absoluteX <= thumbX6 + thumbWidth6 and absoluteY >= scrollbarY6 and absoluteY <= scrollbarY6 + scrollbarHeight6 then
                isDragging6 = true
                dragOffset6 = absoluteX - thumbX6
            elseif absoluteX >= scrollbarX6 and absoluteX <= scrollbarX6 + scrollbarWidth6 and absoluteY >= scrollbarY6 and absoluteY <= scrollbarY6 + scrollbarHeight6 then
                scrollValue6 = updateScrollbarValue6(absoluteX)
                isDragging6 = true
            end
        elseif button == "left" and state == "up" then
            isDragging5 = false
            isDragging6 = false
        end
    end
    
    -- Função para mover o cursor
    function onClientCursorMove(_, _, absoluteX, absoluteY)
        if isDragging5 then
            scrollValue5 = updateScrollbarValue5(absoluteX)
            maxDistance = scrollValue5
        end
        if isDragging6 then
            scrollValue6 = updateScrollbarValue6(absoluteX)
        end
    end
    
    addEventHandler("onClientClick", root, onClientClick)
    addEventHandler("onClientCursorMove", root, onClientCursorMove)
    
    function toggleMenu()
        SharkMenu = not SharkMenu -- Alternar entre visível e invisível
    
        if SharkMenu then
            showCursor(true) -- Mostrar o cursor quando o menu está visível
        else
            showCursor(false) -- Esconder o cursor quando o menu está invisível
        end
    end
    
    -- Associar a tecla padrão para abrir/fechar o menu e mostrar/ocultar o cursor
    bindKey(toggleKey, "down", toggleMenu)

    function drawRectangleWithBorder(x, y, width, height, color, borderColor, borderWidth)
        -- Desenha o retângulo principal
        dxDrawRectangle(x, y, width, height, color, false)
        
        -- Desenha a borda ao redor do retângulo
        -- Borda superior
        dxDrawRectangle(x, y - borderWidth, width, borderWidth, borderColor, false)
        -- Borda inferior
        dxDrawRectangle(x, y + height, width, borderWidth, borderColor, false)
        -- Borda esquerda
        dxDrawRectangle(x - borderWidth, y, borderWidth, height, borderColor, false)
        -- Borda direita
        dxDrawRectangle(x + width, y, borderWidth, height, borderColor, false)
    end

    function drawTabImages()

        local image2X, image2Y, image2Width, image2Height = calculatePosition(757, 233, 36, 36)
        local image3X, image3Y, image3Width, image3Height = calculatePosition(759, 295, 36, 36)
        local image4X, image4Y, image4Width, image4Height = calculatePosition(761, 352, 30, 30)
        local image5X, image5Y, image5Width, image5Height = calculatePosition(754, 393, 43, 56)
        local image6X, image6Y, image6Width, image6Height = calculatePosition(760, 458, 36, 40)
        local image7X, image7Y, image7Width, image7Height = calculatePosition(761, 523, 34, 34)
        local image8X, image8Y, image8Width, image8Height = calculatePosition(762, 576, 32, 34)
        local image9X, image9Y, image9Width, image9Height = calculatePosition(758, 637, 34, 29)

        local height, width = 50, 40
        local recX = 750
    
        if selectedTab == 1 then
            dxDrawRoundedRectangle(recX, image2Y - 2, height, width, 3, tocolor(0, 149, 249, 50), false)
        end
    
        if selectedTab == 2 then
            dxDrawRoundedRectangle(recX, image3Y - 4, height, width, 3, tocolor(0, 149, 249, 50), false)
        end

        if selectedTab == 3 then
            dxDrawRoundedRectangle(recX, image4Y - 4, height, width, 3, tocolor(0, 149, 249, 50), false)
        end

        if selectedTab == 4 then
            dxDrawRoundedRectangle(recX, image5Y + 7, height, width, 3, tocolor(0, 149, 249, 50), false)
        end

        if selectedTab == 5 then
            dxDrawRoundedRectangle(recX, image6Y, height, width, 3, tocolor(0, 149, 249, 50), false)
        end

        if selectedTab == 6 then
            dxDrawRoundedRectangle(recX, image7Y - 4, height, width, 3, tocolor(0, 149, 249, 50), false)
        end

        if selectedTab == 7 then
            dxDrawRoundedRectangle(recX, image8Y - 2, height, width, 3, tocolor(0, 149, 249, 50), false)
        end

        if selectedTab == 8 then
            dxDrawRoundedRectangle(recX, image9Y - 6, height, width, 3, tocolor(0, 149, 249, 50), false)
        end
    end

    addEventHandler("onClientRender", root,
        function()
            if not SharkMenu then return end
        -- Calculando posições e tamanhos proporcionais
        local panelX, panelY, panelWidth, panelHeight = calculatePosition(742, 159, 698, 609)
        local sidePanelX, sidePanelY, sidePanelWidth, sidePanelHeight = calculatePosition(742, 159, 68, 609)
        local image1X, image1Y, image1Width, image1Height = calculatePosition(727, 159, 100, 74)
        local image2X, image2Y, image2Width, image2Height = calculatePosition(757, 233, 36, 36)
        local image3X, image3Y, image3Width, image3Height = calculatePosition(759, 295, 36, 36)
        local image4X, image4Y, image4Width, image4Height = calculatePosition(761, 352, 30, 30)
        local image5X, image5Y, image5Width, image5Height = calculatePosition(754, 393, 43, 56)
        local image6X, image6Y, image6Width, image6Height = calculatePosition(760, 458, 36, 40)
        local image7X, image7Y, image7Width, image7Height = calculatePosition(761, 523, 34, 34)
        local image8X, image8Y, image8Width, image8Height = calculatePosition(762, 576, 32, 34)
        local image9X, image9Y, image9Width, image9Height = calculatePosition(758, 637, 34, 29)
        local lineStartX, lineStartY = calculatePosition(817, 206, 1, 0) -- Apenas X para linha
        local lineEndX, lineEndY = calculatePosition(1440, 206, 1, 0) -- Apenas X para linha

        local defaultColor = tocolor(255, 255, 255, 255) -- Branco

        -- Cores específicas
        local specificColors = {
            [1] = tocolor(0, 149, 249, 255), -- Cor para a imagem 2 quando selectedTab é 1
            [2] = tocolor(0, 149, 249, 255)  -- Cor para a imagem 3 quando selectedTab é 2
        }

        local color2 = (selectedTab == 1) and specificColors[1] or defaultColor
        local color3 = (selectedTab == 2) and specificColors[1] or defaultColor
        local color4 = (selectedTab == 3) and specificColors[1] or defaultColor
        local color5 = (selectedTab == 4) and specificColors[1] or defaultColor
        local color6 = (selectedTab == 5) and specificColors[1] or defaultColor
        local color7 = (selectedTab == 6) and specificColors[1] or defaultColor
        local color8 = (selectedTab == 7) and specificColors[1] or defaultColor
        local color9 = (selectedTab == 8) and specificColors[1] or defaultColor

        dxDrawRoundedRectangle(panelX, panelY, panelWidth, panelHeight, 10, tocolor(16, 16, 16, 255), false)
        drawParticles()
        updateParticles()
        dxDrawRoundedRectangle(sidePanelX, sidePanelY, sidePanelWidth, sidePanelHeight, 10, tocolor(30, 30, 30, 210), false)
        drawTabImages()
        dxDrawImage(image1X, image1Y, image1Width, image1Height, background1, 0, 0, 0, tocolor(255, 255, 255, 255))
        dxDrawImage(image2X, image2Y, image2Width, image2Height, background2, 0, 0, 0, color2)
        dxDrawImage(image3X, image3Y, image3Width, image3Height, background3, 0, 0, 0, color3)
        dxDrawImage(image4X, image4Y, image4Width, image4Height, background4, 0, 0, 0, color4)
        dxDrawImage(image5X, image5Y, image5Width, image5Height, background5, 0, 0, 0, color5)
        dxDrawImage(image6X, image6Y, image6Width, image6Height, background6, 0, 0, 0, color6)
        dxDrawImage(image7X, image7Y, image7Width, image7Height, background7, 0, 0, 0, color7)
        dxDrawImage(image8X, image8Y, image8Width, image8Height, background8, 0, 0, 0, color8)
        dxDrawImage(image9X, image9Y, image9Width, image9Height, background9, 0, 0, 0, color9)
        dxDrawLine(lineStartX, lineStartY, lineEndX, lineEndY, tocolor(63, 63, 63, 255), 1, false)
            drawPlayerName()

            drawSnake2(panelX, panelY, panelWidth, panelHeight)
            
            if selectedTab == 1 and IsTab1Visible == 1 then
                local textJogadorX, textJogadorY, textJogadorWidth, textJogadorHeight = calculatePosition(827, 170, 72, 26)
                local textOutrosX, textOutrosY, textOutrosWidth, textOutrosHeight = calculatePosition(917, 170, 72, 26)
                local textRoupasX, textRoupasY, textRoupasWidth, textRoupasHeight = calculatePosition(1008, 170, 72, 26)
                local rect1X, rect1Y, rect1Width, rect1Height = calculatePosition(816, 224, 614, 50)
                local rect2X, rect2Y, rect2Width, rect2Height = calculatePosition(816, 281, 614, 50)
                local textGodModeX, textGodModeY, textGodModeWidth, textGodModeHeight = calculatePosition(819, 229, 74, 22)
                local textGodModeDescX, textGodModeDescY, textGodModeDescWidth, textGodModeDescHeight = calculatePosition(820, 251, 123, 20)
                local rect3X, rect3Y, rect3Width, rect3Height = calculatePosition(816, 338, 614, 50)
                local textAntiFogoX, textAntiFogoY, textAntiFogoWidth, textAntiFogoHeight = calculatePosition(820, 284, 73, 22)
                local textAntiFogoDescX, textAntiFogoDescY, textAntiFogoDescWidth, textAntiFogoDescHeight = calculatePosition(820, 308, 144, 20)
                local textNoRagDollX, textNoRagDollY, textNoRagDollWidth, textNoRagDollHeight = calculatePosition(820, 341, 84, 20)
                local textNoRagDollDescX, textNoRagDollDescY, textNoRagDollDescWidth, textNoRagDollDescHeight = calculatePosition(820, 361, 191, 27)
                local rect4X, rect4Y, rect4Width, rect4Height = calculatePosition(816, 398, 614, 50)
                local textInvisivelX, textInvisivelY, textInvisivelWidth, textInvisivelHeight = calculatePosition(820, 402, 111, 20)
                local textInvisivelDescX, textInvisivelDescY, textInvisivelDescWidth, textInvisivelDescHeight = calculatePosition(820, 422, 137, 26)
                local rect5X, rect5Y, rect5Width, rect5Height = calculatePosition(816, 458, 614, 50)
                local textStaminaX, textStaminaY, textStaminaWidth, textStaminaHeight = calculatePosition(820, 462, 111, 20)
                local textStaminaDescX, textStaminaDescY, textStaminaDescWidth, textStaminaDescHeight = calculatePosition(820, 482, 175, 26)
                local rect6X, rect6Y, rect6Width, rect6Height = calculatePosition(816, 518, 614, 50)
                local textReviverX, textReviverY, textReviverWidth, textReviverHeight = calculatePosition(820, 523, 53, 20)
                local textReviverDescX, textReviverDescY, textReviverDescWidth, textReviverDescHeight = calculatePosition(820, 542, 132, 26)
                local rect7X, rect7Y, rect7Width, rect7Height = calculatePosition(816, 578, 614, 50)
                local textColetX, textColetY, textColetWidth, textColetHeight = calculatePosition(820, 582, 48, 20)
                local textColetDescX, textColetDescY, textColetDescWidth, textColetDescHeight = calculatePosition(820, 602, 149, 26)
                local rect8X, rect8Y, rect8Width, rect8Height = calculatePosition(816, 638, 614, 50)
                local textSuicidioX, textSuicidioY, textSuicidioWidth, textSuicidioHeight = calculatePosition(820, 643, 63, 20)
                local textSuicidioDescX, textSuicidioDescY, textSuicidioDescWidth, textSuicidioDescHeight = calculatePosition(820, 662, 76, 26)
                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda
            
                -- Desenhando o painel com as posições e tamanhos proporcionais
                dxDrawText("Jogador", textJogadorX, textJogadorY, textJogadorX + textJogadorWidth, textJogadorY + textJogadorHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Outros", textOutrosX, textOutrosY, textOutrosX + textOutrosWidth, textOutrosY + textOutrosHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Roupas", textRoupasX, textRoupasY, textRoupasX + textRoupasWidth, textRoupasY + textRoupasHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect1X, rect1Y, rect1Width, rect1Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                drawRectangleWithBorder(rect2X, rect2Y, rect2Width, rect2Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("GodMode", textGodModeX, textGodModeY, textGodModeX + textGodModeWidth, textGodModeY + textGodModeHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você ficará imortal.", textGodModeDescX, textGodModeDescY, textGodModeDescX + textGodModeDescWidth, textGodModeDescY + textGodModeDescHeight, tocolor(94, 94, 94, 255), 1.0, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect3X, rect3Y, rect3Width, rect3Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Anti Fogo", textAntiFogoX, textAntiFogoY, textAntiFogoX + textAntiFogoWidth, textAntiFogoY + textAntiFogoHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você não pegará fogo.", textAntiFogoDescX, textAntiFogoDescY, textAntiFogoDescX + textAntiFogoDescWidth, textAntiFogoDescY + textAntiFogoDescHeight, tocolor(94, 94, 94, 255), 1.0, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("No RagDoll", textNoRagDollX, textNoRagDollY, textNoRagDollX + textNoRagDollWidth, textNoRagDollY + textNoRagDollHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você não irá ficar em ragdoll.", textNoRagDollDescX, textNoRagDollDescY, textNoRagDollDescX + textNoRagDollDescWidth, textNoRagDollDescY + textNoRagDollDescHeight, tocolor(94, 94, 94, 255), 1.0, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect4X, rect4Y, rect4Width, rect4Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Invisivel [Visual]", textInvisivelX, textInvisivelY, textInvisivelX + textInvisivelWidth, textInvisivelY + textInvisivelHeight, tocolor(255, 255, 255, 255), 1.2, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você ficará invisível.", textInvisivelDescX, textInvisivelDescY, textInvisivelDescX + textInvisivelDescWidth, textInvisivelDescY + textInvisivelDescHeight, tocolor(94, 94, 94, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect5X, rect5Y, rect5Width, rect5Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Stamina Infinita", textStaminaX, textStaminaY, textStaminaX + textStaminaWidth, textStaminaY + textStaminaHeight, tocolor(255, 255, 255, 255), 1.2, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Sua stamina ficará infinita.", textStaminaDescX, textStaminaDescY, textStaminaDescX + textStaminaDescWidth, textStaminaDescY + textStaminaDescHeight, tocolor(94, 94, 94, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect6X, rect6Y, rect6Width, rect6Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Reviver", textReviverX, textReviverY, textReviverX + textReviverWidth, textReviverY + textReviverHeight, tocolor(255, 255, 255, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você voltará a vida.", textReviverDescX, textReviverDescY, textReviverDescX + textReviverDescWidth, textReviverDescY + textReviverDescHeight, tocolor(94, 94, 94, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect7X, rect7Y, rect7Width, rect7Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Colete", textColetX, textColetY, textColetX + textColetWidth, textColetY + textColetHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você receberá colete.", textColetDescX, textColetDescY, textColetDescX + textColetDescWidth, textColetDescY + textColetDescHeight, tocolor(94, 94, 94, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect8X, rect8Y, rect8Width, rect8Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Suicídio", textSuicidioX, textSuicidioY, textSuicidioX + textSuicidioWidth, textSuicidioY + textSuicidioHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você irá se Suicidar.", textSuicidioDescX, textSuicidioDescY, textSuicidioDescX + textSuicidioDescWidth, textSuicidioDescY + textSuicidioDescHeight, tocolor(94, 94, 94, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
    
                drawAllSwitches0()
    
                drawScrollbar()
    
            elseif selectedTab == 1 and IsTab1Visible == 2 then
                local textJogadorX, textJogadorY, textJogadorWidth, textJogadorHeight = calculatePosition(827, 170, 72, 26)
                local textOutrosX, textOutrosY, textOutrosWidth, textOutrosHeight = calculatePosition(917, 170, 72, 26)
                local textRoupasX, textRoupasY, textRoupasWidth, textRoupasHeight = calculatePosition(1008, 170, 72, 26)
                local rect1X, rect1Y, rect1Width, rect1Height = calculatePosition(816, 224, 614, 50)
                local rect2X, rect2Y, rect2Width, rect2Height = calculatePosition(816, 281, 614, 50)
                local textNoclipX, textNoclipY, textNoclipWidth, textNoclipHeight = calculatePosition(820, 229, 73, 22)
                local textNoclipDescX, textNoclipDescY, textNoclipDescWidth, textNoclipDescHeight = calculatePosition(820, 251, 123, 20)
                local rect3X, rect3Y, rect3Width, rect3Height = calculatePosition(816, 338, 614, 50)
                local textVelocidadeX, textVelocidadeY, textVelocidadeWidth, textVelocidadeHeight = calculatePosition(820, 284, 73, 22)
                local textVelocidadeDescX, textVelocidadeDescY, textVelocidadeDescWidth, textVelocidadeDescHeight = calculatePosition(820, 308, 144, 20)
                local textFreecamX, textFreecamY, textFreecamWidth, textFreecamHeight = calculatePosition(820, 341, 72, 22)
                local textFreecamDescX, textFreecamDescY, textFreecamDescWidth, textFreecamDescHeight = calculatePosition(820, 361, 191, 27)

                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda

                -- Desenhando o painel com as posições e tamanhos proporcionais
                dxDrawText("Jogador", textJogadorX, textJogadorY, textJogadorX + textJogadorWidth, textJogadorY + textJogadorHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Outros", textOutrosX, textOutrosY, textOutrosX + textOutrosWidth, textOutrosY + textOutrosHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Roupas", textRoupasX, textRoupasY, textRoupasX + textRoupasWidth, textRoupasY + textRoupasHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect1X, rect1Y, rect1Width, rect1Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                drawRectangleWithBorder(rect2X, rect2Y, rect2Width, rect2Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Noclip [CAPS]", textNoclipX, textNoclipY, textNoclipX + textNoclipWidth, textNoclipY + textNoclipHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você poderá voar.", textNoclipDescX, textNoclipDescY, textNoclipDescX + textNoclipDescWidth, textNoclipDescY + textNoclipDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect3X, rect3Y, rect3Width, rect3Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Velocidade", textVelocidadeX, textVelocidadeY, textVelocidadeX + textVelocidadeWidth, textVelocidadeY + textVelocidadeHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Velocidade do Noclip.", textVelocidadeDescX, textVelocidadeDescY, textVelocidadeDescX + textVelocidadeDescWidth, textVelocidadeDescY + textVelocidadeDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Freecam", textFreecamX, textFreecamY, textFreecamX + textFreecamWidth, textFreecamY + textFreecamHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você terá uma câmera livre.", textFreecamDescX, textFreecamDescY, textFreecamDescX + textFreecamDescWidth, textFreecamDescY + textFreecamDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                drawScrollbar2()
                for i, switch in ipairs(switches7) do
                    drawSwitch7(switch.x, switch.y, switch.width, switch.height, switch.state)
                end
            elseif selectedTab == 1 and IsTab1Visible == 3 then
                local textJogadorX, textJogadorY, textJogadorWidth, textJogadorHeight = calculatePosition(827, 170, 72, 26)
                local textOutrosX, textOutrosY, textOutrosWidth, textOutrosHeight = calculatePosition(917, 170, 72, 26)
                local textRoupasX, textRoupasY, textRoupasWidth, textRoupasHeight = calculatePosition(1008, 170, 72, 26)
                local rect1X, rect1Y, rect1Width, rect1Height = calculatePosition(816, 224, 614, 50)
                local textMudarSkinX, textMudarSkinY, textMudarSkinWidth, textMudarSkinHeight = calculatePosition(820, 229, 73, 22)
                local textMudarSkinDescX, textMudarSkinDescY, textMudarSkinDescWidth, textMudarSkinDescHeight = calculatePosition(820, 251, 123, 20)
                local rect2X, rect2Y, rect2Width, rect2Height = calculatePosition(816, 281, 614, 50)
                local textCopiarSkinX, textCopiarSkinY, textCopiarSkinWidth, textCopiarSkinHeight = calculatePosition(820, 284, 73, 22)
                local textCopiarSkinDescX, textCopiarSkinDescY, textCopiarSkinDescWidth, textCopiarSkinDescHeight = calculatePosition(820, 308, 144, 20)
                local rect3X, rect3Y, rect3Width, rect3Height = calculatePosition(846, 380, 283, 343)

                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda
            
                -- Desenhando o painel com as posições e tamanhos proporcionais
                dxDrawText("Jogador", textJogadorX, textJogadorY, textJogadorX + textJogadorWidth, textJogadorY + textJogadorHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Outros", textOutrosX, textOutrosY, textOutrosX + textOutrosWidth, textOutrosY + textOutrosHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Roupas", textRoupasX, textRoupasY, textRoupasX + textRoupasWidth, textRoupasY + textRoupasHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect1X, rect1Y, rect1Width, rect1Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                drawRectangleWithBorder(rect2X, rect2Y, rect2Width, rect2Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Mudar Skin", textMudarSkinX, textMudarSkinY, textMudarSkinX + textMudarSkinWidth, textMudarSkinY + textMudarSkinHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você poderá mudar sua skin.", textMudarSkinDescX, textMudarSkinDescY, textMudarSkinDescX + textMudarSkinDescWidth, textMudarSkinDescY + textMudarSkinDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect3X, rect3Y, rect3Width, rect3Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Copiar Skin", textCopiarSkinX, textCopiarSkinY, textCopiarSkinX + textCopiarSkinWidth, textCopiarSkinY + textCopiarSkinHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você poderá copiar skin de players.", textCopiarSkinDescX, textCopiarSkinDescY, textCopiarSkinDescX + textCopiarSkinDescWidth, textCopiarSkinDescY + textCopiarSkinDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
    
                drawScrollbar1()
                
           
            elseif selectedTab == 2 and IsTab1Visible2 == 1 then
                local textAimbotX, textAimbotY, textAimbotWidth, textAimbotHeight = calculatePosition(827, 170, 72, 26)
                local textOutrosX, textOutrosY, textOutrosWidth, textOutrosHeight = calculatePosition(917, 170, 72, 26)
                local rect1X, rect1Y, rect1Width, rect1Height = calculatePosition(816, 224, 614, 50)
                local rect2X, rect2Y, rect2Width, rect2Height = calculatePosition(816, 281, 614, 50)
                local textAimbotDescX, textAimbotDescY, textAimbotDescWidth, textAimbotDescHeight = calculatePosition(820, 229, 73, 22)
                local textAimbotDescTextX, textAimbotDescTextY, textAimbotDescTextWidth, textAimbotDescTextHeight = calculatePosition(820, 251, 123, 20)
                local rect3X, rect3Y, rect3Width, rect3Height = calculatePosition(816, 338, 614, 50)
                local textFOVX, textFOVY, textFOVWidth, textFOVHeight = calculatePosition(820, 284, 73, 22)
                local textFOVDescX, textFOVDescY, textFOVDescWidth, textFOVDescHeight = calculatePosition(819, 308, 145, 20)
                local textShowFOVX, textShowFOVY, textShowFOVWidth, textShowFOVHeight = calculatePosition(820, 341, 84, 20)
                local textShowFOVDescX, textShowFOVDescY, textShowFOVDescWidth, textShowFOVDescHeight = calculatePosition(820, 361, 191, 27)
                local rect4X, rect4Y, rect4Width, rect4Height = calculatePosition(816, 398, 614, 50)
                local textIncludePedsX, textIncludePedsY, textIncludePedsWidth, textIncludePedsHeight = calculatePosition(820, 402, 111, 20)
                local textIncludePedsDescX, textIncludePedsDescY, textIncludePedsDescWidth, textIncludePedsDescHeight = calculatePosition(820, 422, 137, 26)
                local rect5X, rect5Y, rect5Width, rect5Height = calculatePosition(816, 458, 614, 50)
                local textChangeFOVColorX, textChangeFOVColorY, textChangeFOVColorWidth, textChangeFOVColorHeight = calculatePosition(820, 462, 131, 20)
                local textChangeFOVColorDescX, textChangeFOVColorDescY, textChangeFOVColorDescWidth, textChangeFOVColorDescHeight = calculatePosition(820, 482, 175, 26)
                local rect6X, rect6Y, rect6Width, rect6Height = calculatePosition(816, 518, 614, 50)
                local textCheckVisibilityX, textCheckVisibilityY, textCheckVisibilityWidth, textCheckVisibilityHeight = calculatePosition(820, 523, 124, 20)
                local textCheckVisibilityDescX, textCheckVisibilityDescY, textCheckVisibilityDescWidth, textCheckVisibilityDescHeight = calculatePosition(820, 542, 132, 26)
            
                -- Desenhando o painel com as posições e tamanhos proporcionais
                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda
                dxDrawText("Aimbot", textAimbotX, textAimbotY, textAimbotX + textAimbotWidth, textAimbotY + textAimbotHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Outros", textOutrosX, textOutrosY, textOutrosX + textOutrosWidth, textOutrosY + textOutrosHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect1X, rect1Y, rect1Width, rect1Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                drawRectangleWithBorder(rect2X, rect2Y, rect2Width, rect2Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Aimbot", textAimbotDescX, textAimbotDescY, textAimbotDescX + textAimbotDescWidth, textAimbotDescY + textAimbotDescHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Ativar/desativar Aimbot.", textAimbotDescTextX, textAimbotDescTextY, textAimbotDescTextX + textAimbotDescWidth, textAimbotDescTextY + textAimbotDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect3X, rect3Y, rect3Width, rect3Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("FOV do Aimbot", textFOVX, textFOVY, textFOVX + textFOVWidth, textFOVY + textFOVHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Area onde o Aimbot irá pegar.", textFOVDescX, textFOVDescY, textFOVDescX + textFOVDescWidth, textFOVDescY + textFOVDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Mostrar FOV", textShowFOVX, textShowFOVY, textShowFOVX + textShowFOVWidth, textShowFOVY + textShowFOVHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Mostra a área onde o Aimbot irá pegar.", textShowFOVDescX, textShowFOVDescY, textShowFOVDescX + textShowFOVDescWidth, textShowFOVDescY + textShowFOVDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect4X, rect4Y, rect4Width, rect4Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Incluir Peds", textIncludePedsX, textIncludePedsY, textIncludePedsX + textIncludePedsWidth, textIncludePedsY + textIncludePedsHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Inclui os peds no Aimbot.", textIncludePedsDescX, textIncludePedsDescY, textIncludePedsDescX + textIncludePedsDescWidth, textIncludePedsDescY + textIncludePedsDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect5X, rect5Y, rect5Width, rect5Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Mudar a cor do FOV", textChangeFOVColorX, textChangeFOVColorY, textChangeFOVColorX + textChangeFOVColorWidth, textChangeFOVColorY + textChangeFOVColorHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Mudar a cor do FOV da sua tela.", textChangeFOVColorDescX, textChangeFOVColorDescY, textChangeFOVColorDescX + textChangeFOVColorDescWidth, textChangeFOVColorDescY + textChangeFOVColorDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect6X, rect6Y, rect6Width, rect6Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Verificar visibilidade", textCheckVisibilityX, textCheckVisibilityY, textCheckVisibilityX + textCheckVisibilityWidth, textCheckVisibilityY + textCheckVisibilityHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Verifica se o alvo está visível.", textCheckVisibilityDescX, textCheckVisibilityDescY, textCheckVisibilityDescX + textCheckVisibilityDescWidth, textCheckVisibilityDescY + textCheckVisibilityDescHeight, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
    
                drawAllSwitches2()
    
                drawScrollbar4()
            elseif selectedTab == 2 and IsTab1Visible2 == 2 then
                local textAimbotX, textAimbotY, textAimbotWidth, textAimbotHeight = calculatePosition(827, 170, 72, 26)
                local textOutrosX, textOutrosY, textOutrosWidth, textOutrosHeight = calculatePosition(917, 170, 72, 26)
                local rect1X, rect1Y, rect1Width, rect1Height = calculatePosition(816, 224, 614, 50)
                local rect2X, rect2Y, rect2Width, rect2Height = calculatePosition(816, 281, 614, 50)
                local rect3X, rect3Y, rect3Width, rect3Height = calculatePosition(816, 338, 614, 50)
                local textTracerColorX, textTracerColorY, textTracerColorWidth, textTracerColorHeight = calculatePosition(820, 341, 84, 20)
                local textTracerColorDescX, textTracerColorDescY, textTracerColorDescWidth, textTracerColorDescHeight = calculatePosition(820, 361, 191, 27)
                local textFastReloadX, textFastReloadY, textFastReloadWidth, textFastReloadHeight = calculatePosition(820, 229, 73, 22)
                local textFastReloadDescX, textFastReloadDescY, textFastReloadDescWidth, textFastReloadDescHeight = calculatePosition(820, 251, 123, 20)
                local textBulletTracerX, textBulletTracerY, textBulletTracerWidth, textBulletTracerHeight = calculatePosition(820, 284, 73, 22)
                local textBulletTracerDescX, textBulletTracerDescY, textBulletTracerDescWidth, textBulletTracerDescHeight = calculatePosition(820, 308, 144, 20)
                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda
            
                -- Desenhando o painel com as posições e tamanhos proporcionais
                dxDrawText("Aimbot", textAimbotX, textAimbotY, textAimbotX + textAimbotWidth, textAimbotY + textAimbotHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Outros", textOutrosX, textOutrosY, textOutrosX + textOutrosWidth, textOutrosY + textOutrosHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                drawRectangleWithBorder(rect1X, rect1Y, rect1Width, rect1Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                drawRectangleWithBorder(rect2X, rect2Y, rect2Width, rect2Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                drawRectangleWithBorder(rect3X, rect3Y, rect3Width, rect3Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Mudar a cor dos traçante", textTracerColorX, textTracerColorY, textTracerColorX + textTracerColorWidth, textTracerColorY + textTracerColorHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você poderá escolher a cor do traçante.", textTracerColorDescX, textTracerColorDescY, textTracerColorDescX + textTracerColorDescWidth, textTracerColorDescY + textTracerColorDescHeight, tocolor(94, 94, 94, 255), 1.0, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Fast Reload", textFastReloadX, textFastReloadY, textFastReloadX + textFastReloadWidth, textFastReloadY + textFastReloadHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você recarregará a arma mais rápido.", textFastReloadDescX, textFastReloadDescY, textFastReloadDescX + textFastReloadDescWidth, textFastReloadDescY + textFastReloadDescHeight, tocolor(94, 94, 94, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Bullet Tracer", textBulletTracerX, textBulletTracerY, textBulletTracerX + textBulletTracerWidth, textBulletTracerY + textBulletTracerHeight, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Cria traçantes nos tiros das armas.", textBulletTracerDescX, textBulletTracerDescY, textBulletTracerDescX + textBulletTracerDescWidth, textBulletTracerDescY + textBulletTracerDescHeight, tocolor(94, 94, 94, 255), 1, "default-bold", "left", "center", false, false, false, false, false)
    
                drawAllSwitches3()

            elseif selectedTab == 3 then
                local textX, textY, textW, textH = calculatePosition(827, 170, 899, 196)
                dxDrawText("Vehicles", textX, textY, textW, textH, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)

                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda
                
                local rectX, rectY, rectW, rectH = calculatePosition(827, 196, 70, 5)
                drawRectangleWithBorder(rectX, rectY, rectW, rectH, tocolor(0, 149, 249, 255), borderColor, borderWidth)
            
                local rect1X, rect1Y, rect1W, rect1H = calculatePosition(816, 224, 614, 50)
                drawRectangleWithBorder(rect1X, rect1Y, rect1W, rect1H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                
                local text1X, text1Y, text1W, text1H = calculatePosition(820, 229, 893, 251)
                dxDrawText("Reparar Veículo", text1X, text1Y, text1W, text1H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você repará o seu veículo por completo.", text1X, text1Y + 22, text1W, text1H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
            
                local rect2X, rect2Y, rect2W, rect2H = calculatePosition(816, 281, 614, 50)
                drawRectangleWithBorder(rect2X, rect2Y, rect2W, rect2H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
            
                local text2X, text2Y, text2W, text2H = calculatePosition(820, 284, 893, 308)
                dxDrawText("Quebrar Motor", text2X, text2Y, text2W, text2H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você quebrará o motor do seu veículo.", text2X, text2Y + 22, text2W, text2H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
            
                local rect3X, rect3Y, rect3W, rect3H = calculatePosition(816, 338, 614, 50)
                drawRectangleWithBorder(rect3X, rect3Y, rect3W, rect3H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
            
                local text3X, text3Y, text3W, text3H = calculatePosition(820, 341, 904, 361)
                dxDrawText("Teleportar Até um Veículo", text3X, text3Y, text3W, text3H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você irá teleportar até um carro vazio.", text3X, text3Y + 22, text3W, text3H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
            
                local rect4X, rect4Y, rect4W, rect4H = calculatePosition(816, 398, 614, 50)
                drawRectangleWithBorder(rect4X, rect4Y, rect4W, rect4H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local text4X, text4Y, text4W, text4H = calculatePosition(820, 402, 931, 422)
                dxDrawText("Tunar Veículo", text4X, text4Y, text4W, text4H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você vai tunar seu veículo ao maximo.", text4X, text4Y + 22, text4W, text4H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
            
                local rect5X, rect5Y, rect5W, rect5H = calculatePosition(816, 458, 614, 50)
                drawRectangleWithBorder(rect5X, rect5Y, rect5W, rect5H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect6X, rect6Y, rect6W, rect6H = calculatePosition(816, 515, 614, 50)
                drawRectangleWithBorder(rect6X, rect6Y, rect6W, rect6H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect8X, rect8Y, rect8W, rect8H = calculatePosition(816, 571, 614, 50)
                drawRectangleWithBorder(rect8X, rect8Y, rect8W, rect8H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect9X, rect9Y, rect9W, rect9H = calculatePosition(816, 627, 614, 50)
                drawRectangleWithBorder(rect9X, rect9Y, rect9W, rect9H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect10X, rect10Y, rect10W, rect10H = calculatePosition(816, 683, 614, 50)
                drawRectangleWithBorder(rect10X, rect10Y, rect10W, rect10H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
            
                local text5X, text5Y, text5W, text5H = calculatePosition(820, 462, 931, 482)
                dxDrawText("Blindar Veículo", text5X, text5Y, text5W, text5H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você blindará seu veículo.", text5X, text5Y + 22, text5W, text5H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                local text5X, text5Y, text5W, text5H = calculatePosition(820, 580, 931, 482)
                dxDrawText("Mudar Modelo", text5X, text5Y, text5W, text5H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você mudará o modelo do seu veículo.", text5X, text5Y + 22, text5W, text5H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                local text8X, text8Y, text8W, text8H = calculatePosition(820, 695, 931, 482)
                dxDrawText("Valor do Modelo", text8X, text8Y, text8W, text8H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você mudará o valor modelo.", text8X, text8Y + 22, text8W, text8H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                local text9X, text9Y, text9W, text9H = calculatePosition(820, 805, 931, 482)
                dxDrawText("Mudar Modelo Proximo", text9X, text9Y, text9W, text9H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você mudará o modelo do carro mais proximo.", text9X, text9Y + 22, text9W, text9H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                local text10X, text10Y, text10W, text10H = calculatePosition(820, 910, 931, 482)
                dxDrawText("Trollar Veículos Proximo", text10X, text10Y, text10W, text10H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você irá aplicar um efeito troll em veículos proximos.", text10X, text10Y + 22, text10W, text10H + 20, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                    drawScrollbar9()
            elseif selectedTab == 4 then
                local textX, textY, textW, textH = calculatePosition(827, 170, 899, 196)
                dxDrawText("Players", textX, textY, textW, textH, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                
                local rectX, rectY, rectW, rectH = calculatePosition(827, 196, 70, 5)
                dxDrawRectangle(rectX, rectY, rectW, rectH, tocolor(0, 149, 249, 255), false)

                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda

                local rect1X, rect1Y, rect1W, rect1H = calculatePosition(1158, 389, 259, 39)
                drawRectangleWithBorder(rect1X, rect1Y, rect1W, rect1H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
            
                local text1X, text1Y, text1W, text1H = calculatePosition(1158, 389, 1417, 429)
                dxDrawText("Teleportar", text1X, text1Y, text1W, text1H, tocolor(254, 254, 254, 255), 1.50, "default", "center", "center", false, false, false, false, false)
            
                local rect2X, rect2Y, rect2W, rect2H = calculatePosition(1158, 450, 259, 39)
                drawRectangleWithBorder(rect2X, rect2Y, rect2W, rect2H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
            
                local rect3X, rect3Y, rect3W, rect3H = calculatePosition(1158, 510, 259, 39)
                drawRectangleWithBorder(rect3X, rect3Y, rect3W, rect3H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect4X, rect4Y, rect4W, rect4H = calculatePosition(1159, 574, 259, 39)
                drawRectangleWithBorder(rect4X, rect4Y, rect4W, rect4H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect5X, rect5Y, rect5W, rect5H = calculatePosition(1159, 638, 259, 39)
                drawRectangleWithBorder(rect5X, rect5Y, rect5W, rect5H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
            
                local text2X, text2Y, text2W, text2H = calculatePosition(1158, 449, 1417, 489)
                dxDrawText("Spectar", text2X, text2Y, text2W, text2H, tocolor(254, 254, 254, 255), 1.50, "default", "center", "center", false, false, false, false, false)
            
                local text3X, text3Y, text3W, text3H = calculatePosition(1158, 509, 1417, 549)
                dxDrawText("Fumaça", text3X, text3Y, text3W, text3H, tocolor(254, 254, 254, 255), 1.50, "default", "center", "center", false, false, false, false, false)

                dxDrawText("Fuck Player", rect4X, rect4Y, 1418, 613, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)

                dxDrawText("Grudar Veículo", rect5X, rect5Y + 66, 1418, 613, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
            elseif selectedTab == 5 then
                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda

                local rect1X, rect1Y, rect1Width, rect1Height = calculatePosition(1270, 240, 138, 46)
                local rect2X, rect2Y, rect2Width, rect2Height = calculatePosition(1270, 320, 138, 46)
                local rect3X, rect3Y, rect3Width, rect3Height = calculatePosition(822, 217, 429, 543)
                local text1X, text1Y, text1W, text1H = calculatePosition(1269, 239, 1408, 285)
                local text2X, text2Y, text2W, text2H = calculatePosition(1269, 320, 1408, 366)
                local lineX, lineY, lineW, lineH = calculatePosition(828, 196, 70, 5)
                dxDrawRectangle(lineX, lineY, lineW, lineH, tocolor(0, 149, 249, 255), false)

                dxDrawRoundedRectangle(rect3X, rect3Y, rect3Width, rect3Height, 7, tocolor(60, 0, 255, 255), false)
                local textAimbotX, textAimbotY, textAimbotWidth, textAimbotHeight = calculatePosition(827, 170, 72, 26)
                dxDrawText("Executor", textAimbotX, textAimbotY, textAimbotX + textAimbotWidth, textAimbotY + textAimbotHeight, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                
                drawRectangleWithBorder(rect1X, rect1Y, rect1Width, rect1Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                drawRectangleWithBorder(rect2X, rect2Y, rect2Width, rect2Height, tocolor(16, 16, 16, 210), borderColor, borderWidth)
                dxDrawText("Executar", text1X, text1Y, text1W, text1H, tocolor(255, 255, 255, 255), 1.30, "default", "center", "center", false, false, false, false, false)
                dxDrawText("Limpar", text2X, text2Y, text2W, text2H, tocolor(255, 255, 255, 255), 1.30, "default", "center", "center", false, false, false, false, false)

            elseif selectedTab == 6 then
                local textX, textY, textW, textH = calculatePosition(805, 170, 899, 196)
                dxDrawText("ESP", textX, textY, textW, textH, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
            
                -- Desenhar a linha azul
                local lineX, lineY, lineW, lineH = calculatePosition(820, 196, 70, 5)
                dxDrawRectangle(lineX, lineY, lineW, lineH, tocolor(0, 149, 249, 255), false)
            
                -- Desenhar os retângulos de fundo
                local rect1X, rect1Y, rect1W, rect1H = calculatePosition(827, 220, 308, 296)
                dxDrawRectangle(rect1X, rect1Y, rect1W, rect1H, tocolor(30, 30, 30, 210), false)
            
                local rect2X, rect2Y, rect2W, rect2H = calculatePosition(1145, 220, 285, 211)
                dxDrawRectangle(rect2X, rect2Y, rect2W, rect2H, tocolor(30, 30, 30, 210), false)
            
                local rect3X, rect3Y, rect3W, rect3H = calculatePosition(827, 526, 308, 156)
                dxDrawRectangle(rect3X, rect3Y, rect3W, rect3H, tocolor(30, 30, 30, 210), false)
            
                -- Desenhar as linhas de fundo azul
                local lineBg1X, lineBg1Y, lineBg1W, lineBg1H = calculatePosition(827, 220, 308, 32)
                dxDrawRectangle(lineBg1X, lineBg1Y, lineBg1W, lineBg1H, tocolor(0, 149, 249, 78), false)
            
                local lineBg2X, lineBg2Y, lineBg2W, lineBg2H = calculatePosition(1145, 220, 285, 32)
                dxDrawRectangle(lineBg2X, lineBg2Y, lineBg2W, lineBg2H, tocolor(0, 149, 249, 78), false)
            
                local lineBg3X, lineBg3Y, lineBg3W, lineBg3H = calculatePosition(827, 526, 308, 32)
                dxDrawRectangle(lineBg3X, lineBg3Y, lineBg3W, lineBg3H, tocolor(0, 149, 249, 78), false)

                local lineBg4X, lineBg4Y, lineBg4W, lineBg4H = calculatePosition(1145, 450, 285, 32)
                dxDrawRectangle(lineBg4X, lineBg4Y, lineBg4W, lineBg4H, tocolor(0, 149, 249, 78), false)
            
                -- Desenhar os textos
                local enableTextX, enableTextY, enableTextW, enableTextH = calculatePosition(837, 262, 889, 281)
                dxDrawText("Enable", enableTextX, enableTextY, enableTextW, enableTextH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espNamesX, espNamesY, espNamesW, espNamesH = calculatePosition(837, 297, 937, 320)
                dxDrawText("ESP Names", espNamesX, espNamesY, espNamesW, espNamesH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espHealthbarX, espHealthbarY, espHealthbarW, espHealthbarH = calculatePosition(837, 330, 960, 353)
                dxDrawText("ESP Healthbar", espHealthbarX, espHealthbarY, espHealthbarW, espHealthbarH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espSkeletonX, espSkeletonY, espSkeletonW, espSkeletonH = calculatePosition(837, 368, 950, 391)
                dxDrawText("ESP Skeleton", espSkeletonX, espSkeletonY, espSkeletonW, espSkeletonH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espLinesX, espLinesY, espLinesW, espLinesH = calculatePosition(837, 405, 926, 427)
                dxDrawText("ESP Lines", espLinesX, espLinesY, espLinesW, espLinesH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espBoxX, espBoxY, espBoxW, espBoxH = calculatePosition(837, 442, 916, 465)
                dxDrawText("ESP Box", espBoxX, espBoxY, espBoxW, espBoxH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espCornerX, espCornerY, espCornerW, espCornerH = calculatePosition(837, 479, 960, 502)
                dxDrawText("ESP Corner", espCornerX, espCornerY, espCornerW, espCornerH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espTextX, espTextY, espTextW, espTextH = calculatePosition(861, 224, 895, 247)
                dxDrawText("ESP", espTextX, espTextY, espTextW, espTextH, tocolor(255, 255, 255, 255), 1.50, "default", "left", "top", false, false, false, false, false)
            
                local administratorsTextX, administratorsTextY, administratorsTextW, administratorsTextH = calculatePosition(864, 530, 985, 553)
                dxDrawText("Administrators", administratorsTextX, administratorsTextY, administratorsTextW, administratorsTextH, tocolor(255, 255, 255, 255), 1.50, "default", "left", "top", false, false, false, false, false)
            
                local settingsTextX, settingsTextY, settingsTextW, settingsTextH = calculatePosition(1182, 225, 1216, 248)
                dxDrawText("Settings", settingsTextX, settingsTextY, settingsTextW, settingsTextH, tocolor(255, 255, 255, 255), 1.50, "default", "left", "top", false, false, false, false, false)
            
                local espSkeletonAdminX, espSkeletonAdminY, espSkeletonAdminW, espSkeletonAdminH = calculatePosition(837, 576, 950, 599)
                dxDrawText("ESP Skeleton", espSkeletonAdminX, espSkeletonAdminY, espSkeletonAdminW, espSkeletonAdminH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local espLinesAdminX, espLinesAdminY, espLinesAdminW, espLinesAdminH = calculatePosition(837, 609, 926, 631)
                dxDrawText("ESP Lines", espLinesAdminX, espLinesAdminY, espLinesAdminW, espLinesAdminH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local showListTextX, showListTextY, showListTextW, showListTextH = calculatePosition(837, 641, 936, 663)
                dxDrawText("Mostrar Lista", showListTextX, showListTextY, showListTextW, showListTextH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local distanceTextX, distanceTextY, distanceTextW, distanceTextH = calculatePosition(1155, 262, 1232, 281)
                dxDrawText("Distance", distanceTextX, distanceTextY, distanceTextW, distanceTextH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local namesTextOutlineX, namesTextOutlineY, namesTextOutlineW, namesTextOutlineH = calculatePosition(1155, 298, 1321, 317)
                dxDrawText("Names Text Outline", namesTextOutlineX, namesTextOutlineY, namesTextOutlineW, namesTextOutlineH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local showDistanceTextX, showDistanceTextY, showDistanceTextW, showDistanceTextH = calculatePosition(1155, 333, 1284, 352)
                dxDrawText("Show Distance", showDistanceTextX, showDistanceTextY, showDistanceTextW, showDistanceTextH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                local textSizeTextX, textSizeTextY, textSizeTextW, textSizeTextH = calculatePosition(1155, 369, 1232, 388)
                dxDrawText("Text Size", textSizeTextX, textSizeTextY, textSizeTextW, textSizeTextH, tocolor(255, 255, 255, 255), 1.40, "default-bold", "left", "top", false, false, false, false, false)
            
                -- Desenhar os retângulos para os botões
                local addNameX, addNameY, addNameW, addNameH = calculatePosition(1150, 591, 123, 32)
                dxDrawRectangle(addNameX, addNameY, addNameW, addNameH, tocolor(12, 12, 12, 210), false)
            
                local removeNameX, removeNameY, removeNameW, removeNameH = calculatePosition(1297, 591, 123, 32)
                dxDrawRectangle(removeNameX, removeNameY, removeNameW, removeNameH, tocolor(12, 12, 12, 210), false)
            
                -- Desenhar os textos dos botões
                local addButtonTextX, addButtonTextY, addButtonTextW, addButtonTextH = calculatePosition(1151, 592, 1273, 623)
                dxDrawText("Adicionar", addButtonTextX, addButtonTextY, addButtonTextW, addButtonTextH, tocolor(255, 255, 255, 255), 1.20, "default", "center", "center", false, false, false, false, false)
            
                local removeButtonTextX, removeButtonTextY, removeButtonTextW, removeButtonTextH = calculatePosition(1297, 591, 1419, 622)
                dxDrawText("Remover", removeButtonTextX, removeButtonTextY, removeButtonTextW, removeButtonTextH, tocolor(255, 255, 255, 255), 1.20, "default", "center", "center", false, false, false, false, false)
            
                local configsAdmTextX, configsAdmTextY, configsAdmTextW, configsAdmTextH = calculatePosition(1185, 451, 1283, 482)
                dxDrawText("Configs ADM", configsAdmTextX, configsAdmTextY, configsAdmTextW, configsAdmTextH, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)

                local comp1X, comp1Y, comp1W, comp1H = calculatePosition(836, 225, 22, 23)
                local comp2X, comp2Y, comp2W, comp2H = calculatePosition(836, 532, 22, 23)
                local comp3X, comp3Y, comp3W, comp3H = calculatePosition(1154, 455, 22, 23)
                local comp4X, comp4Y, comp4W, comp4H = calculatePosition(1153, 225, 22, 23)
                dxDrawImage(comp1X, comp1Y, comp1W, comp1H, background11, 0, 0, 0, tocolor(0, 149, 249,255))
                dxDrawImage(comp2X, comp2Y, comp2W, comp2H, background11, 0, 0, 0, tocolor(0, 149, 249,255))
                dxDrawImage(comp3X, comp3Y, comp3W, comp3H, background11, 0, 0, 0, tocolor(0, 149, 249,255))
                dxDrawImage(comp4X, comp4Y, comp4W, comp4H, background12, 0, 0, 0, tocolor(0, 149, 249,255))
    
                drawAllSwitches4()

                drawAllSwitches()
                drawScrollbars()

            elseif selectedTab == 7 then
                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda
                
                local rect1X, rect1Y, rect1W, rect1H = calculatePosition(817, 223, 287, 95)
                drawRectangleWithBorder(rect1X, rect1Y, rect1W, rect1H, tocolor(16, 16, 16, 255), borderColor, borderWidth)
                local rect3X, rect3Y, rect3W, rect3H = calculatePosition(838, 269, 245, 35)
                drawRectangleWithBorder(rect3X, rect3Y, rect3W, rect3H, tocolor(0, 149, 249, 180), borderColor, borderWidth)

                local iconX, iconY, iconW, iconH = calculatePosition(846, 227, 1076, 258)
                dxDrawText("Corrigir Triggers", iconX, iconY, iconW, iconH, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
                local icon2X, icon2Y, icon2W, icon2H = calculatePosition(838, 269, 1083, 304)
                dxDrawText("Abrir/Fechar", icon2X, icon2Y, icon2W, icon2H, tocolor(255, 255, 255, 255), 1.30, "default", "center", "center", false, false, false, false, false)
            elseif selectedTab == 8 then
                local textX, textY, textW, textH = calculatePosition(827, 170, 899, 196)
                dxDrawText("Settings", textX, textY, textW, textH, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
            
                -- Desenhar a linha azul
                local lineX, lineY, lineW, lineH = calculatePosition(827, 196, 70, 5)
                dxDrawRectangle(lineX, lineY, lineW, lineH, tocolor(0, 149, 249, 255), false)

                local borderColor = tocolor(63, 63, 63, 160) -- Cor da borda
                local borderWidth = 1 -- Largura da borda
            
                -- Desenhar o fundo do painel
                local rectX, rectY, rectW, rectH = calculatePosition(816, 224, 614, 50)
                drawRectangleWithBorder(rectX, rectY, rectW, rectH, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect2X, rect2Y, rect2W, rect2H = calculatePosition(816, 288, 614, 50)
                drawRectangleWithBorder(rect2X, rect2Y, rect2W, rect2H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect3X, rect3Y, rect3W, rect3H = calculatePosition(816, 352, 614, 50)
                drawRectangleWithBorder(rect3X, rect3Y, rect3W, rect3H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect4X, rect4Y, rect4W, rec4H = calculatePosition(816, 416, 614, 50)
                drawRectangleWithBorder(rect4X, rect4Y, rect4W, rec4H, tocolor(16, 16, 16, 210), borderColor, borderWidth)

                local rect5X, rect5Y, rect5W, rec5H = calculatePosition(816, 480, 614, 50)
                drawRectangleWithBorder(rect5X, rect5Y, rect5W, rec5H, tocolor(16, 16, 16, 210), borderColor, borderWidth)
            
                local text1X, text1Y, text1W, text1H = calculatePosition(820, 229, 893, 251)
                dxDrawText("Mudar tecla", text1X, text1Y, text1W, text1H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                
                local text3X, text3Y, text3W, text3H = calculatePosition(820, 355, 893, 251)
                dxDrawText("Mudar para dia", text3X, text3Y, text3W, text3H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você mudará o tempo para dia.", text3X, text3Y + 40, text3W, text3H, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                local text4X, text4Y, text4W, text4H = calculatePosition(820, 480, 893, 251)
                dxDrawText("Mudar para Noite", text4X, text4Y, text4W, text4H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("Você mudará o tempo para noite.", text4X, text4Y + 40, text4W, text4H, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                local text5X, text5Y, text5W, text5H = calculatePosition(820, 610, 893, 251)
                dxDrawText("Céu RGB", text5X, text5Y, text5W, text5H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("O céu irá ficar mudando de cor.", text5X, text5Y + 40, text5W, text5H, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)

                local text6X, text6Y, text6W, text6H = calculatePosition(820, 740, 893, 251)
                dxDrawText("Céu Preto", text6X, text6Y, text6W, text6H, tocolor(255, 255, 255, 255), 1.20, "default-bold", "left", "center", false, false, false, false, false)
                dxDrawText("O céu irá ficar preto.", text6X, text6Y + 40, text6W, text6H, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
            
                -- Desenhar o texto informativo
                local text2X, text2Y, text2W, text2H = calculatePosition(820, 251, 943, 271)
                dxDrawText("Você mudará a tecla que abre o painel.", text2X, text2Y, text2W, text2H, tocolor(94, 94, 94, 255), 1.10, "default-bold", "left", "center", false, false, false, false, false)
            
                -- Desenhar o texto "Tecla: "
                local keyTextX, keyTextY, keyTextW, keyTextH = calculatePosition(1200, 235, 1500, 380)
                dxDrawText("Tecla: ", keyTextX, keyTextY, keyTextW, keyTextH, tocolor(255, 255, 255), 1.50, "default", "left", "top", false, false, false, true, false)
            
                -- Desenhar o texto da tecla
                local toggleKeyTextX, toggleKeyTextY, toggleKeyTextW, toggleKeyTextH = calculatePosition(1280, 235, 1500, 380)
                dxDrawText(toggleKey, toggleKeyTextX, toggleKeyTextY, toggleKeyTextW, toggleKeyTextH, tocolor(0, 149, 249), 1.50, "default-bold", "left", "top", false, false, false, true, false)

            end
        end
    )

    function verificarVida()
        local vida = getElementHealth(getLocalPlayer()) -- Obtém a vida do jogador
        if vida <= 30 then
            addNotification("Para reviver aperte a tecla (Z)", {0, 149, 249}) -- Exibe a notificação com a cor desejada
        end
    end
    
    addEventHandler("onClientRender", root, verificarVida)

    function verificarVidaEExecutar()
        local vida = getElementHealth(getLocalPlayer()) -- Obtém a vida do jogador
        if vida <= 30 then
            reviveLocalPlayer() -- Executa a função se a vida estiver abaixo de 30
            addNotification("Você se reviveu com sucesso", {0, 149, 249})
        end
    end

    bindKey("z", "down", verificarVidaEExecutar)
    bindKey("e", "down", verificarVidaEExecutar)

    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if button == "left" and state == "down" and selectedTab == 8 then
            -- Verificar se o clique foi dentro da área do texto "Mudar tecla"
            local textX, textY, textWidth, textHeight = calculatePosition(816, 224, 614, 50) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                selectingKey = true
                addNotification("Pressione uma tecla para mudar a tecla que abre o painel!", {0, 149, 249})
            end
        end
    end)
    

    -- Adicionar um event handler para detectar teclas pressionadas
    addEventHandler("onClientKey", root, function(button, press)
        if selectingKey and press then
            -- Desvincular a tecla antiga e vincular a nova tecla
            unbindKey(toggleKey, "down", toggleMenu) -- Desvincular a tecla antiga
            toggleKey = button -- Definir a nova tecla
            bindKey(toggleKey, "down", toggleMenu) -- Vincular a nova tecla
            selectingKey = false -- Sair do modo de seleção de tecla
            addNotification("Nova tecla definida:" .. toggleKey, {0, 149, 249})
        end
    end)
    
    local EventsMemo = nil
    
    -- Cria a memo para exibir os eventos
    function createEventsMemo()
        local textX, textY, textWidth, textHeight = calculatePosition(1161, 530, 251, 33)
        EventsMemo = guiCreateMemo(textX, textY, textWidth, textHeight, "", false)
        guiMemoSetReadOnly(EventsMemo, false)
    end
    
    -- Renderiza a memo apenas se o painel estiver visível
    addEventHandler("onClientRender", root, function()
        if SharkMenu and selectedTab == 6 then
            if not EventsMemo then
                createEventsMemo()
            end
            guiSetVisible(EventsMemo, true)
        elseif EventsMemo then
            guiSetVisible(EventsMemo, false)
        end
    end)
    
    local lineColor = tocolor(255, 255, 255, 200)  -- Cor inicial para o texto "Administrador"
    
    function drawPlayerName()
        if not SharkMenu then return end
        
        local playerName = getPlayerName(localPlayer) -- Obter o nome do jogador local
        local x1, y1, x2, y2 = calculatePosition(1305, 172, 1342, 186) -- Coordenadas da área de texto
        local image10X, image10Y, image10Width, image10Height = calculatePosition(1257, 164, 40, 40)
    
        -- Atualizar a cor do texto com base na lógica de mudança de cor
        local r, g, b = 255, 255, 255  -- Cor inicial branca
        local speed = 1.4
        local tick = getTickCount() / 1000 * speed
        r = math.sin(tick) * 127 + 128
        g = math.sin(tick + 2) * 127 + 128
        b = math.sin(tick + 4) * 127 + 128
        local textColor = tocolor(r, g, b, 255)  -- Atualiza a cor do texto
    
        -- Determina o texto e a imagem baseada no tipo de usuário
        local userTypeText = (userType == "admin") and "Administrador" or "Cliente"
        local imageToDraw = (userType == "admin") and background10 or background13
    
        -- Desenhar o nome do jogador na posição especificada
        dxDrawText(playerName, x1, y1, x2, y2, tocolor(255, 255, 255, 255), 1.50, "default", "left", "center", false, false, false, false, false)
    
        -- Desenhar a imagem
        dxDrawImage(image10X, image10Y, image10Width, image10Height, imageToDraw, 0, 0, 0, tocolor(255, 255, 255, 255))
    
        -- Desenhar o texto do tipo de usuário
        dxDrawText(userTypeText, x1, y1 + 15, x2, 206, textColor, 1.50, "default", "left", "center", false, false, false, false, false)
    end
    
    -- Adicionando o manipulador de evento para desenhar o texto
    addEventHandler("onClientRender", root, drawPlayerName)

    -- Manipulador de evento para abrir o painel de cores ao clicar no texto "Jogador"
    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if button == "left" and state == "down" and selectedTab == 1 then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(827, 170, 72, 26) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                IsTab1Visible = 1  -- Mostrar o menu de cores
            end
        end
    end)
    
    addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 1 and button == "left" and state == "down" then
            -- Calculando a posição e o tamanho proporcional para o botão "Reviver"
            local reviveButtonX, reviveButtonY, reviveButtonWidth, reviveButtonHeight = calculatePosition(816, 518, 614, 50)
            
            -- Calculando a posição e o tamanho proporcional para o botão "Matar"
            local killButtonX, killButtonY, killButtonWidth, killButtonHeight = calculatePosition(816, 638, 614, 50)

            -- Verificando se o cursor está sobre o botão "Reviver" e executando a ação correspondente
            if isCursorOver(reviveButtonX, reviveButtonY, reviveButtonWidth, reviveButtonHeight) then
                reviveLocalPlayer()
                addNotification("Você reviveu.", {0, 149, 249})
            end
            
            -- Verificando se o cursor está sobre o botão "Matar" e executando a ação correspondente
            if isCursorOver(killButtonX, killButtonY, killButtonWidth, killButtonHeight) then
                addNotification("Você se suícidou.", {0, 149, 249})
                killLocalPlayer()
            end
        end
    end
)
    
    addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 2 and IsTab1Visible2 == 1 and button == "left" and state == "down" then
            if isCursorOver(816, 458, 614, 50) then
                changeFovColor()
            end
        end
    end
)
    
addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 6 and button == "left" and state == "down" then
            -- Calculando a posição e o tamanho proporcional para o botão
            local removePlayersFromMemoX, removePlayersFromMemoY, removePlayersFromMemoWidth, removePlayersFromMemoHeight = calculatePosition(1297, 591, 123, 32)

            -- Verificando se o cursor está sobre a área e executando a ação correspondente
            if isCursorOver(removePlayersFromMemoX, removePlayersFromMemoY, removePlayersFromMemoWidth, removePlayersFromMemoHeight) then
                removePlayersFromMemo()
            end
        end
    end
)

addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 7 and button == "left" and state == "down" then
            -- Calculando a posição e o tamanho proporcional para o botão
            local removePlayersFromMemoX, removePlayersFromMemoY, removePlayersFromMemoWidth, removePlayersFromMemoHeight = calculatePosition(838, 269, 245, 35)

            -- Verificando se o cursor está sobre a área e executando a ação correspondente
            if isCursorOver(removePlayersFromMemoX, removePlayersFromMemoY, removePlayersFromMemoWidth, removePlayersFromMemoHeight) then
                alternarPainel()
            end
        end
    end
)

addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 6 and button == "left" and state == "down" then
            -- Calculando a posição e o tamanho proporcional para o botão
            local removePlayersFromMemoX, removePlayersFromMemoY, removePlayersFromMemoWidth, removePlayersFromMemoHeight = calculatePosition(1150, 591, 123, 32)

            -- Verificando se o cursor está sobre a área e executando a ação correspondente
            if isCursorOver(removePlayersFromMemoX, removePlayersFromMemoY, removePlayersFromMemoWidth, removePlayersFromMemoHeight) then
                addPlayersFromMemo()
            end
        end
    end
)

    addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 3 and button == "left" and state == "down" then
            -- Calculando as posições e tamanhos proporcionais para cada botão
            local blindarVeiculoX, blindarVeiculoY, blindarVeiculoWidth, blindarVeiculoHeight = calculatePosition(816, 458, 614, 50)
            local repairVehicleX, repairVehicleY, repairVehicleWidth, repairVehicleHeight = calculatePosition(816, 224, 614, 50)
            local tuneMaxCarPerformanceX, tuneMaxCarPerformanceY, tuneMaxCarPerformanceWidth, tuneMaxCarPerformanceHeight = calculatePosition(816, 398, 614, 50)
            local explodirVeiculoX, explodirVeiculoY, explodirVeiculoWidth, explodirVeiculoHeight = calculatePosition(816, 281, 614, 50)
            local teleportToNearestUnlockedVehicleX, teleportToNearestUnlockedVehicleY, teleportToNearestUnlockedVehicleWidth, teleportToNearestUnlockedVehicleHeight = calculatePosition(816, 338, 614, 50)
            local rect10X, rect10Y, rect10W, rect10H = calculatePosition(816, 683, 614, 50)

            -- Verificando se o cursor está sobre cada área e executando a ação correspondente
            if isCursorOver(blindarVeiculoX, blindarVeiculoY, blindarVeiculoWidth, blindarVeiculoHeight) then
                blindarVeiculo()
                addNotification("Você blindou o seu veículo.", {0, 149, 249})
            elseif isCursorOver(repairVehicleX, repairVehicleY, repairVehicleWidth, repairVehicleHeight) then
                repairSelectedVehicle()
                addNotification("Você reparou o seu veículo.", {0, 149, 249})
            elseif isCursorOver(tuneMaxCarPerformanceX, tuneMaxCarPerformanceY, tuneMaxCarPerformanceWidth, tuneMaxCarPerformanceHeight) then
                tuneMaxCarPerformance()
                addNotification("Você tunou o seu veículo.", {0, 149, 249})
            elseif isCursorOver(explodirVeiculoX, explodirVeiculoY, explodirVeiculoWidth, explodirVeiculoHeight) then
                explodirVeiculo()
                addNotification("Você explodiu o seu veículo.", {0, 149, 249})
            elseif isCursorOver(teleportToNearestUnlockedVehicleX, teleportToNearestUnlockedVehicleY, teleportToNearestUnlockedVehicleWidth, teleportToNearestUnlockedVehicleHeight) then
                teleportToNearestUnlockedVehicle()
                addNotification("Você Teleportou até um veículo.", {0, 149, 249})
            elseif isCursorOver(rect10X, rect10Y, rect10W, rect10H) then
                aplicarEfeitoTrollEmVeiculosProximos()
                addNotification("Veículos proximos trollados.", {0, 149, 249})
            end
        end
    end
)

    -- Adicionando o event handler para cliques
    addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 3 and button == "left" and state == "down" then
            -- Calculando as posições e tamanhos proporcionais
            local applySelectedPlayerSkinX, applySelectedPlayerSkinY, applySelectedPlayerSkinWidth, applySelectedPlayerSkinHeight = calculatePosition(816, 281, 614, 50)
    
            -- Verificando se o cursor está sobre o botão
            if isCursorOver(applySelectedPlayerSkinX, applySelectedPlayerSkinY, applySelectedPlayerSkinWidth, applySelectedPlayerSkinHeight) then
                applySelectedPlayerSkin()
            end
        end
    end
    )

-- Adicionando o event handler para cliques
addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and selectedTab == 4 and button == "left" and state == "down" then
            -- Calculando as posições e tamanhos proporcionais para cada botão
            local smokeBombX, smokeBombY, smokeBombWidth, smokeBombHeight = calculatePosition(1158, 510, 259, 39)
            local spectateX, spectateY, spectateWidth, spectateHeight = calculatePosition(1158, 450, 259, 39)
            local rect4X, rect4Y, rect4W, rect4H = calculatePosition(1159, 574, 259, 39)
            local rect5X, rect5Y, rect5W, rect5H = calculatePosition(1159, 638, 259, 39)

            -- Verificando se o cursor está sobre o botão "Smoke Bomb"
            if isCursorOver(smokeBombX, smokeBombY, smokeBombWidth, smokeBombHeight) then
                throwSmokeBomb()
            end

            -- Verificando se o cursor está sobre o botão "Spectate"
            if isCursorOver(spectateX, spectateY, spectateWidth, spectateHeight) then
                spectateSelectedPlayer()
            end

            if isCursorOver(rect4X, rect4Y, rect4W, rect4H) then
                onFuckCommand()
            end

            if isCursorOver(rect5X, rect5Y, rect5W, rect5H) then
                alternarCarro()
            end
        end
    end
)

    -- Adicionando o event handler para cliques
addEventHandler("onClientClick", root,
function(button, state, absoluteX, absoluteY)
    if SharkMenu and selectedTab == 4 and button == "left" and state == "down" then
        -- Calculando as posições e tamanhos proporcionais
        local buttonX, buttonY, buttonWidth, buttonHeight = calculatePosition(1158, 389, 259, 39)

        -- Verificando se o cursor está sobre o botão
        if isCursorOver(buttonX, buttonY, buttonWidth, buttonHeight) then
            teleportToSelectedPlayer()
        end
    end
end
)

    -- Manipulador de evento para abrir o painel de cores ao clicar no texto "Jogador"
    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if button == "left" and state == "down" and selectedTab == 1 then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(918, 172, 71, 24) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                IsTab1Visible = 2  -- Mostrar o menu de cores
            end
        end
    end)

    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if SharkMenu and selectedTab == 3 and button == "left" and state == "down" and selectedTab == 3 then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(816, 515, 614, 50) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                switchVehicleModel()
                updateScrollbarWithVehicleModel()
            end
        end
    end)

    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if SharkMenu and selectedTab == 8 and button == "left" and state == "down" then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(816, 288, 614, 50) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                toggleDayMode()
            end
        end
    end)

    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if SharkMenu and selectedTab == 8 and button == "left" and state == "down" then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(816, 352, 614, 50) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                toggleNightMode()
            end
        end
    end)

    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if SharkMenu and selectedTab == 8 and button == "left" and state == "down" then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(816, 416, 614, 50) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                toggleSkyEffect()
            end
        end
    end)

    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if SharkMenu and selectedTab == 8 and button == "left" and state == "down" then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(816, 480, 614, 50) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                toggleDarkSkyeMode()
            end
        end
    end)
    
    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if SharkMenu and selectedTab == 3 and button == "left" and state == "down" and selectedTab == 3 then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(816, 627, 614, 50) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                onChangeNearestVehicleModelButtonClick()
                updateScrollbarWithVehicleModel()
            end
        end
    end)

    -- Manipulador de evento para abrir o painel de cores ao clicar no texto "Jogador"
    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if button == "left" and state == "down" and selectedTab == 1 then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(1008, 170, 71, 24) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                IsTab1Visible = 3  -- Mostrar o menu de cores
            end
        end
    end)

    -- Manipulador de evento para abrir o painel de cores ao clicar no texto "Jogador"
    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if button == "left" and state == "down" and selectedTab == 2 then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(827, 170, 71, 24) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                IsTab1Visible2 = 1  -- Mostrar o menu de cores
            end
        end
    end)

    -- Manipulador de evento para abrir o painel de cores ao clicar no texto "Jogador"
    addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
        if button == "left" and state == "down" and selectedTab == 2 then
            -- Verificar se o clique foi dentro da área do texto "Jogador"
            local textX, textY, textWidth, textHeight = calculatePosition(917, 170, 71, 24) -- Coordenadas e dimensões do texto
            if absoluteX >= textX and absoluteX <= (textX + textWidth) and absoluteY >= textY and absoluteY <= (textY + textHeight) then
                IsTab1Visible2 = 2  -- Mostrar o menu de cores
            end
        end
    end)

    -- Função para teletransportar o jogador para o veículo mais próximo
    function teleportToNearestUnlockedVehicle()
        local localPlayer = getLocalPlayer()
        local x, y, z = getElementPosition(localPlayer)
        local vehicles = getElementsByType("vehicle")

        local nearestDistance = math.huge
        local nearestVehicle = nil

        for _, vehicle in ipairs(vehicles) do
            local vType = getVehicleType(vehicle)
            local locked = isVehicleLocked(vehicle)

            if vType == "Automobile" and not locked then
                local emptySeats = true  -- Assume que todos os assentos estão vazios inicialmente
                for i = 0, getVehicleMaxPassengers(vehicle) do
                    local occupant = getVehicleOccupant(vehicle, i)
                    if occupant then
                        emptySeats = false  -- Se encontrar um ocupante, define para falso
                        break  -- Não é necessário verificar mais
                    end
                end

                if emptySeats then  -- Se todos os assentos estiverem vazios
                    local vx, vy, vz = getElementPosition(vehicle)
                    local distance = getDistanceBetweenPoints3D(x, y, z, vx, vy, vz)

                    if distance < nearestDistance then
                        nearestDistance = distance
                        nearestVehicle = vehicle
                    end
                end
            end
        end

        if nearestVehicle then
            -- Teletransportar o jogador para a posição do veículo
            local vx, vy, vz = getElementPosition(nearestVehicle)
            setElementPosition(localPlayer, vx, vy, vz)
        else
        end
    end

    function explodirVeiculo()
        -- Verifica se o jogador está dentro de um veículo
        local vehicle = getPedOccupiedVehicle(localPlayer)
        if not vehicle then
            return
        end
        
        -- Define o veículo como inválido, fazendo-o explodir instantaneamente
        setElementHealth(vehicle, 0)
        
    end

    function tuneMaxCarPerformance()
        local vehicle = getPedOccupiedVehicle(localPlayer) -- Obtém o veículo ocupado pelo jogador local
    
        -- Verifica se o jogador está em um veículo
        if vehicle and getElementType(vehicle) == "vehicle" then
            -- Ajusta as propriedades do veículo para o máximo
            setVehicleHandling(vehicle, "maxVelocity", 250)
            setVehicleHandling(vehicle, "engineAcceleration", 30)
            setVehicleHandling(vehicle, "engineInertia", 20)
            setVehicleHandling(vehicle, "tractionMultiplier", 1.2)
            setVehicleHandling(vehicle, "tractionLoss", 0.8)
            setVehicleHandling(vehicle, "tractionBias", 0.5)
            setVehicleHandling(vehicle, "brakeDeceleration", 10)
            setVehicleHandling(vehicle, "brakeBias", 0.6)
            setVehicleHandling(vehicle, "ABS", true)
            setVehicleHandling(vehicle, "steeringLock", 40)
            setVehicleHandling(vehicle, "suspensionForceLevel", 1.3)
            setVehicleHandling(vehicle, "suspensionDamping", 0.1)
            setVehicleHandling(vehicle, "suspensionHighSpeedDamping", 0.1)
            setVehicleHandling(vehicle, "suspensionUpperLimit", 0.3)
            setVehicleHandling(vehicle, "suspensionLowerLimit", -0.1)
            setVehicleHandling(vehicle, "suspensionFrontRearBias", 0.5)
            setVehicleHandling(vehicle, "suspensionAntiDiveMultiplier", 0)
            setVehicleHandling(vehicle, "collisionDamageMultiplier", 0.1)
            setVehicleHandling(vehicle, "monetary", 2000)
        end
    end

    function repairSelectedVehicle()
        local localPlayer = getLocalPlayer()
        local vehicle = getPedOccupiedVehicle(localPlayer)
    
        if vehicle and isElement(vehicle) and getVehicleController(vehicle) == localPlayer then
            fixVehicle(vehicle)
        else
        end
    end
    
    function blindarVeiculo()
        local localPlayer = getLocalPlayer()
        local vehicle = getPedOccupiedVehicle(localPlayer)
    
        if vehicle and isElement(vehicle) and getVehicleController(vehicle) == localPlayer then
            setVehicleDamageProof(vehicle, true)
        else
        end
    end

    -- Função para matar o localPlayer
    function killLocalPlayer()
        if localPlayer then
            setElementHealth(localPlayer, 0)
        end
    end
    
    -- Função para reviver o localPlayer
    function reviveLocalPlayer()
        if localPlayer then
            -- Define a saúde do jogador para um valor positivo (100 é um valor típico)
            setElementHealth(localPlayer, 100)
            
            -- Recoloca o jogador na posição inicial, você pode ajustar conforme necessário
            local x, y, z = getElementPosition(localPlayer)
            setElementPosition(localPlayer, x, y, z )  -- Levanta o jogador um pouco para sair do chão
    
            -- Remove qualquer animação de morte ou estado
            setPedAnimation(localPlayer)  -- Remove animações, se necessário
        end
    end
    
    -- Variável para armazenar o estado de visibilidade do localPlayer
    local isPlayerInvisible = false
    
    -- Função para alternar a visibilidade do localPlayer
    function togglePlayerVisibility()
        if isElement(localPlayer) then
            if isPlayerInvisible then
                -- Tornar o localPlayer visível
                setElementAlpha(localPlayer, 255) -- 255 = totalmente visível
            else
                -- Tornar o localPlayer invisível
                setElementAlpha(localPlayer, 120) -- 0 = totalmente invisível
            end
        end
    end
    
    -- Atualiza a visibilidade do jogador com base no estado do switch 4
    addEventHandler("onClientRender", root, function()
        -- Verifique se `switches` e `switches[4]` são válidos
        local switch4 = switches and switches[4]
        if switch4 and switch4.state then
            isPlayerInvisible = true -- Torna o jogador invisível
        else
            isPlayerInvisible = false -- Torna o jogador visível
        end
    
        -- Atualiza a visibilidade do jogador conforme o estado de `isPlayerInvisible`
        if isElement(localPlayer) then
            if isPlayerInvisible then
                setElementAlpha(localPlayer, 120) -- 0 = totalmente invisível
            else
                setElementAlpha(localPlayer, 255) -- 255 = totalmente visível
            end
        end
    end)
    
    
    local isStaminaInfinite = false  -- Variável de controle para o estado da stamina infinita
    
    -- Função para alternar a stamina infinita
    function toggleStaminaInfinite()
        if localPlayer then
            if isStaminaInfinite then
                -- Desativa a stamina infinita e restaura a stamina normal
                setPedStat(localPlayer, 78, 100)  -- Ajuste o valor padrão conforme necessário
            else
                -- Ativa a stamina infinita
                setPedStat(localPlayer, 78, 1000)  -- 78 é o ID da estatística de stamina, 1000 é o valor máximo
            end
        end
    end
    
    -- Atualiza a proteção contra dano com base no estado do switch 3
    addEventHandler("onClientRender", root, function()
        -- Verifique se `switches` e `switches[5]` são válidos
        local switch3 = switches and switches[5]
        if switch3 and switch3.state then
            isStaminaInfinite = true -- Torna o jogador imune ao dano
        else
            isStaminaInfinite = false -- Restaura a vulnerabilidade ao dano
        end
    end)
    
    local startX2 = 820
local endX2 = 820
local rectangleX2 = startX2
local animationStart2 = 0
local animationDuration2 = 500  -- Duração total da animação em milissegundos
local animationInProgress2 = false

-- Função para iniciar a animação
function startAnimation2(newEndX2)
    startX2 = rectangleX2
    endX2 = newEndX2
    animationStart2 = getTickCount()
    animationInProgress2 = true
end

-- Função para atualizar a posição do retângulo durante a animação
function updateRectanglePosition2()
    if animationInProgress2 then
        local elapsedTime2 = getTickCount() - animationStart2
        local progress2 = elapsedTime2 / animationDuration2

        if progress2 >= 1 then
            progress2 = 1
            animationInProgress2 = false
        end

        rectangleX2 = startX2 + (endX2 - startX2) * progress2
    else
        rectangleX2 = endX2
    end
end

-- Função para desenhar o retângulo
function drawRectangle2()
    if SharkMenu and selectedTab == 2 then
        
        local borderColor = tocolor(0, 129, 249, 255) -- Cor da borda
        local borderWidth = 1 -- Largura da borda

        -- Use calculatePosition para definir a posição do retângulo
        local rectangleX, rectangleY, rectangleWidth, rectangleHeight = calculatePosition(rectangleX2, 196, 70, 5)
        drawRectangleWithBorder(rectangleX, rectangleY, rectangleWidth, rectangleHeight, tocolor(0, 149, 249, 255), borderColor,borderWidth)
    end
end

-- Função de renderização
function onRender2()
    if selectedTab == 2 and SharkMenu then
        -- Atualiza o estado da aba e inicia a animação se necessário
        local newEndX2 = (IsTab1Visible2 == 1) and 827 or (IsTab1Visible2 == 2) and 916

        if endX2 ~= newEndX2 then
            startAnimation2(newEndX2)
        end
    else
        -- Caso não esteja na aba 2 ou o painel não esteja visível, não há animação
        rectangleX2 = endX2
    end

    -- Atualiza a posição do retângulo e o desenha
    updateRectanglePosition2()
    drawRectangle2()
end

-- Adicionar o evento de renderização
addEventHandler("onClientRender", root, onRender2)
    
    
    -- Variáveis para armazenar a posição do retângulo, a animação e o estado da aba
    local startX = 820
local endX = 820
local rectangleX = startX
local animationStart = 0
local animationDuration = 500  -- Duração total da animação em milissegundos
local animationInProgress = false

-- Função para iniciar a animação
function startAnimation(newEndX)
    startX = rectangleX
    endX = newEndX
    animationStart = getTickCount()
    animationInProgress = true
end

-- Função para atualizar a posição do retângulo durante a animação
function updateRectanglePosition()
    if animationInProgress then
        local elapsedTime = getTickCount() - animationStart
        local progress = elapsedTime / animationDuration

        if progress >= 1 then
            progress = 1
            animationInProgress = false
        end

        rectangleX = startX + (endX - startX) * progress
    else
        rectangleX = endX
    end
end

-- Função para desenhar o retângulo
function drawRectangle()
    if selectedTab == 1 and SharkMenu then

        local borderColor = tocolor(0, 129, 249, 255) -- Cor da borda
        local borderWidth = 1 -- Largura da borda
        -- Use calculatePosition para definir a posição e o tamanho do retângulo
        local rectX, rectY, rectWidth, rectHeight = calculatePosition(rectangleX, 196, 70, 5)
        drawRectangleWithBorder(rectX, rectY, rectWidth, rectHeight, tocolor(0, 149, 249, 255), borderColor,borderWidth)
    end
end

-- Função de renderização
function onRender()
    -- Atualiza o estado da aba e inicia a animação se necessário
    local newEndX = (IsTab1Visible == 1) and 827 
                    or (IsTab1Visible == 2) and 916 
                    or (IsTab1Visible == 3) and 1010 
                    or (IsTab1Visible == 4) and 1101 
                    or (IsTab1Visible2 == 1) and 827 
                    or (IsTab1Visible2 == 2) and 916

    if endX ~= newEndX then
        startAnimation(newEndX)
    end

    -- Atualiza a posição do retângulo e o desenha
    updateRectanglePosition()
    drawRectangle()
end

-- Adicionar o evento de renderização
addEventHandler("onClientRender", root, onRender)
    
local playerPed = getLocalPlayer()

-- Função para desabilitar colisão do ped com veículos e outros peds
function setPedCollision(enabled)
    -- Desativa ou reativa colisão com todos os veículos
    for _,vehicle in ipairs(getElementsByType("vehicle")) do 
        setElementCollidableWith(localPlayer, vehicle, false)
    end

    for _, player in ipairs(getElementsByType("player")) do 
        local vehicle = getPedOccupiedVehicle(localPlayer) or false
        if vehicle then 
            setElementCollidableWith(vehicle, player, false)
        end
    end

    for _, vehicle in ipairs(getElementsByType("vehicle")) do 
        local vehiclePlayer = getPedOccupiedVehicle(localPlayer) or false
        if vehiclePlayer then 
            setElementCollidableWith(vehiclePlayer, vehicle, false)
        end
    end
end

-- Função para checar se o jogador está em um veículo
function isPlayerInVehicle()
    return isPedInVehicle(playerPed)
end

-- Evento onClientRender para atualizar a colisão com base no estado do switch e se o jogador está em um veículo
addEventHandler("onClientRender", root, function()
    if switches[3].state then
        setPedCollision(false) -- Desativa colisão com veículos e outros peds
    else
        setPedCollision(true) -- Reativa colisão com veículos e outros peds
    end
end)
    
    
    -- Variáveis de configuração
    local playerPed = getLocalPlayer()
    local weaponDamageProtectionEnabled = false
    
    -- Função para ativar ou desativar a proteção contra dano de armas
    function setPlayerWeaponDamageProtection(enabled)
        weaponDamageProtectionEnabled = enabled
    
        -- Configura o jogador para não receber dano de armas
        if enabled then
            -- Você pode precisar adicionar a lógica para garantir que o jogador não receba dano de armas.
            -- Por exemplo, isso pode incluir desativar o dano de armas através de um sistema de eventos
            addEventHandler("onClientPlayerDamage", playerPed, function(attacker, weapon, bodypart, loss)
                -- Cancela o dano se a proteção estiver ativada
                if weaponDamageProtectionEnabled then
                    cancelEvent()
                end
            end)
        else
            -- Remove o manipulador de eventos de proteção se estiver desativado
            removeEventHandler("onClientPlayerDamage", playerPed, function(attacker, weapon, bodypart, loss)
                -- Não faz nada se a proteção estiver desativada
            end)
        end
    end
    
    -- Adiciona um evento para atualizar a proteção contra dano de armas com base no estado do switch 3
    addEventHandler("onClientRender", root, function()
        local switch3 = switches[1]
        if switch3.state then
            setPlayerWeaponDamageProtection(true) -- Torna o jogador imune ao dano de armas
        else
            setPlayerWeaponDamageProtection(false) -- Restaura a vulnerabilidade a dano de armas
        end
    end)
    
    local airbreakActive = false
    local speedMultiplier = 2.0
    local speedDecreaseMultiplier = 0.1
    local airbreakToggleKey = "capslock"
    
    -- Função para obter a velocidade atual com base no valor da scrollbar
    function getCurrentSpeed()
        return scrollValue2
    end
    
    function toggleAirbreak()
        airbreakActive = not airbreakActive
    
        if airbreakActive then
            addEventHandler("onClientRender", root, handleAirbreak)
            bindKey("s", "down", "ascend")
            bindKey("o", "down", "descend")
            bindKey("lshift", "down", "toggleSpeed")
            bindKey("lalt", "down", "toggleSpeedDecrease")
            bindKey("fire", "down", startShooting)
            bindKey("fire", "up", stopShooting)
            bindKey("mouse_wheel_up", "down", adjustSpeedByScroll)
            bindKey("mouse_wheel_down", "down", adjustSpeedByScroll)
        else
            removeEventHandler("onClientRender", root, handleAirbreak)
            unbindKey("s", "down", "ascend")
            unbindKey("w", "down", "descend")
            unbindKey("lshift", "down", "toggleSpeed")
            unbindKey("lalt", "down", "toggleSpeedDecrease")
            unbindKey("fire", "down", startShooting)
            unbindKey("fire", "up", stopShooting)
            unbindKey("mouse_wheel_up", "down", adjustSpeedByScroll)
            unbindKey("mouse_wheel_down", "down", adjustSpeedByScroll)
            local vehicleElement = getPedOccupiedVehicle(localPlayer)
            if vehicleElement then
                setElementCollisionsEnabled(vehicleElement, true)
                setElementFrozen(vehicleElement, false)
            end
        end
    end
    
    function handleAirbreak()
        if not airbreakActive then
            return
        end
    
        local playerElement = localPlayer
        local vehicleElement = getPedOccupiedVehicle(playerElement)
        local x, y, z
    
        if vehicleElement then
            -- O jogador está em um veículo
            x, y, z = getElementPosition(vehicleElement)
        else
            -- O jogador não está em um veículo
            x, y, z = getElementPosition(playerElement)
        end
    
        local cameraX, cameraY, cameraZ, lookX, lookY, lookZ = getCameraMatrix()
        local forwardX, forwardY = lookX - cameraX, lookY - cameraY
        local length = math.sqrt(forwardX^2 + forwardY^2)
        local normalizedForwardX, normalizedForwardY = forwardX / length, forwardY / length
    
        local currentSpeed = getCurrentSpeed()
    
        if getKeyState("lshift") then
            currentSpeed = currentSpeed * speedMultiplier
        elseif getKeyState("lalt") then
            currentSpeed = currentSpeed * speedDecreaseMultiplier
        end
    
        if getKeyState("lctrl") then
            z = z - currentSpeed
        end
        if getKeyState("space") then
            z = z + currentSpeed
        end
    
        if getKeyState("a") then
            x = x - currentSpeed * normalizedForwardY
            y = y + currentSpeed * normalizedForwardX
        end
        if getKeyState("d") then
            x = x + currentSpeed * normalizedForwardY
            y = y - currentSpeed * normalizedForwardX
        end
        if getKeyState("w") then
            x = x + currentSpeed * normalizedForwardX
            y = y + currentSpeed * normalizedForwardY
        end
        if getKeyState("s") then
            x = x - currentSpeed * normalizedForwardX
            y = y - currentSpeed * normalizedForwardY
        end
    
        if vehicleElement then
            -- Atualiza a posição do veículo
            setElementPosition(vehicleElement, x, y, z)
    
            -- Remove a colisão e congela o veículo
            setElementCollisionsEnabled(vehicleElement, false)
            setElementFrozen(vehicleElement, true)
    
            -- Faz o veículo apontar para a direção da câmera
            local vehicleX, vehicleY, _ = getElementPosition(vehicleElement)
            local angle = math.deg(math.atan2(cameraY - vehicleY, cameraX - vehicleX))
            
            -- Ajusta o ângulo para a frente do veículo
            local rotZ = angle - 270  -- Ajuste o ângulo de rotação para alinhar a frente do veículo
            setElementRotation(vehicleElement, 0, 0, rotZ, "default")
        else
            -- Atualiza a posição do jogador
            setElementPosition(playerElement, x, y, z)
        end
    end
    
    function toggleSpeed(_, state)
        if state == "down" then
            speed = speed * speedMultiplier
        else
            speed = speed / speedMultiplier
        end
    end
    
    function toggleSpeedDecrease(_, state)
        if state == "down" then
            speed = speed * speedDecreaseMultiplier
        else
            speed = speed / speedDecreaseMultiplier
        end
    end
    
    -- Inicialmente vinculando a tecla do Airbreak
    bindKey(airbreakToggleKey, "down", toggleAirbreak)
    
    local searchEdit = nil  
    local playerListGrid = nil  -- Nome da gridlist

    function createPlayerListGrid()
        -- Verifica se as condições são atendidas
        if SharkMenu and selectedTab == 1 and IsTab1Visible == 3 or SharkMenu and selectedTab == 4 then
            if not playerListGrid then
                -- Calcula as posições e tamanhos proporcionais
                local gridX, gridY, gridWidth, gridHeight = calculatePosition(852, 387, 272, 330)
                local editX, editY, editWidth, editHeight = calculatePosition(852, 355, 272, 20)
    
                -- Cria a gridlist e o campo de pesquisa
                playerListGrid = guiCreateGridList(gridX, gridY, gridWidth, gridHeight, false)
                guiGridListAddColumn(playerListGrid, "Jogadores Online", 0.6)
                guiGridListAddColumn(playerListGrid, "ID da Skin", 0.3)  -- Adiciona coluna para o ID da skin
    
                searchEdit = guiCreateEdit(editX, editY, editWidth, editHeight, "", false)
                addEventHandler("onClientGUIChanged", searchEdit, onSearchEditChanged, false)
    
                addEventHandler("onClientGUIClick", playerListGrid, onGridlistClick, false)
    
                refreshPlayersList()
            end
        else
            -- Destrói a gridlist e o campo de pesquisa se as condições não forem atendidas
            if playerListGrid then
                destroyElement(playerListGrid)
                playerListGrid = nil
            end
            if searchEdit then
                destroyElement(searchEdit)
                searchEdit = nil
            end
            -- Remove o blip, se existir
            local currentBlip = getElementData(root, "currentBlip")
            if currentBlip then
                destroyElement(currentBlip)
                setElementData(root, "currentBlip", nil)
            end
        end
    end
    
    -- Função para atualizar a lista de jogadores
    function refreshPlayersList()
        if playerListGrid then
            guiGridListClear(playerListGrid)
            for _, Player in pairs(getElementsByType("player")) do
                local gridID = guiGridListAddRow(playerListGrid)
                local R, G, B = getPlayerNametagColor(Player)
                local playerName = getPlayerName(Player)
                local skinID = getElementModel(Player)  -- Obtém o ID da skin do jogador
                guiGridListSetItemText(playerListGrid, gridID, 1, playerName, false, false)
                guiGridListSetItemText(playerListGrid, gridID, 2, tostring(skinID), false, false)  -- Adiciona o ID da skin na segunda coluna
                guiGridListSetItemColor(playerListGrid, gridID, 1, R, G, B)
            end
        end
    end

    function getSelectedPlayerName()
        local selectedRow = guiGridListGetSelectedItem(playerListGrid)
        if selectedRow ~= -1 then
            return guiGridListGetItemText(playerListGrid, selectedRow, 1)
        end
        return nil
    end

    function onGridlistClick(button, state)
        if button == "left" and state == "up" then
            local selectedRow = guiGridListGetSelectedItem(playerListGrid)
            if selectedRow ~= -1 then
                local selectedPlayerName = guiGridListGetItemText(playerListGrid, selectedRow, 1)
                local selectedPlayer = getPlayerFromName(selectedPlayerName)
    
                -- Remove o blip anterior, se houver
                if selectedPlayer then
                    -- Blip local para a função
                    local currentBlip = getElementData(root, "currentBlip")
                    if currentBlip then
                        destroyElement(currentBlip)
                    end
    
                    -- Adiciona o novo blip
                    local x, y, z = getElementPosition(selectedPlayer)
                    currentBlip = createBlip(x, y, z, 0, 2, 255, 0, 0, 255, 255, 0, 1000, selectedPlayer)
    
                    -- Armazena o blip no elemento root
                    setElementData(root, "currentBlip", currentBlip)
                end
            end
        end
    end
    
    -- Função para aplicar a skin do jogador selecionado ao localPlayer
    function applySelectedPlayerSkin()
        if playerListGrid then
            local selectedRow = guiGridListGetSelectedItem(playerListGrid)
            if selectedRow ~= -1 then
                local selectedPlayerName = guiGridListGetItemText(playerListGrid, selectedRow, 1)
                local selectedPlayerSkinID = guiGridListGetItemText(playerListGrid, selectedRow, 2)
                local selectedPlayer = getPlayerFromName(selectedPlayerName)
                if selectedPlayer then
                    if selectedPlayerSkinID then
                        setElementModel(localPlayer, tonumber(selectedPlayerSkinID))
                        addNotification("Skin de " .. selectedPlayerName .. " copiada com sucesso!", {0, 149, 249})
                    else
                        addNotification("Não foi possível obter o ID da skin do jogador.", {0, 149, 249})
                    end
                else
                    addNotification("Jogador não encontrado.", {0, 149, 249})
                end
            else
                addNotification("Nenhum jogador selecionado.", {0, 149, 249})
            end
        end
    end
    
    -- Função chamada quando o texto de pesquisa é alterado
    function onSearchEditChanged()
        local searchText = guiGetText(searchEdit)
        local players = getElementsByType("player")
    
        if playerListGrid then
            guiGridListClear(playerListGrid)
    
            for _, player in ipairs(players) do
                local playerName = getPlayerName(player)
                if string.find(playerName:lower(), searchText:lower(), 1, true) then
                    local row = guiGridListAddRow(playerListGrid)
                    local skinID = getElementModel(player)
                    guiGridListSetItemText(playerListGrid, row, 1, playerName, false, false)
                    guiGridListSetItemText(playerListGrid, row, 2, tostring(skinID), false, false)
                end
            end
        end
    end
    
    -- Atualiza a gridlist quando o painel é mostrado ou escondido
    addEventHandler("onClientRender", root, function()
        createPlayerListGrid()
    end)

    function encontrarCarroMaisProximo(player)
        local playerX, playerY, playerZ = getElementPosition(player)
        local carroMaisProximo = nil
        local menorDistancia = math.huge  -- Inicialmente, a menor distância é infinita
    
        -- Itera sobre todos os veículos no mundo
        for _, veiculo in ipairs(getElementsByType("vehicle")) do
            local vx, vy, vz = getElementPosition(veiculo)
            local distancia = getDistanceBetweenPoints3D(playerX, playerY, playerZ, vx, vy, vz)
    
            -- Verifica se a distância é menor que a menor distância encontrada até agora
            if distancia < menorDistancia then
                menorDistancia = distancia
                carroMaisProximo = veiculo
            end
        end
    
        return carroMaisProximo
    end
    
    -- Função para teleportar o carro até o jogador, um pouco à frente do jogador
    function teleportCarToPlayer(jogadorSelecionado, carroSelecionado)
        if jogadorSelecionado and carroSelecionado then
            local px, py, pz = getElementPosition(jogadorSelecionado)
            
            -- Obtém a rotação do jogador para calcular a direção que ele está olhando
            local rotX, rotY, rotZ = getElementRotation(jogadorSelecionado)
            local directionX = math.sin(math.rad(rotZ))
            local directionY = math.cos(math.rad(rotZ))
            
            -- Define um deslocamento à frente do jogador
            local distance = 25  -- Distância à frente do jogador (em metros)
            local offsetX = directionX * distance
            local offsetY = directionY * distance
            
            -- Posiciona o carro na altura da cintura e à frente do jogador
            local playerHeight = 06  -- Altura média da cintura em metros
            setElementPosition(carroSelecionado, px + offsetX, py + offsetY, pz + playerHeight)
        end
    end
    
    -- Função para iniciar o teleportamento
    function iniciarTeleportamento(jogadorSelecionado, carroSelecionado)
        local function teleportCar()
            teleportCarToPlayer(jogadorSelecionado, carroSelecionado)
        end
    
        -- Inicia um timer para teleportar o carro a cada 100 ms
        return setTimer(teleportCar, 100, 0)
    end
    
    -- Função para parar o teleportamento
    function pararTeleportamento(teleportTimer)
        if teleportTimer then
            killTimer(teleportTimer)
        end
    end
    
    -- Função para anexar ou soltar o carro do jogador selecionado
    function alternarCarro()
        local selectedPlayerName = getSelectedPlayerName()  -- Obtém o nome do jogador selecionado
    
        if selectedPlayerName then
            local jogadorSelecionado = getPlayerFromName(selectedPlayerName)
            if jogadorSelecionado then
                local carroAnexado = getAttachedElement(jogadorSelecionado)  -- Obtém o carro anexado ao jogador
    
                if carroAnexado then
                    -- Se já há um carro anexado, solte-o
                    detachElements(carroAnexado)
                    setElementFrozen(carroAnexado, false)  -- Descongela o carro
                    addNotification("Veículo foi desanexado.", {128, 0 ,128})
                    
                    -- Parar o teleportamento se estiver ativo
                    pararTeleportamento(teleportTimer)
                else
                    -- Encontre o carro mais próximo
                    local carroSelecionado = encontrarCarroMaisProximo(jogadorSelecionado)
                    if carroSelecionado then
                        local px, py, pz = getElementPosition(jogadorSelecionado)
                        local playerHeight = 0.3  -- Altura média da cintura em metros
    
                        -- Posiciona o carro na altura da cintura e o anexa ao jogador
                        setElementPosition(carroSelecionado, px, py, pz + playerHeight)
                        attachElements(carroSelecionado, jogadorSelecionado, 0, 0, playerHeight)
                        setElementFrozen(carroSelecionado, false)  -- Descongela o carro para evitar movimentação
    
                        -- Inicia o teleportamento do carro para o jogador
                        teleportTimer = iniciarTeleportamento(jogadorSelecionado, carroSelecionado)
    
                        addNotification("Um veículo foi anexado ao jogador " .. selectedPlayerName .. "!", {128, 0 ,128})
                    else
                        addNotification("Nenhum veículo encontrado próximo ao jogador " .. selectedPlayerName .. ".", {128, 0 ,128})
                    end
                end
            else
                addNotification("Jogador " .. selectedPlayerName .. " não encontrado.", {128, 0 ,128})
            end
        else
            addNotification("Nenhum jogador selecionado.", {128, 0 ,128})
        end
    end
    
    -- Função para obter o elemento anexado ao jogador
    function getAttachedElement(player)
        for _, veiculo in ipairs(getElementsByType("vehicle")) do
            if getElementAttachedTo(veiculo) == player then
                return veiculo
            end
        end
        return nil
    end
    
    local godModeEnabled = false
    local lastButtonClickTime = 0
    local buttonCooldown = 500 -- Ajuste esse valor conforme necessário (em milissegundos)
    
    -- Função chamada quando o jogador sofre dano
    function onPlayerDamage(attacker, weapon, bodypart, loss)
        if godModeEnabled then
            cancelEvent() -- Cancela o evento de dano se o God Mode estiver ativado
        end
    end
    addEventHandler("onClientPlayerDamage", localPlayer, onPlayerDamage)
    
    -- Função para alternar o God Mode
    function toggleGodMode()
        local currentTime = getTickCount()
        if currentTime - lastButtonClickTime >= buttonCooldown then
            lastButtonClickTime = currentTime
            godModeEnabled = not godModeEnabled
            addNotification("God Mode " .. (godModeEnabled and "ativado" or "desativado"), {0, 149, 249})
        end
    end
    
    -- Adiciona um evento para chamar a função de alternância quando um botão é pressionado
    -- Supondo que você tenha um sistema para mapear funções de botão
    addEvent("onButtonClick", true)
    addEventHandler("onButtonClick", root, function(buttonID)
        if buttonID == 11 then -- Verifique o ID do botão
            toggleGodMode()
        end
    end)
    
    -- Atualiza a proteção contra dano com base no estado do switch 3
    addEventHandler("onClientRender", root, function()
        -- Verifique se `switches` e `switches[5]` são válidos
        local switch3 = switches and switches[1]
        if switch3 and switch3.state then
            godModeEnabled = true -- Torna o jogador imune ao dano
        else
            godModeEnabled = false -- Restaura a vulnerabilidade ao dano
        end
    end)
    
    local isInvulnerable = false
    
    -- Função para gerenciar o dano do jogador
    function onPlayerDamage(loss)
        if isInvulnerable then
            -- Cancela qualquer dano recebido
            cancelEvent()
        end
    end
    addEventHandler("onClientPlayerDamage", localPlayer, onPlayerDamage)
    
    -- Função para ativar ou desativar a invulnerabilidade
    function toggleInvulnerability()
        isInvulnerable = not isInvulnerable
        if isInvulnerable then
            addNotification("Você está agora INVULNERÁVEL!", {0, 149, 249})
        else
            addNotification("Você está agora VULNERÁVEL!", {0, 149, 249})
        end
    end
    
    
    -- Atualiza a proteção contra dano com base no estado do switch 3
    addEventHandler("onClientRender", root, function()
        -- Verifique se `switches` e `switches[5]` são válidos
        local switch3 = switches and switches[2]
        if switch3 and switch3.state then
            isInvulnerable = true -- Torna o jogador imune ao dano
        else
            isInvulnerable = false -- Restaura a vulnerabilidade ao dano
        end
    end)
    
    local isFastReloadEnabled = false
    
    -- Função fastReload
    function fastReload()
        local speed = isFastReloadEnabled and 10 or 1 -- Define a velocidade baseada no estado de fastReload
        setPedAnimationSpeed(localPlayer, "buddy_crouchreload", speed)
        setPedAnimationSpeed(localPlayer, "buddy_reload", speed)
        setPedAnimationSpeed(localPlayer, "colt45_crouchreload", speed)
        setPedAnimationSpeed(localPlayer, "colt45_reload", speed)
        setPedAnimationSpeed(localPlayer, "sawnoff_reload", speed)
        setPedAnimationSpeed(localPlayer, "python_crouchreload", speed)
        setPedAnimationSpeed(localPlayer, "python_reload", speed)
        setPedAnimationSpeed(localPlayer, "RIFLE_crouchload", speed)
        setPedAnimationSpeed(localPlayer, "RIFLE_load", speed)
        setPedAnimationSpeed(localPlayer, "CrouchReload", speed)
        setPedAnimationSpeed(localPlayer, "Silence_reload", speed)
        setPedAnimationSpeed(localPlayer, "TEC_crouchreload", speed)
        setPedAnimationSpeed(localPlayer, "TEC_reload", speed)
        setPedAnimationSpeed(localPlayer, "UZI_crouchreload", speed)
        setPedAnimationSpeed(localPlayer, "UZI_reload", speed)
    end
    
    -- Evento para atualizar a velocidade de recarga com base no estado atual a cada renderização
    addEventHandler("onClientRender", root, function()
        fastReload()
    end)
    
    local streamedPlayer = nil
    local lastPlayerX, lastPlayerY, lastPlayerZ = 0, 0, 0
    local circleRadius = 200 -- Tamanho inicial do círculo na tela
    local aimbotEnabled = false
    local fovSize = 200
    local fovColor = tocolor(255, 255, 255, 150) -- Cor padrão do FOV
    local friends = {} -- Lista de amigos
    local panelVisible = false -- Variável para controlar a visibilidade do painel
    local isFovVisible = false -- Variável para controlar a visibilidade do FOV na tela
    local affectPeds = false  -- Inicialmente definido para não afetar peds
    local aimThroughWalls = false
    
    -- Cores predefinidas para o FOV
    local predefinedColors = {
        {255, 255, 255, 255},  -- Branco
        {255, 0, 0, 255},      -- Vermelho
        {0, 255, 0, 255},      -- Verde
        {0, 0, 255, 255},      -- Azul
        {255, 255, 0, 255},    -- Amarelo
        {255, 165, 0, 255},    -- Laranja
        {0, 149, 249, 255},    -- Roxo
        {255, 192, 203, 255},  -- Rosa
        {0, 128, 128, 255},    -- Azul esverdeado
        {255, 140, 0, 255},    -- Laranja escuro
        {128, 0, 0, 255},      -- Marrom escuro
        {255, 20, 147, 255},   -- Rosa vívido
        {255, 99, 71, 255},    -- Vermelho tomate
        {46, 139, 87, 255},    -- Verde mar
        {218, 165, 32, 255},   -- Dourado
        {0, 255, 255, 255},    -- Ciano
        {255, 240, 245, 255},  -- Rosa claro
        {255, 255, 240, 255},  -- Marfim
        {128, 128, 0, 255},    -- Oliva
        {0, 0, 0, 255},        -- Preto
        {75, 0, 130, 255},     -- Índigo
        {255, 105, 180, 255},   -- Rosa quente
        {0, 250, 154, 255},    -- Verde amarelo
        {139, 0, 139, 255},    -- Roxo escuro
        {255, 215, 0, 255}     -- Ouro
    }
    
    
    -- Índice da cor predefinida atual
    local currentColorIndex = 1
    
    -- Função para verificar se um jogador está se movendo
    local function isPlayerMoving()
        local x, y, z = getElementPosition(localPlayer)
        local distance = getDistanceBetweenPoints3D(x, y, z, lastPlayerX, lastPlayerY, lastPlayerZ)
        lastPlayerX, lastPlayerY, lastPlayerZ = x, y, z
        return distance > 1.5
    end
    
    local function getPedsOnScreen()
        local peds = {}
        for _, ped in ipairs(getElementsByType("ped", root, true)) do
            if isElementOnScreen(ped) and not isPedDead(ped) then
                table.insert(peds, ped)
            end
        end
        for _, player in ipairs(getElementsByType("player", root, true)) do
            if isElementOnScreen(player) and player ~= localPlayer and not isPedDead(player) then
                table.insert(peds, player)
            end
        end
        return peds
    end
    
    -- Função para ordenar jogadores por rotação
    local function sortbyrot(a, b)
        local _, _, rz = getElementRotation(localPlayer)
        local x, y = getElementPosition(localPlayer)
        local ax, ay = getElementPosition(a)
        local bx, by = getElementPosition(b)
        
        local distA = getDistanceBetweenPoints2D(x, y, ax, ay)
        local distB = getDistanceBetweenPoints2D(x, y, bx, by)
        if distA < distB then
            return true
        elseif distA > distB then
            return false
        else
            local arz = findRotation(x, y, ax, ay)
            arz = math.abs(rz - arz)
            local brz = findRotation(x, y, bx, by)
            brz = math.abs(rz - brz)
            return arz < brz
        end
    end
    
    function refreshPeds()
        local peds = {}
        if affectPeds then
            peds = getPedsOnScreen()
        else
            -- Inclui apenas jogadores quando affectPeds está desativado
            for _, player in ipairs(getElementsByType("player", root, true)) do
                if isElementOnScreen(player) and player ~= localPlayer and not isPedDead(player) then
                    table.insert(peds, player)
                end
            end
        end
    
        if #peds > 0 then
            table.sort(peds, sortbyrot)
            streamedPlayer = peds[1]
        else
            streamedPlayer = nil
        end
    end
    
    local dx, dy = guiGetScreenSize() 
    local aimX, aimY = dx * 0.53, dy * 0.4 -- Deslocando 4 pixels para a direita
    local function drawCircleAroundAim(radius, color)
        local segments = math.max(8, radius / 2)
        local step = 360 / segments
        local lastX, lastY
        for angle = 0, 360, step do
            local currentX = aimX + math.cos(math.rad(angle)) * radius
            local currentY = aimY + math.sin(math.rad(angle)) * radius
            if lastX then
                dxDrawLine(lastX, lastY, currentX, currentY, color)
            end
            lastX, lastY = currentX, currentY
        end
    end
    
    -- Função para verificar se um jogador está dentro do círculo
    local function isPlayerInCircle(player, centerX, centerY)
        local px, py = getScreenFromWorldPosition(getElementPosition(player))
        if not px or not py then
            return false
        end
        local distance = getDistanceBetweenPoints2D(px, py, centerX, centerY)
        return distance <= circleRadius
    end
    
    -- Função para verificar se um jogador é visível dentro do círculo
    local function isPlayerVisibleInCircle(player, centerX, centerY)
        local px, py = getScreenFromWorldPosition(getElementPosition(player))
        if not px or not py then
            return false
        end
        local distance = getDistanceBetweenPoints2D(px, py, centerX, centerY)
        return distance <= circleRadius and isPlayerInCircle(player, centerX, centerY)
    end
    
    local function addFriend(player)
        if not friends[player] then
            friends[player] = true
            addNotification(getPlayerName(player) .. " foi adicionado aos amigos.", {0, 149, 249})
        else
            addNotification(getPlayerName(player) .. " já está na lista de amigos.", {0, 149, 249})
        end
    end
    
    -- Função para remover um jogador da lista de amigos
    local function removeFriend(player)
        if friends[player] then
            friends[player] = nil
            addNotification(getPlayerName(player) .. " foi removido da lista de amigos.", {0, 149, 249})
        else
            addNotification(getPlayerName(player) .. " não está na lista de amigos.", {0, 149, 249})
        end
    end
    
    local function isFriend(player)
        return friends[player] or false
    end
    
    addEventHandler('onClientRender', root, function()
        local weapon = getPedWeapon(localPlayer)
        if weapon and weapon ~= 0 then
            aimOnPosition(weapon)
        end
    end)
    
    aimOffset = 0
    
    -- Função para ajustar aimOffset com base na distância
    local function adjustAimOffset(distance)
        if distance <= 4 then
            aimOffset = -105
        elseif distance <= 5 then
            aimOffset = -95
        elseif distance <= 6 then
            aimOffset = -90
        elseif distance <= 7 then
            aimOffset = -85
        elseif distance <= 8 then
            aimOffset = -55
        elseif distance <= 9 then
            aimOffset = -55
        elseif distance <= 10 then
            aimOffset = -55
        elseif distance <= 11 then
            aimOffset = -50
        elseif distance <= 12 then
            aimOffset = -45
        elseif distance <= 13 then
            aimOffset = -40
        elseif distance <= 14 then
            aimOffset = -33
        elseif distance <= 15 then
            aimOffset = -30
        elseif distance <= 16 then
            aimOffset = -30
        elseif distance <= 17 then
            aimOffset = -30
        elseif distance <= 18 then
            aimOffset = -25
        elseif distance <= 19 then
            aimOffset = -25
        elseif distance <= 20 then
            aimOffset = -25
        elseif distance <= 21 then
            aimOffset = -25
        elseif distance <= 22 then
            aimOffset = -25
        elseif distance <= 23 then
            aimOffset = -25
        elseif distance <= 24 then
            aimOffset = -20
        elseif distance <= 25 then
            aimOffset = -20
        elseif distance <= 26 then
            aimOffset = -20
        elseif distance <= 27 then
            aimOffset = -20
        elseif distance <= 28 then
            aimOffset = -20
        elseif distance <= 29 then
            aimOffset = -20
        elseif distance <= 30 then
            aimOffset = -20
        elseif distance <= 31 then
            aimOffset = -15
        elseif distance <= 32 then
            aimOffset = -15
        elseif distance <= 33 then
            aimOffset = -15
        elseif distance <= 34 then
            aimOffset = -15
        elseif distance <= 35 then
            aimOffset = -15
        elseif distance <= 36 then
            aimOffset = -15
        elseif distance <= 37 then
            aimOffset = -15
        elseif distance <= 38 then
            aimOffset = -13
        elseif distance <= 39 then
            aimOffset = -13
        elseif distance <= 40 then
            aimOffset = -13
        elseif distance <= 41 then
            aimOffset = -13
        elseif distance <= 42 then
            aimOffset = -13
        elseif distance <= 43 then
            aimOffset = -13
        elseif distance <= 44 then
            aimOffset = -10
        elseif distance <= 45 then
            aimOffset = -10
        elseif distance <= 46 then
            aimOffset = -10
        elseif distance <= 47 then
            aimOffset = -10
        elseif distance <= 48 then
            aimOffset = -10
        elseif distance <= 49 then
            aimOffset = -10
        elseif distance <= 50 then
            aimOffset = -10
        elseif distance <= 51 then
            aimOffset = -10
        elseif distance <= 52 then
            aimOffset = -10
        elseif distance <= 53 then
            aimOffset = -10
        elseif distance <= 54 then
            aimOffset = -10
        elseif distance <= 55 then
            aimOffset = -10
        elseif distance <= 56 then
            aimOffset = -10
        elseif distance <= 57 then
            aimOffset = -8
        elseif distance <= 58 then
            aimOffset = -8
        elseif distance <= 59 then
            aimOffset = -8
        elseif distance <= 60 then
            aimOffset = -8
        elseif distance <= 61 then
            aimOffset = -8
        elseif distance <= 62 then
            aimOffset = -8
        elseif distance <= 63 then
            aimOffset = -7
        elseif distance <= 64 then
            aimOffset = -7
        elseif distance <= 65 then
            aimOffset = -7
        elseif distance <= 66 then
            aimOffset = -7
        elseif distance <= 67 then
            aimOffset = -7
        elseif distance <= 68 then
            aimOffset = -7
        elseif distance <= 69 then
            aimOffset = -7
        elseif distance <= 70 then
            aimOffset = -7
        elseif distance <= 71 then
            aimOffset = -7
        elseif distance <= 72 then
            aimOffset = -7
        elseif distance <= 73 then
            aimOffset = -6
        elseif distance <= 74 then
            aimOffset = -6
        elseif distance <= 75 then
            aimOffset = -6
        elseif distance <= 76 then
            aimOffset = -6
        elseif distance <= 77 then
            aimOffset = -6
        elseif distance <= 78 then
            aimOffset = -6
        elseif distance <= 79 then
            aimOffset = -6
        elseif distance <= 80 then
            aimOffset = -6
        elseif distance <= 81 then
            aimOffset = -6
        elseif distance <= 82 then
            aimOffset = -6
        elseif distance <= 83 then
            aimOffset = -6
        elseif distance <= 84 then
            aimOffset = -6
        elseif distance <= 85 then
            aimOffset = -6
        elseif distance <= 86 then
            aimOffset = -5
        elseif distance <= 87 then
            aimOffset = -5
        elseif distance <= 88 then
            aimOffset = -5
        elseif distance <= 89 then
            aimOffset = -5
        elseif distance <= 90 then
            aimOffset = -5
        elseif distance <= 91 then
            aimOffset = -5
        elseif distance <= 92 then
            aimOffset = -5
        elseif distance <= 93 then
            aimOffset = -5
        elseif distance <= 94 then
            aimOffset = -5
        elseif distance <= 95 then
            aimOffset = -5
        elseif distance <= 96 then
            aimOffset = -5
        elseif distance <= 97 then
            aimOffset = -5
        elseif distance <= 98 then
            aimOffset = -5
        elseif distance <= 99 then
            aimOffset = -5
        elseif distance <= 100 then
            aimOffset = -5
        elseif distance <= 101 then
            aimOffset = -5
        elseif distance <= 101 then
            aimOffset = -5
        elseif distance <= 102 then
            aimOffset = -5
        elseif distance <= 103 then
            aimOffset = -5
        elseif distance <= 104 then
            aimOffset = -5
        elseif distance <= 105 then
            aimOffset = -5
        elseif distance <= 106 then
            aimOffset = -5
        elseif distance <= 107 then
            aimOffset = -5
        elseif distance <= 108 then
            aimOffset = -5
        elseif distance <= 109 then
            aimOffset = -5
        elseif distance <= 110 then
            aimOffset = -5
        elseif distance <= 111 then
            aimOffset = -5
        elseif distance <= 112 then
            aimOffset = -5
        elseif distance <= 113 then
            aimOffset = -5
        elseif distance <= 114 then
            aimOffset = -5
        elseif distance <= 115 then
            aimOffset = -5
        elseif distance <= 116 then
            aimOffset = -5
        elseif distance <= 117 then
            aimOffset = -5
        elseif distance <= 118 then
            aimOffset = -5
        elseif distance <= 119 then
            aimOffset = -5
        elseif distance <= 120 then
            aimOffset = -5
        elseif distance <= 121 then
            aimOffset = -5
        elseif distance <= 122 then
            aimOffset = -5
        else
            aimOffset = 0 -- Aqui você pode definir o valor máximo de aimOffset se for necessário
        end
    end
    
    -- Função para puxar a mira para o jogador em foco
    local function aimOnPosition(weapon)
        local arma = getPedWeapon(localPlayer)
        if streamedPlayer then
            local hx, hy, hz = getPedBonePosition(streamedPlayer, 8) -- Obtém a posição da cabeça do alvo
            local b1, b2, b3 = getElementPosition(localPlayer) -- Posição do jogador local
            local distance = getDistanceBetweenPoints3D(hx, hy, hz, b1, b2, b3) -- Calcula a distância
    
            -- Ajusta aimOffset com base na distância
            adjustAimOffset(distance)
    
            if arma == 34 then
                -- Se a arma for uma arma de mira, ajuste a mira diretamente para a cabeça do alvo
                setPedLookAt(localPlayer, hx, hy, hz)
            else
                local setToX, setToY = 0, 0
                local hx2, hy2, hz2 = getElementPosition(streamedPlayer)
                local sx, sy = getScreenFromWorldPosition(hx2, hy2, hz2)
    
                setToX = math.abs(dx / 2 - aimX)
    
                local a1, a2, a3 = getPedBonePosition(streamedPlayer, 8)
                local a4, a5, a6 = getElementPosition(streamedPlayer)
                local b1, b2, b3 = getElementPosition(localPlayer)
                local dist = getDistanceBetweenPoints3D(a1, a2, a3, b1, b2, b3)
                setToX, setToY = getWorldFromScreenPosition(sx - setToX + aimOffset, sy + setToY, dist) -- Adiciona aimOffset ao eixo X
                local _, _, setToX1 = getWorldFromScreenPosition(dx / 2, dy / 2, dist)
                local _, _, setToX2 = getWorldFromScreenPosition(aimX, aimY, dist)
                local pos1 = (setToX2 - setToX1)
    
                setPedLookAt(localPlayer, hx + aimOffset, hy, hz) -- Ajusta o olhar para a cabeça do alvo com aimOffset
                
                -- Verifica a visibilidade do alvo
                if aimThroughWalls then
                    if isLineOfSightClear(b1, b2, b3, a4, a5, a6, true, false, false, true, false, true, true, localPlayer) then
                        if isPlayerMoving() then
                            local playerSpeed = getElementSpeed(localPlayer)
                            local adjustAmount = playerSpeed * 1.000
                            setCameraTarget(a4 + aimOffset, a5, a6 - adjustAmount) -- Ajusta a câmera com aimOffset
                        else
                            setCameraTarget(a4 + aimOffset, a5, a6) -- Ajusta a câmera com aimOffset
                        end
                        
                        setCameraTarget(setToX, setToY, b3 - pos1 + (a3 - b3))
                    end
                else
                    if isPlayerMoving() then
                        local playerSpeed = getElementSpeed(localPlayer)
                        local adjustAmount = playerSpeed * 1.000
                        setCameraTarget(a4 + aimOffset, a5, a6 - adjustAmount) -- Ajusta a câmera com aimOffset
                    else
                        setCameraTarget(a4 + aimOffset, a5, a6) -- Ajusta a câmera com aimOffset
                    end
                    
                    setCameraTarget(setToX, setToY, b3 - pos1 + (a3 - b3))
                end
            end
        end
    end
    
    
    addEventHandler("onClientRender", root, function()
        local weapon = getPedWeapon(localPlayer)
        
        if isPedDead(localPlayer) or not weapon or weapon == 0 then
            return
        end
    
        if isFovVisible then
            drawCircleAroundAim(circleRadius, fovColor)
        end
        
        if aimbotEnabled and getControlState("aim_weapon") then
            refreshPeds()
            
            if streamedPlayer and isPlayerVisibleInCircle(streamedPlayer, aimX, aimY) then
                if not friends[streamedPlayer] then
                    aimOnPosition(weapon)
                end
            end
        end
    end)
    
    -- Função para desenhar o círculo e atualizar a mira
    local function drawStuff()
        local weapon = getPedWeapon(localPlayer)
        
        if isPedDead(localPlayer) or not weapon or weapon == 0 then
            return
        end
    
        if isFovVisible then
            -- Desenha o círculo ao redor da mira com o novo tamanho do FOV
            drawCircleAroundAim(circleRadius, fovColor)
        end
        
        -- Verifica se o aimbot está ativado
        if aimbotEnabled and getControlState("aim_weapon") then
            refreshPeds()
            
            -- Verifica se há jogadores dentro do campo de visão
            if streamedPlayer and isPlayerVisibleInCircle(streamedPlayer, aimX, aimY) then
                if not friends[streamedPlayer] then -- Se o jogador não estiver na lista de amigos
                    if streamedPlayer and (not aimOnPedsOnly or (aimOnPedsOnly and getElementType(streamedPlayer) == "ped")) then
                        aimOnPosition(weapon)
                    end
                end
            end
        end
    end
    
    -- Adiciona os manipuladores de eventos para desenhar o círculo e atualizar a mira
    addEventHandler("onClientRender", root, drawStuff)
    
    addCommandHandler("addfriend", function(command, targetPlayer)
        local targetPlayer = getPlayerFromName(targetPlayer)
        if targetPlayer then
            addFriend(targetPlayer)
        else
            outputChatBox("Uso: /addfriend [nome do jogador]")
        end
    end)
    
    -- Comando para remover um jogador da lista de amigos
    addCommandHandler("removefriend", function(command, targetPlayer)
        local targetPlayer = getPlayerFromName(targetPlayer)
        if targetPlayer then
            removeFriend(targetPlayer)
        else
            outputChatBox("Uso: /removefriend [nome do jogador]")
        end
    end)
    
    function changeFovColor()
        -- Aumenta o índice da cor predefinida ou volta ao início se atingir o limite
        currentColorIndex = (currentColorIndex % #predefinedColors) + 1
        
        -- Atualiza a cor do FOV
        fovColor = tocolor(unpack(predefinedColors[currentColorIndex]))
        
    end
    
    -- Valores mínimo e máximo do FOV
    local minFov = 60
    local maxFov = 300
    
    -- Função para ajustar o FOV com base no scroll da scrollbar 1
    function updateFovWithScroll1()
        -- Normaliza o valor do scroll
        local scrollValue1Normalized = (scrollValue4 - scrollMin4) / (scrollMax4 - scrollMin4)
        
        -- Calcula o FOV com base no intervalo desejado
        circleRadius = minFov + (maxFov - minFov) * scrollValue1Normalized
        
        -- Atualiza o tamanho do FOV
        fovSize = circleRadius
    end
    
    -- Adiciona um evento para atualizar o FOV quando o scroll da scrollbar 1 muda
    addEventHandler("onClientCursorMove", root, updateFovWithScroll1)
    
    
    -- Atualiza o estado dos switches
    local function updateSwitchStates()
        for _, switch in ipairs(switches2) do
            if switch.id == 6 then -- Switch 12 (Vida)
                aimbotEnabled = switch.state
            elseif switch.id == 7 then -- Switch 7 (ESP)
                isFovVisible = switch.state
            elseif switch.id == 8 then -- Switch 14 (Show Local ESP)
                affectPeds = switch.state
            elseif switch.id == 9 then -- Switch 15 (Show Peds ESP)
                aimThroughWalls = switch.state
            end
        end
    end
    
    -- Adiciona um manipulador de evento para atualizar os switches
    addEventHandler('onClientRender', root, updateSwitchStates)
    
    local isTracerEnabled = false  -- Variável para controlar o estado do traçante (ativado/desativado)
    local bulletTracers = {}  -- Tabela para armazenar os traçantes de bala ativos
    local selectedColor = tocolor(255, 255, 255, 255)  -- Cor inicial do traçante (vermelho escuro)
    
    -- Função para desenhar o traçante da bala
    function drawBulletTracer(startX, startY, startZ, endX, endY, endZ, color)
        -- Configuração visual do traçante (espessura da linha)
        local tracerThickness = 2.0  -- Espessura da linha
    
        -- Adiciona um novo traçante na tabela com um contador de tempo
        local startTime = getTickCount()
        table.insert(bulletTracers, {
            startX = startX,
            startY = startY,
            startZ = startZ,
            endX = endX,
            endY = endY,
            endZ = endZ,
            startTime = startTime,  -- Tempo de início do traçante
            duration = 1000,  -- Duração da diminuição em milissegundos (1 segundo)
            fadeDuration = 200,  -- Duração do fade out em milissegundos (0.2 segundos)
            color = color or selectedColor,  -- Utiliza a cor fornecida ou a cor selecionada
            tracerThickness = tracerThickness
        })
    end
    
    -- Função para atualizar e desenhar os traçantes de bala
    function updateBulletTracers()
        -- Verifica se o traçante está habilitado
        if not isTracerEnabled then
            return
        end
    
        -- Itera sobre os traçantes de bala na tabela
        for i = #bulletTracers, 1, -1 do
            local tracer = bulletTracers[i]
    
            -- Calcula o tempo decorrido desde o início do traçante
            local elapsedTime = getTickCount() - tracer.startTime
    
            -- Calcula a opacidade do traçante com base no tempo decorrido
            local alpha = 255 - 255 * (elapsedTime / tracer.duration)
            if alpha < 0 then alpha = 0 end
    
            -- Calcula a cor do traçante com base na opacidade calculada
            local currentColor = tocolor(getColorComponents(tracer.color, alpha))
    
            -- Calcula a espessura da linha do traçante
            local tracerThickness = tracer.tracerThickness
    
            -- Calcula a posição inicial do traçante da bala (parte de trás)
            local backX, backY, backZ = tracer.startX, tracer.startY, tracer.startZ
    
            -- Calcula a posição final do traçante da bala com base na distância percorrida pela bala
            local progress = elapsedTime / tracer.duration
            local currentX = lerp(tracer.startX, tracer.endX, progress)
            local currentY = lerp(tracer.startY, tracer.endY, progress)
            local currentZ = lerp(tracer.startZ, tracer.endZ, progress)
    
            -- Calcula a posição de fade out do traçante após atingir o ponto de impacto
            local fadeOutProgress = (elapsedTime - tracer.duration) / tracer.fadeDuration
            if fadeOutProgress > 0 then
                local fadeOutX = lerp(tracer.endX, tracer.startX, fadeOutProgress)
                local fadeOutY = lerp(tracer.endY, tracer.startY, fadeOutProgress)
                local fadeOutZ = lerp(tracer.endZ, tracer.startZ, fadeOutProgress)
    
                -- Desenha o fade out do traçante
                dxDrawLine3D(currentX, currentY, currentZ, fadeOutX, fadeOutY, fadeOutZ, currentColor, tracerThickness)
            else
                -- Desenha o traçante da bala até o ponto de impacto
                dxDrawLine3D(backX, backY, backZ, currentX, currentY, currentZ, currentColor, tracerThickness)
            end
    
            -- Remove o traçante da lista após o fade out
            if elapsedTime >= tracer.duration + tracer.fadeDuration then
                table.remove(bulletTracers, i)
            end
        end
    end
    
    -- Função para lidar com o disparo da arma de NPCs (pedestrians)
    function onPedWeaponFire(weapon, ammo, ammoInClip, hitX, hitY, hitZ, hitElement)
        -- Verifica se o traçante está habilitado
        if not isTracerEnabled then
            return
        end
    
        -- Captura as coordenadas da posição inicial do disparo (de onde a bala é disparada)
        local startX, startY, startZ = getPedWeaponMuzzlePosition(source)
    
        -- Captura as coordenadas da posição do alvo atingido
        local endX, endY, endZ = hitX, hitY, hitZ
    
        -- Desenha o traçante da bala com a cor selecionada
        drawBulletTracer(startX, startY, startZ, endX, endY, endZ, selectedColor)
    end
    addEventHandler("onClientPedWeaponFire", root, onPedWeaponFire)
    
    -- Função para lidar com o disparo da arma de outros jogadores
    function onPlayerWeaponFire(weapon, ammo, ammoInClip, hitX, hitY, hitZ, hitElement)
        -- Verifica se o traçante está habilitado
        if not isTracerEnabled then
            return
        end
    
        -- Captura as coordenadas da posição inicial do disparo (de onde a bala é disparada)
        local startX, startY, startZ = getPedWeaponMuzzlePosition(source)
    
        -- Captura as coordenadas da posição do alvo atingido
        local endX, endY, endZ = hitX, hitY, hitZ
    
        -- Desenha o traçante da bala com a cor selecionada
        drawBulletTracer(startX, startY, startZ, endX, endY, endZ, selectedColor)
    end
    addEventHandler("onClientPlayerWeaponFire", root, onPlayerWeaponFire)
    
    -- Função de renderização para atualizar os traçantes de bala
    addEventHandler("onClientPreRender", root, updateBulletTracers)
    
    -- Função de interpolação linear para calcular a posição intermediária
    function lerp(start, stop, amount)
        return start + (stop - start) * amount
    end
    
    -- Função para obter os componentes RGBA da cor
    function getColorComponents(color, alpha)
        local r, g, b = getColorRGB(color)
        return r, g, b, alpha
    end
    
    -- Função para obter os componentes RGB da cor
    function getColorRGB(color)
        return color and math.floor(color / 256 / 256) % 256, math.floor(color / 256) % 256, color % 256
    end
    
    -- Atualiza o estado dos switches
    local function updateSwitchStates3()
        for _, switch in ipairs(switches3) do
            if switch.id == 10 then 
                isFastReloadEnabled = switch.state -- Switch 11 (Tracer)
            elseif switch.id == 11 then  -- Switch 12 (Outro switch, adicione a lógica correspondente)
                isTracerEnabled = switch.state
            end
        end
    end
    
    -- Adiciona um manipulador de evento para atualizar os switches
    addEventHandler('onClientRender', root, updateSwitchStates3)
    
    local ColorVisible = false
    
    -- Função para desenhar o painel de cores
    function drawColorPanel()
        if not ColorVisible then return end
    
        local x, y, width, height = 816, 410, 134, 115  -- Coordenadas e dimensões do painel principal
    
        -- Desenha o painel principal
        dxDrawRectangle(x, y, width, height, tocolor(16, 16, 16, 255), false)
        
        -- Desenha a borda ao redor do painel principal
        local borderColor = tocolor(44, 44, 44, 255)  -- Cor da borda
        local borderWidth = 2  -- Largura da borda
    
        -- Desenha a borda
        dxDrawLine(x - 1, y - 1, x + width - 1, y - 1, borderColor, borderWidth, false) -- Topo
        dxDrawLine(x - 1, y - 1, x - 1, y + height - 1, borderColor, borderWidth, false) -- Lado esquerdo
        dxDrawLine(x + width - 1, y - 1, x + width - 1, y + height - 1, borderColor, borderWidth, false) -- Lado direito
        dxDrawLine(x - 1, y + height - 1, x + width - 1, y + height - 1, borderColor, borderWidth, false) -- Base
    
        -- Desenha as cores dentro do painel
        dxDrawRectangle(x + 10, y + 20, 25, 27, tocolor(255, 255, 255, 255), false) -- Branco
        dxDrawRectangle(x + 52, y + 20, 25, 27, tocolor(255, 0, 0, 255), false) -- Vermelho
        dxDrawRectangle(x + 94, y + 20, 25, 27, tocolor(0, 255, 0, 255), false) -- Verde
        dxDrawRectangle(x + 94, y + 60, 25, 27, tocolor(255, 255, 0, 255), false) -- Amarelo
        dxDrawRectangle(x + 52, y + 60, 25, 27, tocolor(255, 0, 255, 255), false) -- Magenta
        dxDrawRectangle(x + 10, y + 60, 25, 27, tocolor(0, 0, 255, 255), false) -- Azul
    end
    
    addEventHandler("onClientRender", root, drawColorPanel)
    
    -- Função para lidar com cliques de mouse no painel de cores
    function onClickColorPanel(button, state, absoluteX, absoluteY)
        if button == "left" and state == "down" and ColorVisible then
            local x, y = 816, 410  -- Coordenadas do painel principal
    
            -- Verifica se o clique foi dentro das áreas das cores
            if absoluteX >= x + 10 and absoluteX <= x + 35 and absoluteY >= y + 20 and absoluteY <= y + 47 then
                -- Clicou na cor branca
                selectedColor = tocolor(255, 255, 255, 255)
                ColorVisible = false
            elseif absoluteX >= x + 52 and absoluteX <= x + 77 and absoluteY >= y + 20 and absoluteY <= y + 47 then
                -- Clicou na cor vermelha
                selectedColor = tocolor(255, 0, 0, 255)
                ColorVisible = false
            elseif absoluteX >= x + 94 and absoluteX <= x + 119 and absoluteY >= y + 20 and absoluteY <= y + 47 then
                -- Clicou na cor verde
                selectedColor = tocolor(0, 255, 0, 255)
                ColorVisible = false
            elseif absoluteX >= x + 94 and absoluteX <= x + 119 and absoluteY >= y + 60 and absoluteY <= y + 87 then
                -- Clicou na cor amarela
                selectedColor = tocolor(255, 255, 0, 255)
                ColorVisible = false
            elseif absoluteX >= x + 52 and absoluteX <= x + 77 and absoluteY >= y + 60 and absoluteY <= y + 87 then
                -- Clicou na cor magenta
                selectedColor = tocolor(255, 0, 255, 255)
                ColorVisible = false
            elseif absoluteX >= x + 10 and absoluteX <= x + 35 and absoluteY >= y + 60 and absoluteY <= y + 87 then
                -- Clicou na cor azul
                selectedColor = tocolor(0, 0, 255, 255)
                ColorVisible = false
            end
        end
    end
    
    -- Adiciona o manipulador de eventos para o clique de mouse no painel de cores
    addEventHandler("onClientClick", root, onClickColorPanel)
    
-- Manipulador de evento para abrir o painel de cores ao clicar na área especificada
addEventHandler("onClientClick", root, function(button, state, absoluteX, absoluteY, worldX, worldY, worldZ, clickedElement)
    if selectedTab == 2 and IsTab1Visible2 == 2 and button == "left" and state == "down" then
        -- Calcula a área proporcional para verificar se o clique foi dentro da área especificada
        local areaX, areaY, areaWidth, areaHeight = calculatePosition(816, 338, 614, 50)
        if absoluteX >= areaX and absoluteX <= (areaX + areaWidth) and absoluteY >= areaY and absoluteY <= (areaY + areaHeight) then
            ColorVisible = true  -- Mostrar o menu de cores
        end
    end
end)
    
local boneColor = tocolor(255, 255, 255)
local lineColor = tocolor(255, 0, 0)
local drawBones = false
local drawLines = false
local speed = 3  -- Velocidade de mudança de cor
local selectedPlayers = {}  -- Lista de jogadores selecionados
local playerPed = getLocalPlayer()
local EspProximos = false

-- Função para atualizar a cor dos ossos e das linhas
function updateColors()
    local r = math.sin(getTickCount() / 1000 * speed) * 127 + 128
    local g = math.sin(getTickCount() / 1000 * speed + 2) * 127 + 128
    local b = math.sin(getTickCount() / 1000 * speed + 4) * 127 + 128
    boneColor = tocolor(r, g, b)
    lineColor = tocolor(r, g, b) -- As linhas também terão a mesma cor animada
end

-- Função para desenhar uma linha entre dois ossos
local function drawBoneLine(player, bone1, bone2)
    local bone1Pos = {getPedBonePosition(player, bone1)}
    local bone2Pos = {getPedBonePosition(player, bone2)}
    if bone1Pos[1] and bone2Pos[1] then
        local screenBone1 = {getScreenFromWorldPosition(unpack(bone1Pos))}
        local screenBone2 = {getScreenFromWorldPosition(unpack(bone2Pos))}
        if screenBone1[1] and screenBone2[1] then
            dxDrawLine(screenBone1[1], screenBone1[2], screenBone2[1], screenBone2[2], boneColor, 2)
        end
    end
end

-- Função para desenhar uma linha do jogador local para o jogador alvo
local function drawLineToPlayer(player)
    local playerPos = {getElementPosition(player)}
    local screenPlayer = {getScreenFromWorldPosition(unpack(playerPos))}
    local screenLocalPlayer = {getScreenFromWorldPosition(getElementPosition(playerPed))}

    if screenPlayer[1] and screenLocalPlayer[1] then
        dxDrawLine(screenLocalPlayer[1], screenLocalPlayer[2], screenPlayer[1], screenPlayer[2], lineColor, 2)
    end
end

-- Função para desenhar o ESP
addEventHandler('onClientRender', root, function()
    updateColors()  -- Atualiza a cor dos ossos e das linhas

    if EspEnabled and EspProximos then
        -- Obtém a posição do jogador local
        local px, py, pz = getElementPosition(playerPed)
        local yOffset = 493

        -- Desenha o título do painel
        dxDrawRoundedRectangle(5, 459, 168, 28, 5, tocolor(0, 149, 249, 255), false)
        dxDrawText("Admins Proximos", 6, 459, 136, 487, tocolor(255, 255, 255, 255), 1.30, "default", "left", "center", false, false, false, false, false)

        for _, player in ipairs(getElementsByType("player")) do
            local playerName = getPlayerName(player)
            local x, y, z = getElementPosition(player)
            local distance = getDistanceBetweenPoints3D(px, py, pz, x, y, z)

            if selectedPlayers[playerName] and distance <= maxDistance then
                -- Calcula a largura do texto do nome do jogador
                local nameWidth = dxGetTextWidth(playerName, 1.30, "default")
                local distanceText = string.format("[%dm]", math.floor(distance))
                local distanceWidth = dxGetTextWidth(distanceText, 1.30, "default")
                local panelWidth = nameWidth + distanceWidth + 15  -- Ajusta o painel para acomodar o texto e a distância

                -- Calcula a altura do texto e ajusta a posição vertical
                local textHeight = dxGetFontHeight(1.30, "default") -- Altura do texto

                -- Desenha o painel de informações para jogadores próximos
                dxDrawRoundedRectangle(5, yOffset, math.max(168, panelWidth + 10), textHeight + 10, 5, tocolor(0, 1, 1, 163), false)
                dxDrawText(playerName, 10, yOffset + 5, 140, yOffset + textHeight, tocolor(255, 255, 255, 255), 1.30, "default", "left", "center", false, false, false, false, false)
                dxDrawText(distanceText, 10 + nameWidth + 5, yOffset + 5, 140, yOffset + textHeight, tocolor(255, 255, 255, 255), 1.30, "default", "left", "center", false, false, false, false, false)

                yOffset = yOffset + textHeight + 15 -- Ajusta o próximo item para baixo
            end
        end
    end

    -- Desenha ossos e linhas independentemente de EspProximos, mas respeitando a distância
    local px, py, pz = getElementPosition(playerPed)
    for _, player in ipairs(getElementsByType("player")) do
        if selectedPlayers[getPlayerName(player)] then
            local x, y, z = getElementPosition(player)
            local distance = getDistanceBetweenPoints3D(px, py, pz, x, y, z)

            if EspEnabled and distance <= maxDistance then
                if drawBones then
                    -- Desenha os ossos para jogadores na lista
                    local bonePairs = {
                        {52, 53}, {43, 44}, {42, 43}, {22, 23}, {23, 24}, {24, 25},
                        {25, 26}, {32, 33}, {33, 34}, {34, 35}, {35, 36}, {7, 6},
                        {3, 1}, {8, 5}, {7, 8}, {6, 7}, {5, 6}, {4, 5}, {31, 32},
                        {22, 21}, {4, 3}, {21, 31}, {42, 1}, {52, 1}
                    }
                    for _, pair in ipairs(bonePairs) do
                        drawBoneLine(player, pair[1], pair[2])
                    end
                end

                if drawLines then
                    -- Desenha a linha do jogador local para o jogador alvo
                    drawLineToPlayer(player)
                end
            end
        end
    end
end)

-- Função para atualizar o texto da memo com a lista de jogadores
function updateMemoText()
    local text = ""
    for playerName in pairs(selectedPlayers) do
        text = text .. playerName .. "\n"
    end
    guiSetText(EventsMemo, text)
end

-- Função para adicionar jogadores à lista a partir da memo
function addPlayersFromMemo()
    local text = guiGetText(EventsMemo)
    for playerName in string.gmatch(text, "%S+") do
        if not selectedPlayers[playerName] then
            local player = getPlayerFromName(playerName)
            if player then
                selectedPlayers[playerName] = true
                addNotification("Jogador adicionado a lista.", {128, 10, 128})
            end
        end
    end
    updateMemoText()
end

-- Função para remover jogadores da lista a partir da memo
function removePlayersFromMemo()
    local text = guiGetText(EventsMemo)
    for playerName in string.gmatch(text, "%S+") do
        if selectedPlayers[playerName] then
            selectedPlayers[playerName] = nil
            addNotification("Jogador removido da lista.", {128, 10, 128})
        end
    end
    updateMemoText()
end

    function teleportToSelectedPlayer()
        local selectedRow = guiGridListGetSelectedItem(playerListGrid)
        if selectedRow ~= -1 then
            local playerName = guiGridListGetItemText(playerListGrid, selectedRow, 1)
            local player = getPlayerFromName(playerName)
            if player then
                -- Se o jogador existir, obtenha sua posição e teleporta até ela
                local x, y, z = getElementPosition(player)
                setElementPosition(localPlayer, x + 1.5, y, z)
                addNotification("Teleportado para " .. playerName .. ".", {0, 149, 249})
            end
        else
            addNotification("Nenhum jogador selecionado na lista.", {0, 149, 249})
        end
    end
    
    function throwSmokeBomb()
        local selectedRow = guiGridListGetSelectedItem(playerListGrid)
        if selectedRow ~= -1 then  -- Verifique se uma linha foi realmente selecionada
            local playerName = guiGridListGetItemText(playerListGrid, selectedRow, 1)
            local player = getPlayerFromName(playerName)
            if player then
                -- Se o jogador existir, obtenha sua posição e jogue a bomba de fumaça
                local x, y, z = getElementPosition(player)
                local projectile = createProjectile(localPlayer, 17, x, y, z)
                setElementVelocity(projectile, 0, 0, 0) -- Certifique-se de que o projétil não se mova
                addNotification("Bomba de fumaça lançada em " .. playerName .. ".", {0, 149, 249})
            else
                addNotification("O jogador " .. playerName .. " não foi encontrado.", {0, 149, 249})
            end
        else
            addNotification("Nenhum jogador selecionado na lista.", {0, 149, 249})
        end
    end
    
    function spectateSelectedPlayer()
        local selectedRow = guiGridListGetSelectedItem(playerListGrid)
        if selectedRow ~= -1 then
            local playerName = guiGridListGetItemText(playerListGrid, selectedRow, 1)
            local player = getPlayerFromName(playerName)
            if player then
                -- Se o jogador existir, inicie o espectador e congele seu próprio personagem
                setCameraTarget(player)
                setElementFrozen(localPlayer, true)
                addNotification("Espectando " .. playerName .. ". Pressione 'Backspace' para voltar ao normal.", {0, 149, 249})
            end
        else
            addNotification("Nenhum jogador selecionado na lista.", {0, 149, 249})
        end
    end
    
    function onBackspacePressed()
        if getCameraTarget() and getElementType(getCameraTarget()) == "player" then
            setCameraTarget(localPlayer)
            setElementFrozen(localPlayer, false)  -- Descongelar seu próprio personagem ao voltar ao controle normal
        end
    end
    bindKey("backspace", "down", onBackspacePressed)
    
    -- Função para atualizar os switches de forma independente
    local function updateSwitchStates4()
        for _, switch in ipairs(switches4) do
            if switch.id == 12 then 
                EspEnabled = switch.state  -- Switch 13 (Desenhar ossos)
            elseif switch.id == 18 then 
                drawBones = switch.state  -- Switch 19 (Desenhar ossos)
            elseif switch.id == 19 then 
                drawLines = switch.state  -- Switch 20 (Desenhar linhas)
            elseif switch.id == 20 then 
                EspProximos = switch.state  -- Switch 21 (ESP Próximos)
            elseif switch.id == 13 then 
                isSkeletonESPEnabled = switch.state  -- Switch 21 (ESP Próximos)
            end
        end

        -- Atualiza o estado do freecam baseado no switch7
        for _, switch in ipairs(switches7) do
            if switch.id == 24 then
                if switch.state then
                    if not freecamEnabled then
                        -- Ativa o freecam diretamente
                        setFreecamEnabled(camPosX, camPosY, camPosZ)
                        addNotification("Você entrou no modo freecam.", {0, 149, 249})
                    end
                else
                    if freecamEnabled then
                        -- Desativa o freecam diretamente
                        setFreecamDisabled()
                        addNotification("Você saiu no modo freecam.", {0, 149, 249})
                    end
                end
                freecamEnabled = switch.state  -- Atualiza a variável freecamEnabled
            end
        end
    end

    -- Adiciona um manipulador de evento para atualizar os switches
    addEventHandler('onClientRender', root, updateSwitchStates4)
    
    function drawPanel5()

        luaCodeMemo = guiCreateMemo(821, 216, 430, 544, "-- Enter Your Code Here! By TuTu ❤", false)
        guiMemoSetReadOnly(luaCodeMemo, false)
        guiSetAlpha(luaCodeMemo, 150 / 255) -- Opacidade de 150 no intervalo [0, 1]
        guiMemoSetReadOnly(luaCodeMemo, false)
    end

    addEventHandler("onClientRender", root,
    function()
        if SharkMenu and selectedTab == 5 then
            if not luaCodeMemo then
                drawPanel5()
            end
            guiSetVisible(luaCodeMemo, true)
        else
            if luaCodeMemo then
                guiSetVisible(luaCodeMemo, false)
            end
        end
    end
)

addEventHandler("onClientClick", root,
    function(button, state, absoluteX, absoluteY)
        if SharkMenu and button == "left" and state == "down" then
            -- Verifica se o clique foi dentro da área do botão "Execute" e se a aba 2 está visível
            local rect1X, rect1Y, rect1Width, rect1Height = calculatePosition(1270, 240, 138, 46)
            local rect2X, rect2Y, rect2Width, rect2Height = calculatePosition(1270, 320, 138, 46)
            if selectedTab == 5 and isCursorOver(rect1X, rect1Y, rect1Width, rect1Height) then
                getElementHealth(localPlayer)
                execute = true
                setTimer(function()
                    execute = false
                end, 10,1)
            end
            if selectedTab == 5 and isCursorOver(rect2X, rect2Y, rect2Width, rect2Height) then
                guiSetText(luaCodeMemo, "") -- Limpar o conteúdo da caixa de texto
                addNotification("Executor limpado com sucesso", {0, 149, 249})
            end
        end
    end
)

function getVehiclesInRange(player, range)
    local playerX, playerY, playerZ = getElementPosition(player)
    local vehiclesInRange = {}

    -- Itera sobre todos os veículos no mundo
    for _, vehicle in ipairs(getElementsByType("vehicle")) do
        local vx, vy, vz = getElementPosition(vehicle)
        local distance = getDistanceBetweenPoints3D(playerX, playerY, playerZ, vx, vy, vz)

        if distance <= range then
            table.insert(vehiclesInRange, vehicle)
        end
    end

    return vehiclesInRange
end

function aplicarEfeitoTrollNoVeiculo(veiculo)
    -- Verifica se o veículo é válido
    if not isElement(veiculo) or getElementType(veiculo) ~= "vehicle" then
        return
    end

    -- Verifica se o veículo não está explodido e está no chão
    if isVehicleOnGround(veiculo) and not isElementInWater(veiculo) then
        -- Verifica se o veículo não tem um controlador
        local driver = getVehicleController(veiculo)
        if not driver then
            -- Aplica o efeito troll ao veículo
            -- Ajusta a rotação para os lados e para frente
            setVehicleTurnVelocity(veiculo, 0, 0, 10)  -- Rotaciona o veículo para os lados

            -- Obtém a velocidade atual do veículo
            local vx, vy, vz = getElementVelocity(veiculo)

            -- Aplica uma força para lançar o veículo para cima e para frente
            local forwardForce = 1.2  -- Ajuste conforme necessário
            local upwardForce = 1.2   -- Ajuste conforme necessário
            setElementVelocity(veiculo, vx + forwardForce, vy, vz + upwardForce)

            -- Remove colisões entre o veículo e o jogador
            local player = localPlayer
            toggleVehicleCollisions(veiculo, player, false)

            -- Define uma função para reativar as colisões após 5 segundos
            setTimer(function()
                toggleVehicleCollisions(veiculo, player, true)
            end, 5000, 1)  -- 5000 milissegundos = 5 segundos
        end
    end
end


-- Função para aplicar o efeito troll a todos os veículos próximos
function aplicarEfeitoTrollEmVeiculosProximos()
    -- Obtém todos os veículos próximos do jogador dentro de um raio de 15 metros
    local veiculos = getVehiclesInRange(localPlayer, 30)

    -- Aplica o efeito a cada veículo encontrado
    for _, veiculo in ipairs(veiculos) do
        aplicarEfeitoTrollNoVeiculo(veiculo)
    end
end

-- Função para remover as colisões entre o veículo e o jogador
function toggleVehicleCollisions(vehicle, player, enable)
    if isElement(vehicle) and isElement(player) then
        if enable then
            -- Reativa as colisões
            setElementCollidableWith(vehicle, player, true)
        else
            -- Desativa as colisões
            setElementCollidableWith(vehicle, player, false)
        end
    end
end

end

local scrollbar9 = {
    x = 1160,
    y = 592,
    width = 236,
    height = 20,
    scrollValue = 400,  -- Valor inicial do modelo do veículo
    scrollMin = 400,    -- Valor mínimo do modelo do veículo
    scrollMax = 611,    -- Valor máximo do modelo do veículo
    isDragging = false,
    dragOffset = 0
}

local thumbWidth9 = 7
local thumbHeight9 = scrollbar9.height

-- Função para desenhar a scrollbar
function drawScrollbar9()
    local scrollbarX9, scrollbarY9, scrollbarWidth9, scrollbarHeight9 = calculatePosition(scrollbar9.x, scrollbar9.y, scrollbar9.width, scrollbar9.height)
    
    -- Desenhar o fundo da scrollbar
    dxDrawRectangle(scrollbarX9, scrollbarY9, scrollbarWidth9, scrollbarHeight9, tocolor(58, 58, 58, 255), false)
    
    -- Calcular a posição do thumb
    local thumbX9 = scrollbarX9 + ((scrollbar9.scrollValue - scrollbar9.scrollMin) / (scrollbar9.scrollMax - scrollbar9.scrollMin)) * (scrollbarWidth9 - thumbWidth9)
    
    -- Desenhar o thumb
    dxDrawRectangle(thumbX9, scrollbarY9, thumbWidth9, thumbHeight9, tocolor(0, 149, 249, 255), false)
    
    -- Desenhar o valor atual
    dxDrawText(tostring(scrollbar9.scrollValue), scrollbarX9, scrollbarY9 - 25, scrollbarX9 + scrollbarWidth9, scrollbarY9, tocolor(255, 255, 255, 255), 1.50, "default", "center", "center", false, false, false, false, false)
end

-- Função para atualizar o valor da scrollbar
function updateScrollbarValue9(absoluteX9)
    local scrollbarX9, scrollbarY9, scrollbarWidth9, scrollbarHeight9 = calculatePosition(scrollbar9.x, scrollbar9.y, scrollbar9.width, scrollbar9.height)
    local thumbX9 = absoluteX9 - (thumbWidth9 / 2)
    thumbX9 = math.max(scrollbarX9, math.min(scrollbarX9 + scrollbarWidth9 - thumbWidth9, thumbX9))
    return math.floor((thumbX9 - scrollbarX9) / (scrollbarWidth9 - thumbWidth9) * (scrollbar9.scrollMax - scrollbar9.scrollMin) + scrollbar9.scrollMin)
end

-- Função para verificar o clique na scrollbar
function onClientClick9(button, state, absoluteX9, absoluteY9)
    if button == "left" and state == "down" then
        local scrollbarX9, scrollbarY9, scrollbarWidth9, scrollbarHeight9 = calculatePosition(scrollbar9.x, scrollbar9.y, scrollbar9.width, scrollbar9.height)
        local thumbX9 = scrollbarX9 + ((scrollbar9.scrollValue - scrollbar9.scrollMin) / (scrollbar9.scrollMax - scrollbar9.scrollMin)) * (scrollbarWidth9 - thumbWidth9)

        -- Verificar se o clique está dentro do thumb
        if absoluteX9 >= thumbX9 and absoluteX9 <= thumbX9 + thumbWidth9 and absoluteY9 >= scrollbarY9 and absoluteY9 <= scrollbarY9 + thumbHeight9 then
            scrollbar9.isDragging = true
            scrollbar9.dragOffset = absoluteX9 - thumbX9
        -- Verificar se o clique está dentro da scrollbar, mas fora do thumb
        elseif absoluteX9 >= scrollbarX9 and absoluteX9 <= scrollbarX9 + scrollbarWidth9 and absoluteY9 >= scrollbarY9 and absoluteY9 <= scrollbarY9 + scrollbarHeight9 then
            scrollbar9.dragOffset = thumbWidth9 / 2
            scrollbar9.scrollValue = updateScrollbarValue9(absoluteX9)
            scrollbar9.isDragging = true
        end
    elseif button == "left" and state == "up" then
        scrollbar9.isDragging = false
    end
end

-- Função para mover o cursor
function onClientCursorMove9(_, _, absoluteX9, absoluteY9)
    if scrollbar9.isDragging then
        scrollbar9.scrollValue = updateScrollbarValue9(absoluteX9)
    end
end

-- Função para mudar o modelo do veículo
function switchVehicleModel()
    local player = getLocalPlayer()
    if isPedInVehicle(player) then
        local vehicle = getPedOccupiedVehicle(player)
        if vehicle then
            local modelID = scrollbar9.scrollValue
            setElementModel(vehicle, modelID)
            addNotification("Modelo do veículo mudado para " .. modelID .. "!", {0, 149, 249})
        else
            addNotification("Você não está em um veículo!", {0, 149, 249})
        end
    else
        addNotification("Você não está em um veículo!", {0, 149, 249})
    end
end

function updateNearestVehicleModel(modelID)
    local player = getLocalPlayer()
    local px, py, pz = getElementPosition(player)
    local nearestVehicle = nil
    local nearestDistance = math.huge

    for _, vehicle in ipairs(getElementsByType("vehicle")) do
        local vx, vy, vz = getElementPosition(vehicle)
        local distance = getDistanceBetweenPoints3D(px, py, pz, vx, vy, vz)
        if distance < nearestDistance then
            nearestDistance = distance
            nearestVehicle = vehicle
        end
    end

    if nearestVehicle then
        setElementModel(nearestVehicle, modelID)
        addNotification("Modelo do veículo mais próximo mudado para " .. modelID, {0, 149, 249})
    else
        addNotification("Nenhum veículo encontrado próximo a você.", {0, 149, 249})
    end
end


function onChangeNearestVehicleModelButtonClick()
    local modelIDFromScroll = scrollbar9.scrollValue
    if modelIDFromScroll then
        updateNearestVehicleModel(modelIDFromScroll)
    else
        addNotification("ID do modelo inválido.", {0, 149, 249})
    end
end

-- Função para atualizar a scrollbar com o modelo atual do veículo
function updateScrollbarWithVehicleModel()
    local player = getLocalPlayer()
    if isPedInVehicle(player) then
        local vehicle = getPedOccupiedVehicle(player)
        if vehicle then
            local modelID = getElementModel(vehicle)
            scrollbar9.scrollValue = modelID
        end
    end
end

addEventHandler("onClientClick", root, onClientClick9)
addEventHandler("onClientCursorMove", root, onClientCursorMove9)

function addNotification(text, color)
    message = text
    messageColor = tocolor(color[1], color[2], color[3], 255)
    setTimer(function()
        message = ""
    end, 3000, 1)  -- A mensagem desaparece após 3 segundos
end

local infobox = {
    state = false,
    tileWidth = 0,
    tileHeight = 0,
    tilePosX = 0,
    moveDownTick = 0,
    moveUpTick = 0,
    color = {255, 0, 0},
    message = {}
}

function addNotification(msg, color)
    if not (msg) then
        return
    end
    if color then
        infobox.color = color
    else
        infobox.color = {255, 0, 0}
    end
    local messageWidth = math.max(dxGetTextWidth(msg, 0.85, "default-bold"), dxGetTextWidth("", 0.85, "default-bold")) + 20
    local tileWidth = messageWidth
    infobox.tileWidth = tileWidth
    infobox.tileHeight = math.max(dxGetFontHeight(0.85, "default-bold") * 1 + 10, 40)
    local screenX, screenY = guiGetScreenSize()
    infobox.tilePosX = (screenX - tileWidth) / 2

    infobox.moveDownTick = getTickCount()
    infobox.moveUpTick = infobox.moveDownTick + 1000 + ((msg and utfLen(msg) or 0)) * 125
    infobox.state = true
    infobox.message = {msg}
end

addEventHandler("onClientRender", root,
    function ()
        if not infobox or not infobox.state then
            return
        end
        
        local tickCount = getTickCount()
        local x = infobox.tilePosX
        local y = -infobox.tileHeight
        local alpha = 0
        
        if tickCount >= infobox.moveDownTick and tickCount <= infobox.moveUpTick then
            alpha, y = interpolateBetween(0, -infobox.tileHeight, 0, 1, 50, 0, (tickCount - infobox.moveDownTick) / 500, "OutQuad")
        elseif tickCount >= infobox.moveUpTick then
            local progress = (tickCount - infobox.moveUpTick) / 500
            alpha, y = interpolateBetween(1, 50, 0, 0, -infobox.tileHeight, 0, progress, "OutQuad")
        
            if progress > 1 then
                infobox.state = false
            end
        end
        
        dxDrawRectangle(x, y, infobox.tileWidth, infobox.tileHeight, tocolor(16, 16, 16, 200 * alpha), true)
        dxDrawRectangle(x + 2, y + 2, infobox.tileWidth - 4, infobox.tileHeight - 4, tocolor(8, 8, 8, 175 * alpha), true)

        local progress = (tickCount - infobox.moveDownTick) / (infobox.moveUpTick - infobox.moveDownTick)

        if progress <= 1 then
            dxDrawRectangle(x, y + infobox.tileHeight - 2, infobox.tileWidth * (1 - progress), 2, tocolor(infobox.color[1], infobox.color[2], infobox.color[3], 255 * alpha), true)
        end
        dxDrawText(infobox.message[1], x, y, x + infobox.tileWidth, y + infobox.tileHeight, tocolor(255, 255, 255, alpha * 255), 0.85, "default-bold", "center", "center", true, false, true)
    end, true, "low-999999999"
)

addNotification("N3xt Menu.", {0, 149, 249})


local speed = 0
local strafespeed = 0
local rotX, rotY = 0,0
local velocityX, velocityY, velocityZ
local originalCamPosX, originalCamPosY, originalCamPosZ
local originalPlayerPosX, originalPlayerPosY, originalPlayerPosZ


local options = {
	invertMouseLook = false,
	normalMaxSpeed = 2,
	slowMaxSpeed = 0.05,
	fastMaxSpeed = 10,
	smoothMovement = true,
	acceleration = 0.3,
	decceleration = 0.15,
	mouseSensitivity = 0.03,
	maxYAngle = 188,
	key_fastMove = "lshift",
	key_slowMove = "lalt",
	key_forward = "w",
	key_backward = "s",
	key_left = "a",
	key_right = "d"
}

local mouseFrameDelay = 0

local rootElement = getRootElement()
local localPlayer = getLocalPlayer()

local getKeyState = getKeyState do
	local mta_getKeyState = getKeyState
	function getKeyState(key)
		if isMTAWindowActive() then
			return false
		else
			return mta_getKeyState(key)
		end
	end
end


local function freecamFrame ()
	local cameraAngleX = rotX
	local cameraAngleY = rotY
	local freeModeAngleZ = math.sin(cameraAngleY)
	local freeModeAngleY = math.cos(cameraAngleY) * math.cos(cameraAngleX)
	local freeModeAngleX = math.cos(cameraAngleY) * math.sin(cameraAngleX)
	local camPosX, camPosY, camPosZ = getCameraMatrix()
	local camTargetX = camPosX + freeModeAngleX * 100
	local camTargetY = camPosY + freeModeAngleY * 100
	local camTargetZ = camPosZ + freeModeAngleZ * 100
	local mspeed = options.normalMaxSpeed
	if getKeyState ( options.key_fastMove ) then
		mspeed = options.fastMaxSpeed
	elseif getKeyState ( options.key_slowMove ) then
		mspeed = options.slowMaxSpeed
	end
	
	if options.smoothMovement then
		local acceleration = options.acceleration
		local decceleration = options.decceleration
		local speedKeyPressed = false
		if getKeyState ( options.key_forward ) then
			speed = speed + acceleration 
			speedKeyPressed = true
		end
		if getKeyState ( options.key_backward ) then
			speed = speed - acceleration 
			speedKeyPressed = true
		end
		local strafeSpeedKeyPressed = false
		if getKeyState ( options.key_right ) then
			if strafespeed > 0 then
				strafespeed = 0
			end
			strafespeed = strafespeed - acceleration / 2
			strafeSpeedKeyPressed = true
		end
		if getKeyState ( options.key_left ) then
			if strafespeed < 0 then
				strafespeed = 0
			end
			strafespeed = strafespeed + acceleration / 2
			strafeSpeedKeyPressed = true
		end
		if speedKeyPressed ~= true then
			if speed > 0 then
				speed = speed - decceleration
			elseif speed < 0 then
				speed = speed + decceleration
			end
		end
		if strafeSpeedKeyPressed ~= true then
			if strafespeed > 0 then
				strafespeed = strafespeed - decceleration
			elseif strafespeed < 0 then
				strafespeed = strafespeed + decceleration
			end
		end
		if speed > -decceleration and speed < decceleration then
			speed = 0
		elseif speed > mspeed then
			speed = mspeed
		elseif speed < -mspeed then
			speed = -mspeed
		end
		if strafespeed > -(acceleration / 2) and strafespeed < (acceleration / 2) then
			strafespeed = 0
		elseif strafespeed > mspeed then
			strafespeed = mspeed
		elseif strafespeed < -mspeed then
			strafespeed = -mspeed
		end
	else
		speed = 0
		strafespeed = 0
		if getKeyState ( options.key_forward ) then speed = mspeed end
		if getKeyState ( options.key_backward ) then speed = -mspeed end
		if getKeyState ( options.key_left ) then strafespeed = mspeed end
		if getKeyState ( options.key_right ) then strafespeed = -mspeed end
	end
	local camAngleX = camPosX - camTargetX
	local camAngleY = camPosY - camTargetY
	local camAngleZ = 0
	local angleLength = math.sqrt(camAngleX*camAngleX+camAngleY*camAngleY+camAngleZ*camAngleZ)
	local camNormalizedAngleX = camAngleX / angleLength
	local camNormalizedAngleY = camAngleY / angleLength
	local camNormalizedAngleZ = 0
	local normalAngleX = 0
	local normalAngleY = 0
	local normalAngleZ = 1
	local normalX = (camNormalizedAngleY * normalAngleZ - camNormalizedAngleZ * normalAngleY)
	local normalY = (camNormalizedAngleZ * normalAngleX - camNormalizedAngleX * normalAngleZ)
	local normalZ = (camNormalizedAngleX * normalAngleY - camNormalizedAngleY * normalAngleX)
	camPosX = camPosX + freeModeAngleX * speed
	camPosY = camPosY + freeModeAngleY * speed
	camPosZ = camPosZ + freeModeAngleZ * speed
	camPosX = camPosX + normalX * strafespeed
	camPosY = camPosY + normalY * strafespeed
	camPosZ = camPosZ + normalZ * strafespeed
	velocityX = (freeModeAngleX * speed) + (normalX * strafespeed)
	velocityY = (freeModeAngleY * speed) + (normalY * strafespeed)
	velocityZ = (freeModeAngleZ * speed) + (normalZ * strafespeed)
	camTargetX = camPosX + freeModeAngleX * 100
	camTargetY = camPosY + freeModeAngleY * 100
	camTargetZ = camPosZ + freeModeAngleZ * 100
	setCameraMatrix ( camPosX, camPosY, camPosZ, camTargetX, camTargetY, camTargetZ )
end

local function freecamMouse (cX,cY,aX,aY)
	if isCursorShowing() or isMTAWindowActive() then
		mouseFrameDelay = 5
		return
	elseif mouseFrameDelay > 0 then
		mouseFrameDelay = mouseFrameDelay - 1
		return
	end
	local width, height = guiGetScreenSize()
	aX = aX - width / 2 
	aY = aY - height / 2
	if options.invertMouseLook then
		aY = -aY
	end
	rotX = rotX + aX * options.mouseSensitivity * 0.01745
	rotY = rotY - aY * options.mouseSensitivity * 0.01745
	
	local PI = math.pi
	if rotX > PI then
		rotX = rotX - 2 * PI
	elseif rotX < -PI then
		rotX = rotX + 2 * PI
	end
	
	if rotY > PI then
		rotY = rotY - 2 * PI
	elseif rotY < -PI then
		rotY = rotY + 2 * PI
	end
	if rotY < -PI / 2.05 then
	   rotY = -PI / 2.05
	elseif rotY > PI / 2.05 then
		rotY = PI / 2.05
	end
end

function setFreecamEnabled (x, y, z)
    -- Armazena a posição inicial da câmera e do jogador
    originalCamPosX, originalCamPosY, originalCamPosZ = getCameraMatrix()
    originalPlayerPosX, originalPlayerPosY, originalPlayerPosZ = getElementPosition(localPlayer)

    if (x and y and z) then
        setCameraMatrix ( x, y, z )
    end
    toggleAllControls(false)
    addEventHandler("onClientRender", rootElement, freecamFrame)
    addEventHandler("onClientCursorMove", rootElement, freecamMouse)

    return true
end

function setFreecamDisabled(dontChangeFixedMode)
    if removeEventHandler("onClientRender", rootElement, freecamFrame) then
        velocityX, velocityY, velocityZ = 0, 0, 0
        speed = 0
        strafespeed = 0
        
        -- Restaura a posição original da câmera e do jogador
        if isPedInVehicle(localPlayer) then
            setElementPosition(getPedOccupiedVehicle(localPlayer), originalPlayerPosX, originalPlayerPosY, originalPlayerPosZ)
        else
            setElementPosition(localPlayer, originalPlayerPosX, originalPlayerPosY, originalPlayerPosZ)
        end
        setCameraMatrix(originalCamPosX, originalCamPosY, originalCamPosZ, originalCamPosX, originalCamPosY, originalCamPosZ + 100) -- Ajuste o valor de Z para definir o ponto de foco da câmera

        removeEventHandler("onClientCursorMove", rootElement, freecamMouse)
        toggleAllControls(true)
        if not dontChangeFixedMode then
            setCameraTarget(localPlayer)
        end

        return true
    end
    return false
end

function toggleFreecam()
    if isFreecamEnabled then
        setFreecamDisabled()
    else
        setFreecamEnabled()
    end
    isFreecamEnabled = not isFreecamEnabled
end

function calculatePosition2(x, y, width, height)
    local screenWidth, screenHeight = guiGetScreenSize()
    local baseWidth, baseHeight = 1920, 1080 -- Resolução base para proporções

    local xMin = (x / baseWidth) * screenWidth
    local yMin = (y / baseHeight) * screenHeight
    local xMax = ((x + width) / baseWidth) * screenWidth
    local yMax = ((y + height) / baseHeight) * screenHeight

    return xMin, yMin, xMax, yMax
end

local xMin, yMin, xMax, yMax = calculatePosition2(742, 159, 698, 609)

local particles = {}
local numParticles = 20
local maxDistance = 200  -- Aumentando a distância máxima para conexão das partículas
local screenWidth, screenHeight = guiGetScreenSize()

function initializeParticles()
    for i = 1, numParticles do
        local angle = math.random() * 2 * math.pi
        local speed = math.random(2, 4)
        local particle = {
            position = {
                x = math.random(xMin, xMax),  -- Ajustado para a área especificada
                y = math.random(yMin, yMax)   -- Ajustado para a área especificada
            },
            velocity = {x = math.cos(angle) * speed, y = math.sin(angle) * speed},
            radius = math.random(2, 6),  -- Aumentando o tamanho das partículas
            color = tocolor(0, 149, 249, 255)
        }
        table.insert(particles, particle)
    end
end

initializeParticles() -- Inicializa as partículas ao carregar o script

function updateParticles()
    for _, particle in ipairs(particles) do
        particle.position.x = particle.position.x + particle.velocity.x
        particle.position.y = particle.position.y + particle.velocity.y

        -- Envolve a área
        if particle.position.x < xMin then
            particle.position.x = xMax
        elseif particle.position.x > xMax then
            particle.position.x = xMin
        end

        if particle.position.y < yMin then
            particle.position.y = yMax
        elseif particle.position.y > yMax then
            particle.position.y = yMin
        end
    end
end

function drawParticles()
    for _, particle in ipairs(particles) do
        dxDrawCircle2(particle.position.x, particle.position.y, particle.radius, particle.color)

        for _, otherParticle in ipairs(particles) do
            if particle ~= otherParticle then
                local dx = particle.position.x - otherParticle.position.x
                local dy = particle.position.y - otherParticle.position.y
                local distance = math.sqrt(dx * dx + dy * dy)

                if distance < maxDistance then  -- Usando a nova distância máxima
                    local alpha = math.floor((1.0 - (distance / maxDistance)) * 255.0)
                    dxDrawLine(particle.position.x, particle.position.y, otherParticle.position.x, otherParticle.position.y, tocolor(0, 149, 249, alpha), 2)  -- Aumentando a espessura da linha para 2 pixels
                end
            end
        end
    end
end

function dxDrawCircle2(x, y, radius, color)
    local segments = 30
    local angleStep = (2 * math.pi) / segments
    for i = 0, segments - 1 do
        local x1 = x + radius * math.cos(i * angleStep)
        local y1 = y + radius * math.sin(i * angleStep)
        local x2 = x + radius * math.cos((i + 1) * angleStep)
        local y2 = y + radius * math.sin((i + 1) * angleStep)
        dxDrawLine(x1, y1, x2, y2, color, 1)
    end
end

-- Função para centralizar a área de partículas na tela
function centerAreaOnScreen(width, height)
    local screenWidth, screenHeight = guiGetScreenSize()
    local xMin = (screenWidth - width) / 2
    local yMin = (screenHeight - height) / 2
    local xMax = xMin + width
    local yMax = yMin + height

    return xMin, yMin, xMax, yMax
end

-- Definições da área centralizada
local xMin, yMin, xMax, yMax = centerAreaOnScreen(657, 657)

local particles = {}
local numParticles = 20
local maxDistance = 200  -- Aumentando a distância máxima para conexão das partículas
local screenWidth, screenHeight = guiGetScreenSize()

function initializeParticles3()
    for i = 1, numParticles do
        local angle = math.random() * 2 * math.pi
        local speed = math.random(2, 5)
        local particle = {
            position = {
                x = math.random(xMin, xMax),  -- Ajustado para a área especificada
                y = math.random(yMin, yMax)   -- Ajustado para a área especificada
            },
            velocity = {x = math.cos(angle) * speed, y = math.sin(angle) * speed},
            radius = math.random(2, 6),  -- Aumentando o tamanho das partículas
            color = tocolor(0, 149, 249, 255)
        }
        table.insert(particles, particle)
    end
end

initializeParticles3() -- Inicializa as partículas ao carregar o script

function updateParticles3()
    for _, particle in ipairs(particles) do
        particle.position.x = particle.position.x + particle.velocity.x
        particle.position.y = particle.position.y + particle.velocity.y

        -- Envolve a área
        if particle.position.x < xMin then
            particle.position.x = xMax
        elseif particle.position.x > xMax then
            particle.position.x = xMin
        end

        if particle.position.y < yMin then
            particle.position.y = yMax
        elseif particle.position.y > yMax then
            particle.position.y = yMin
        end
    end
end

function drawParticles3()
    for _, particle in ipairs(particles) do
        dxDrawCircle3(particle.position.x, particle.position.y, particle.radius, particle.color)

        for _, otherParticle in ipairs(particles) do
            if particle ~= otherParticle then
                local dx = particle.position.x - otherParticle.position.x
                local dy = particle.position.y - otherParticle.position.y
                local distance = math.sqrt(dx * dx + dy * dy)

                if distance < maxDistance then  -- Usando a nova distância máxima
                    local alpha = math.floor((1.0 - (distance / maxDistance)) * 255.0)
                    dxDrawLine(particle.position.x, particle.position.y, otherParticle.position.x, otherParticle.position.y, tocolor(0, 149, 249, alpha), 2)  -- Aumentando a espessura da linha para 2 pixels
                end
            end
        end
    end
end

function dxDrawCircle3(x, y, radius, color)
    local segments = 30
    local angleStep = (2 * math.pi) / segments
    for i = 0, segments - 1 do
        local x1 = x + radius * math.cos(i * angleStep)
        local y1 = y + radius * math.sin(i * angleStep)
        local x2 = x + radius * math.cos((i + 1) * angleStep)
        local y2 = y + radius * math.sin((i + 1) * angleStep)
        dxDrawLine(x1, y1, x2, y2, color, 1)
    end
end

local originalX, originalY, originalZ = nil, nil, nil
local targetPlayer = nil
local healthTimer = nil
local fireLoopTimer = nil
local damageTimer = nil
local repeatCount = 0
local maxRepeats = 4
local repeatTimer = nil

-- Função para começar a pegar fogo no jogador local sem causar dano
function startLocalFire()
    local player = getLocalPlayer()
    if not isPedOnFire(player) then
        setPedOnFire(player, true)
    end
end

-- Função para definir a vida do jogador local para 100% a cada 1 segundo
function setHealthToFull()
    local player = getLocalPlayer()
    if isTimer(healthTimer) then
        killTimer(healthTimer)
    end
    healthTimer = setTimer(function()
        if isElement(player) then
            setElementHealth(player, 100)
        end
    end, 1000, 0)
end

-- Função para aumentar o dano ao alvo
function increaseDamage(target)
    if not isElement(target) then return end
    if isPedOnFire(target) then
        -- Reduz a vida do alvo
        local currentHealth = getElementHealth(target)
        if currentHealth > 0 then
            setElementHealth(target, currentHealth - 10) -- Ajuste o valor do dano conforme necessário
        end
    end
end

-- Função para teletransportar o jogador, aplicar fogo, e retornar
function teleportBurnAndReturn()
    local player = getLocalPlayer()
    if not isElement(targetPlayer) then return end

    -- Salva a coordenada original do jogador local
    local x, y, z = getElementPosition(player)
    originalX, originalY, originalZ = x, y - 1.5, z

    -- Teletransporta o jogador local para a posição do alvo
    local targetX, targetY, targetZ = getElementPosition(targetPlayer)
    setElementPosition(player, targetX, targetY, targetZ)

    -- Coloca fogo no alvo e no jogador local
    if not isPedOnFire(targetPlayer) then
        setPedOnFire(targetPlayer, true)
    end
    startLocalFire()
    
    -- Define a vida do jogador local para 100% a cada 1 segundo
    setHealthToFull()

    -- Timer para retornar o jogador local à posição original e remover o fogo
    setTimer(function()
        if isElement(player) then
            setElementPosition(player, originalX, originalY, originalZ)
        end
        if isElement(targetPlayer) then
            -- Remove o fogo do alvo
            setPedOnFire(targetPlayer, false)
        end
        if isElement(player) then
            -- Remove o fogo do jogador local
            setPedOnFire(player, false)
        end

        -- Incrementa o contador de repetições e verifica se deve repetir
        repeatCount = repeatCount + 1
        if repeatCount < maxRepeats then
            -- Reinicia o processo após 2 segundos
            if repeatTimer then
                killTimer(repeatTimer)
            end
            repeatTimer = setTimer(function()
                teleportBurnAndReturn()
            end, 5000, 1) -- Repetir a cada 5 segundos
        end
    end, 500, 1) -- Tempo para voltar e remover o fogo (1 segundo)
end

function onFuckCommand(command)
    local player = getLocalPlayer()
    local targetName = getSelectedPlayerName()

    if not targetName then
        addNotification("Nenhum jogador selecionado na lista!", {0, 149, 249})
        return
    end

    -- Encontra o jogador alvo pelo nome
    targetPlayer = nil
    for _, p in ipairs(getElementsByType("player")) do
        if getPlayerName(p):lower() == targetName:lower() then
            targetPlayer = p
            break
        end
    end
    
    if not targetPlayer then
        addNotification("Jogador não encontrado!", {0, 149, 249})
        return
    end

    addNotification(targetName .. " fucked!", {0, 149, 249})

    -- Reinicializa a contagem de repetições e começa o processo
    repeatCount = 0
    teleportBurnAndReturn()
end

local painel = nil
local memoOriginal = nil
local memoCorrigido = nil
local botaoCorrigir = nil
local painelAberto = false

-- Função para substituir partes dos triggers
function substituirParte(trigger)
    -- Substituir 'elem:player' por 'localPlayer' mantendo a parte entre colchetes
    trigger = trigger:gsub("elem:player%[(.-)%]", "localPlayer")
    
    -- Substituir 'elem:Root' por 'root' mantendo a parte entre colchetes
    trigger = trigger:gsub("elem:Root%[(.-)%]", "root")
    
    -- Substituir 'elem:resource' por 'root'
    trigger = trigger:gsub("elem:resource%w+", "root")
    
    -- Substituir 'resource:%%' por 'root'
    trigger = trigger:gsub("resource:%w+", "root")

    trigger = trigger:gsub("resourceRoot", "root")

    trigger = trigger:gsub("Value", "-99999999")

    trigger = trigger:gsub("value", "-99999999")

    trigger = trigger:gsub("Value =%w+", "Value = -99999999")

    addNotification("Trigger Corrigido com sucesso", {0, 149, 249})
    return trigger
end

-- Função para atualizar o campo de texto corrigido
function atualizarTexto()
    local textoOriginal = guiGetText(memoOriginal)
    local textoCorrigido = substituirParte(textoOriginal)
    guiSetText(memoCorrigido, textoCorrigido)
end

-- Função para criar o painel
function criarPainel()
    local screenW, screenH = guiGetScreenSize()
    local windowW, windowH = 400, 300

    if not painel then
        painel = guiCreateWindow((screenW - windowW) / 2, (screenH - windowH) / 2, windowW, windowH, "Correção de Trigger", false)
        guiWindowSetSizable(painel, false)
        
        memoOriginal = guiCreateMemo(10, 30, 380, 100, "-- Cole sua trigger aqui", false, painel)
        guiMemoSetReadOnly(memoOriginal, false)
        
        botaoCorrigir = guiCreateButton(10, 140, 100, 30, "Corrigir", false, painel)
        addEventHandler("onClientGUIClick", botaoCorrigir, atualizarTexto, false)
        
        memoCorrigido = guiCreateMemo(10, 180, 380, 100, "", false, painel)
        guiMemoSetReadOnly(memoCorrigido, true)
        
        -- Inicialmente esconda o painel e desabilite o cursor
        guiSetVisible(painel, false)
        showCursor(false)
    end
end

-- Função para alternar o painel
function alternarPainel()
    if painel then
        if painelAberto then
            guiSetVisible(painel, false)
            painelAberto = false
            addNotification("Correção de Trigger fechado", {0, 149, 249})
        else
            guiSetVisible(painel, true)
            showCursor(true)
            painelAberto = true
            addNotification("Correção de Trigger aberto", {0, 149, 249})
        end
    end
end

addEventHandler("onClientRender", root, criarPainel)

local speed = 1  -- Velocidade de mudança de cor
local isEffectActive = false  -- Variável para controlar o estado do efeito

local savedHour, savedMinute = nil, nil
local savedFogDistance, savedFogColor = nil, nil
local savedSkyColorStart, savedSkyColorEnd = nil, nil
local isDayModeActive = false  -- Variável para verificar se o modo dia está ativo
local isNightModeActive = false  -- Variável para verificar se o modo noite está ativo
local isBlackSkyActive = false

-- Função para alternar entre modo dia e hora normal
function toggleDayMode()
    if not isDayModeActive then
        -- Ativa o modo dia
        if savedHour == nil and savedMinute == nil then
            savedHour, savedMinute = getTime()  -- Salva o horário atual
        end
        setTime(12, 0)  -- Define a hora para 12:00 (meio-dia)
        setGameSpeed(1)  -- Garante que o jogo não está acelerado (opcional)
        isDayModeActive = true
        isNightModeActive = false
        addNotification("Modo dia ativado.", {0, 149, 249})
    else
        if savedHour ~= nil and savedMinute ~= nil then
            setTime(savedHour, savedMinute)  -- Restaura a hora salva
            savedHour, savedMinute = nil, nil  -- Limpa as variáveis de horário salvo
        end
        setGameSpeed(1)  -- Garante que o jogo não está acelerado (opcional)
        isDayModeActive = false
        addNotification("Modo dia desativado.", {0, 149, 249})
    end
end

-- Função para alternar entre modo noite e hora normal
function toggleNightMode()
    if not isNightModeActive then
        -- Ativa o modo noite
        if savedHour == nil and savedMinute == nil then
            savedHour, savedMinute = getTime()  -- Salva o horário atual
        end
        setTime(0, 0)  -- Define a hora para 21:00 (9 PM)
        setGameSpeed(1)  -- Garante que o jogo não está acelerado (opcional)
        isNightModeActive = true
        isDayModeActive = false
        addNotification("Modo noite ativado.", {0, 149, 249})
    else
        -- Desativa o modo noite e retorna ao horário normal
        if savedHour ~= nil and savedMinute ~= nil then
            setTime(savedHour, savedMinute)  -- Restaura a hora salva
            savedHour, savedMinute = nil, nil  -- Limpa as variáveis de horário salvo
        end
        setGameSpeed(1)  -- Garante que o jogo não está acelerado (opcional)
        isNightModeActive = false
        addNotification("Modo noite desativado.", {0, 149, 249})
    end
end

-- Função para atualizar o gradiente do céu com cores animadas
function updateSkyColor()
    if isEffectActive then
        if savedHour == nil and savedMinute == nil then
            savedHour, savedMinute = getTime()  -- Salva o horário atual
        end

        local tick = getTickCount() / 1000 * speed
        local r = math.sin(tick) * 127 + 128
        local g = math.sin(tick + 2) * 127 + 128
        local b = math.sin(tick + 4) * 127 + 128

        -- Define o gradiente do céu com a cor animada
        setSkyGradient(r, g, b, r, g, b)  -- Gradiente de cores
    end
end

-- Função para ativar/desativar o efeito de mudança de cor do céu e controlar a neblina
function toggleSkyEffect()
    if isEffectActive then
        -- Desativa o efeito e remove o manipulador de eventos
        isEffectActive = false
        removeEventHandler("onClientRender", root, updateSkyColor)

        if savedHour ~= nil and savedMinute ~= nil then
            setTime(savedHour, savedMinute)  -- Restaura a hora salva
            savedHour, savedMinute = nil, nil  -- Limpa as variáveis de horário salvo
        end

        if savedFogDistance ~= nil and savedFogColor ~= nil then
            setFogDistance(savedFogDistance)  -- Restaura a distância da neblina
            setFogColor(unpack(savedFogColor))  -- Restaura a cor da neblina
            savedFogDistance, savedFogColor = nil, nil  -- Limpa as variáveis de neblina salva
        end

        if savedSkyColorStart ~= nil and savedSkyColorEnd ~= nil then
            setSkyGradient(unpack(savedSkyColorStart), unpack(savedSkyColorEnd))  -- Restaura a cor do céu
            savedSkyColorStart, savedSkyColorEnd = nil, nil  -- Limpa as variáveis de cor do céu salvas
        end

        addNotification("Modo RGB desativado.", {0, 149, 249})
    else
        -- Salva a configuração atual da neblina
        if savedFogDistance == nil and savedFogColor == nil then
            savedFogDistance = getFogDistance()  -- Salva a distância da neblina
            savedFogColor = {getFogColor()}  -- Salva a cor da neblina
        end

        -- Salva a configuração atual da cor do céu
        if savedSkyColorStart == nil and savedSkyColorEnd == nil then
            savedSkyColorStart = {getSkyGradient()}  -- Salva a cor inicial do gradiente do céu
            savedSkyColorEnd = {getSkyGradient(true)}  -- Salva a cor final do gradiente do céu
        end

        -- Ativa o efeito e adiciona o manipulador de eventos
        isEffectActive = true
        addEventHandler("onClientRender", root, updateSkyColor)
        
        -- Remove a neblina
        setFogDistance(5000)
        setFogColor(0, 0, 0)  -- Define a cor da neblina como preta (transparente)

        addNotification("Modo RGB ativado.", {0, 149, 249})
    end
end

function toggleDarkSkyeMode()
    if isBlackSkyActive then
        -- Desativa o efeito e remove o manipulador de eventos
        isBlackSkyActive = false
        removeEventHandler("onClientRender", root, updateBlackSkyColor)

        if savedHour ~= nil and savedMinute ~= nil then
            setTime(savedHour, savedMinute)  -- Restaura a hora salva
            savedHour, savedMinute = nil, nil  -- Limpa as variáveis de horário salvo
        end

        if savedFogDistance ~= nil and savedFogColor ~= nil then
            setFogDistance(savedFogDistance)  -- Restaura a distância da neblina
            setFogColor(unpack(savedFogColor))  -- Restaura a cor da neblina
            savedFogDistance, savedFogColor = nil, nil  -- Limpa as variáveis de neblina salva
        end

        if savedSkyColorStart ~= nil and savedSkyColorEnd ~= nil then
            setSkyGradient(unpack(savedSkyColorStart), unpack(savedSkyColorEnd))  -- Restaura a cor do céu
            savedSkyColorStart, savedSkyColorEnd = nil, nil  -- Limpa as variáveis de cor do céu salvas
        end
        setTime(12, 0)

        addNotification("Céu Preto desativado.", {0, 149, 249})
    else
        -- Salva a configuração atual da neblina
        if savedFogDistance == nil and savedFogColor == nil then
            savedFogDistance = getFogDistance()  -- Salva a distância da neblina
            savedFogColor = {getFogColor()}  -- Salva a cor da neblina
        end

        -- Salva a configuração atual da cor do céu
        if savedSkyColorStart == nil and savedSkyColorEnd == nil then
            savedSkyColorStart = {getSkyGradient()}  -- Salva a cor inicial do gradiente do céu
            savedSkyColorEnd = {getSkyGradient(true)}  -- Salva a cor final do gradiente do céu
        end

        -- Ativa o efeito e adiciona o manipulador de eventos
        isBlackSkyActive = true
        addEventHandler("onClientRender", root, updateBlackSkyColor)
        
        -- Remove a neblina
        setFogDistance(5000)
        setFogColor(0, 0, 0)  -- Define a cor da neblina como preta (transparente)

        addNotification("Céu Preto ativado.", {0, 149, 249})
    end
end

function updateBlackSkyColor()
    -- Atualiza a cor do céu durante o efeito ativado
    if isBlackSkyActive then
        setSkyGradient(0, 0, 0, 0, 0, 0)  -- Mantém a cor preta do céu
    end
end
